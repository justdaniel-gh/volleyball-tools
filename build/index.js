/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
var EntryPoint;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/async-mutex/lib/Mutex.js":
/*!***********************************************!*\
  !*** ./node_modules/async-mutex/lib/Mutex.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.mjs\");\nvar Semaphore_1 = __webpack_require__(/*! ./Semaphore */ \"./node_modules/async-mutex/lib/Semaphore.js\");\nvar Mutex = /** @class */ (function () {\n    function Mutex(cancelError) {\n        this._semaphore = new Semaphore_1.default(1, cancelError);\n    }\n    Mutex.prototype.acquire = function () {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {\n            var _a, releaser;\n            return (0, tslib_1.__generator)(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this._semaphore.acquire()];\n                    case 1:\n                        _a = _b.sent(), releaser = _a[1];\n                        return [2 /*return*/, releaser];\n                }\n            });\n        });\n    };\n    Mutex.prototype.runExclusive = function (callback) {\n        return this._semaphore.runExclusive(function () { return callback(); });\n    };\n    Mutex.prototype.isLocked = function () {\n        return this._semaphore.isLocked();\n    };\n    Mutex.prototype.waitForUnlock = function () {\n        return this._semaphore.waitForUnlock();\n    };\n    /** @deprecated Deprecated in 0.3.0, will be removed in 0.4.0. Use runExclusive instead. */\n    Mutex.prototype.release = function () {\n        this._semaphore.release();\n    };\n    Mutex.prototype.cancel = function () {\n        return this._semaphore.cancel();\n    };\n    return Mutex;\n}());\nexports[\"default\"] = Mutex;\n\n\n//# sourceURL=webpack://EntryPoint/./node_modules/async-mutex/lib/Mutex.js?");

/***/ }),

/***/ "./node_modules/async-mutex/lib/Semaphore.js":
/*!***************************************************!*\
  !*** ./node_modules/async-mutex/lib/Semaphore.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.mjs\");\nvar errors_1 = __webpack_require__(/*! ./errors */ \"./node_modules/async-mutex/lib/errors.js\");\nvar Semaphore = /** @class */ (function () {\n    function Semaphore(_maxConcurrency, _cancelError) {\n        if (_cancelError === void 0) { _cancelError = errors_1.E_CANCELED; }\n        this._maxConcurrency = _maxConcurrency;\n        this._cancelError = _cancelError;\n        this._queue = [];\n        this._waiters = [];\n        if (_maxConcurrency <= 0) {\n            throw new Error('semaphore must be initialized to a positive value');\n        }\n        this._value = _maxConcurrency;\n    }\n    Semaphore.prototype.acquire = function () {\n        var _this = this;\n        var locked = this.isLocked();\n        var ticketPromise = new Promise(function (resolve, reject) {\n            return _this._queue.push({ resolve: resolve, reject: reject });\n        });\n        if (!locked)\n            this._dispatch();\n        return ticketPromise;\n    };\n    Semaphore.prototype.runExclusive = function (callback) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {\n            var _a, value, release;\n            return (0, tslib_1.__generator)(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.acquire()];\n                    case 1:\n                        _a = _b.sent(), value = _a[0], release = _a[1];\n                        _b.label = 2;\n                    case 2:\n                        _b.trys.push([2, , 4, 5]);\n                        return [4 /*yield*/, callback(value)];\n                    case 3: return [2 /*return*/, _b.sent()];\n                    case 4:\n                        release();\n                        return [7 /*endfinally*/];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Semaphore.prototype.waitForUnlock = function () {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {\n            var waitPromise;\n            var _this = this;\n            return (0, tslib_1.__generator)(this, function (_a) {\n                if (!this.isLocked()) {\n                    return [2 /*return*/, Promise.resolve()];\n                }\n                waitPromise = new Promise(function (resolve) { return _this._waiters.push({ resolve: resolve }); });\n                return [2 /*return*/, waitPromise];\n            });\n        });\n    };\n    Semaphore.prototype.isLocked = function () {\n        return this._value <= 0;\n    };\n    /** @deprecated Deprecated in 0.3.0, will be removed in 0.4.0. Use runExclusive instead. */\n    Semaphore.prototype.release = function () {\n        if (this._maxConcurrency > 1) {\n            throw new Error('this method is unavailable on semaphores with concurrency > 1; use the scoped release returned by acquire instead');\n        }\n        if (this._currentReleaser) {\n            var releaser = this._currentReleaser;\n            this._currentReleaser = undefined;\n            releaser();\n        }\n    };\n    Semaphore.prototype.cancel = function () {\n        var _this = this;\n        this._queue.forEach(function (ticket) { return ticket.reject(_this._cancelError); });\n        this._queue = [];\n    };\n    Semaphore.prototype._dispatch = function () {\n        var _this = this;\n        var nextTicket = this._queue.shift();\n        if (!nextTicket)\n            return;\n        var released = false;\n        this._currentReleaser = function () {\n            if (released)\n                return;\n            released = true;\n            _this._value++;\n            _this._resolveWaiters();\n            _this._dispatch();\n        };\n        nextTicket.resolve([this._value--, this._currentReleaser]);\n    };\n    Semaphore.prototype._resolveWaiters = function () {\n        this._waiters.forEach(function (waiter) { return waiter.resolve(); });\n        this._waiters = [];\n    };\n    return Semaphore;\n}());\nexports[\"default\"] = Semaphore;\n\n\n//# sourceURL=webpack://EntryPoint/./node_modules/async-mutex/lib/Semaphore.js?");

/***/ }),

/***/ "./node_modules/async-mutex/lib/errors.js":
/*!************************************************!*\
  !*** ./node_modules/async-mutex/lib/errors.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.E_CANCELED = exports.E_ALREADY_LOCKED = exports.E_TIMEOUT = void 0;\nexports.E_TIMEOUT = new Error('timeout while waiting for mutex to become available');\nexports.E_ALREADY_LOCKED = new Error('mutex already locked');\nexports.E_CANCELED = new Error('request for lock canceled');\n\n\n//# sourceURL=webpack://EntryPoint/./node_modules/async-mutex/lib/errors.js?");

/***/ }),

/***/ "./node_modules/async-mutex/lib/index.js":
/*!***********************************************!*\
  !*** ./node_modules/async-mutex/lib/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.tryAcquire = exports.withTimeout = exports.Semaphore = exports.Mutex = void 0;\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.mjs\");\nvar Mutex_1 = __webpack_require__(/*! ./Mutex */ \"./node_modules/async-mutex/lib/Mutex.js\");\nObject.defineProperty(exports, \"Mutex\", ({ enumerable: true, get: function () { return Mutex_1.default; } }));\nvar Semaphore_1 = __webpack_require__(/*! ./Semaphore */ \"./node_modules/async-mutex/lib/Semaphore.js\");\nObject.defineProperty(exports, \"Semaphore\", ({ enumerable: true, get: function () { return Semaphore_1.default; } }));\nvar withTimeout_1 = __webpack_require__(/*! ./withTimeout */ \"./node_modules/async-mutex/lib/withTimeout.js\");\nObject.defineProperty(exports, \"withTimeout\", ({ enumerable: true, get: function () { return withTimeout_1.withTimeout; } }));\nvar tryAcquire_1 = __webpack_require__(/*! ./tryAcquire */ \"./node_modules/async-mutex/lib/tryAcquire.js\");\nObject.defineProperty(exports, \"tryAcquire\", ({ enumerable: true, get: function () { return tryAcquire_1.tryAcquire; } }));\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./errors */ \"./node_modules/async-mutex/lib/errors.js\"), exports);\n\n\n//# sourceURL=webpack://EntryPoint/./node_modules/async-mutex/lib/index.js?");

/***/ }),

/***/ "./node_modules/async-mutex/lib/tryAcquire.js":
/*!****************************************************!*\
  !*** ./node_modules/async-mutex/lib/tryAcquire.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.tryAcquire = void 0;\nvar errors_1 = __webpack_require__(/*! ./errors */ \"./node_modules/async-mutex/lib/errors.js\");\nvar withTimeout_1 = __webpack_require__(/*! ./withTimeout */ \"./node_modules/async-mutex/lib/withTimeout.js\");\n// eslint-disable-next-lisne @typescript-eslint/explicit-module-boundary-types\nfunction tryAcquire(sync, alreadyAcquiredError) {\n    if (alreadyAcquiredError === void 0) { alreadyAcquiredError = errors_1.E_ALREADY_LOCKED; }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (0, withTimeout_1.withTimeout)(sync, 0, alreadyAcquiredError);\n}\nexports.tryAcquire = tryAcquire;\n\n\n//# sourceURL=webpack://EntryPoint/./node_modules/async-mutex/lib/tryAcquire.js?");

/***/ }),

/***/ "./node_modules/async-mutex/lib/withTimeout.js":
/*!*****************************************************!*\
  !*** ./node_modules/async-mutex/lib/withTimeout.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.withTimeout = void 0;\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.mjs\");\nvar errors_1 = __webpack_require__(/*! ./errors */ \"./node_modules/async-mutex/lib/errors.js\");\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction withTimeout(sync, timeout, timeoutError) {\n    var _this = this;\n    if (timeoutError === void 0) { timeoutError = errors_1.E_TIMEOUT; }\n    return {\n        acquire: function () {\n            return new Promise(function (resolve, reject) { return (0, tslib_1.__awaiter)(_this, void 0, void 0, function () {\n                var isTimeout, handle, ticket, release, e_1;\n                return (0, tslib_1.__generator)(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            isTimeout = false;\n                            handle = setTimeout(function () {\n                                isTimeout = true;\n                                reject(timeoutError);\n                            }, timeout);\n                            _a.label = 1;\n                        case 1:\n                            _a.trys.push([1, 3, , 4]);\n                            return [4 /*yield*/, sync.acquire()];\n                        case 2:\n                            ticket = _a.sent();\n                            if (isTimeout) {\n                                release = Array.isArray(ticket) ? ticket[1] : ticket;\n                                release();\n                            }\n                            else {\n                                clearTimeout(handle);\n                                resolve(ticket);\n                            }\n                            return [3 /*break*/, 4];\n                        case 3:\n                            e_1 = _a.sent();\n                            if (!isTimeout) {\n                                clearTimeout(handle);\n                                reject(e_1);\n                            }\n                            return [3 /*break*/, 4];\n                        case 4: return [2 /*return*/];\n                    }\n                });\n            }); });\n        },\n        runExclusive: function (callback) {\n            return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {\n                var release, ticket;\n                return (0, tslib_1.__generator)(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            release = function () { return undefined; };\n                            _a.label = 1;\n                        case 1:\n                            _a.trys.push([1, , 7, 8]);\n                            return [4 /*yield*/, this.acquire()];\n                        case 2:\n                            ticket = _a.sent();\n                            if (!Array.isArray(ticket)) return [3 /*break*/, 4];\n                            release = ticket[1];\n                            return [4 /*yield*/, callback(ticket[0])];\n                        case 3: return [2 /*return*/, _a.sent()];\n                        case 4:\n                            release = ticket;\n                            return [4 /*yield*/, callback()];\n                        case 5: return [2 /*return*/, _a.sent()];\n                        case 6: return [3 /*break*/, 8];\n                        case 7:\n                            release();\n                            return [7 /*endfinally*/];\n                        case 8: return [2 /*return*/];\n                    }\n                });\n            });\n        },\n        /** @deprecated Deprecated in 0.3.0, will be removed in 0.4.0. Use runExclusive instead. */\n        release: function () {\n            sync.release();\n        },\n        cancel: function () {\n            return sync.cancel();\n        },\n        waitForUnlock: function () { return sync.waitForUnlock(); },\n        isLocked: function () { return sync.isLocked(); },\n    };\n}\nexports.withTimeout = withTimeout;\n\n\n//# sourceURL=webpack://EntryPoint/./node_modules/async-mutex/lib/withTimeout.js?");

/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * jQuery JavaScript Library v3.7.1\n * https://jquery.com/\n *\n * Copyright OpenJS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2023-08-28T13:37Z\n */\n( function( global, factory ) {\n\n\t\"use strict\";\n\n\tif (  true && typeof module.exports === \"object\" ) {\n\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket trac-14549 for more info.\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n} )( typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n// enough that all such attempts are guarded in a try block.\n\"use strict\";\n\nvar arr = [];\n\nvar getProto = Object.getPrototypeOf;\n\nvar slice = arr.slice;\n\nvar flat = arr.flat ? function( array ) {\n\treturn arr.flat.call( array );\n} : function( array ) {\n\treturn arr.concat.apply( [], array );\n};\n\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar fnToString = hasOwn.toString;\n\nvar ObjectFunctionString = fnToString.call( Object );\n\nvar support = {};\n\nvar isFunction = function isFunction( obj ) {\n\n\t\t// Support: Chrome <=57, Firefox <=52\n\t\t// In some browsers, typeof returns \"function\" for HTML <object> elements\n\t\t// (i.e., `typeof document.createElement( \"object\" ) === \"function\"`).\n\t\t// We don't want to classify *any* DOM node as a function.\n\t\t// Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5\n\t\t// Plus for old WebKit, typeof returns \"function\" for HTML collections\n\t\t// (e.g., `typeof document.getElementsByTagName(\"div\") === \"function\"`). (gh-4756)\n\t\treturn typeof obj === \"function\" && typeof obj.nodeType !== \"number\" &&\n\t\t\ttypeof obj.item !== \"function\";\n\t};\n\n\nvar isWindow = function isWindow( obj ) {\n\t\treturn obj != null && obj === obj.window;\n\t};\n\n\nvar document = window.document;\n\n\n\n\tvar preservedScriptAttributes = {\n\t\ttype: true,\n\t\tsrc: true,\n\t\tnonce: true,\n\t\tnoModule: true\n\t};\n\n\tfunction DOMEval( code, node, doc ) {\n\t\tdoc = doc || document;\n\n\t\tvar i, val,\n\t\t\tscript = doc.createElement( \"script\" );\n\n\t\tscript.text = code;\n\t\tif ( node ) {\n\t\t\tfor ( i in preservedScriptAttributes ) {\n\n\t\t\t\t// Support: Firefox 64+, Edge 18+\n\t\t\t\t// Some browsers don't support the \"nonce\" property on scripts.\n\t\t\t\t// On the other hand, just using `getAttribute` is not enough as\n\t\t\t\t// the `nonce` attribute is reset to an empty string whenever it\n\t\t\t\t// becomes browsing-context connected.\n\t\t\t\t// See https://github.com/whatwg/html/issues/2369\n\t\t\t\t// See https://html.spec.whatwg.org/#nonce-attributes\n\t\t\t\t// The `node.getAttribute` check was added for the sake of\n\t\t\t\t// `jQuery.globalEval` so that it can fake a nonce-containing node\n\t\t\t\t// via an object.\n\t\t\t\tval = node[ i ] || node.getAttribute && node.getAttribute( i );\n\t\t\t\tif ( val ) {\n\t\t\t\t\tscript.setAttribute( i, val );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n\t}\n\n\nfunction toType( obj ) {\n\tif ( obj == null ) {\n\t\treturn obj + \"\";\n\t}\n\n\t// Support: Android <=2.3 only (functionish RegExp)\n\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\ttypeof obj;\n}\n/* global Symbol */\n// Defining this global in .eslintrc.json would create a danger of using the global\n// unguarded in another place, it seems safer to define global only for this module\n\n\n\nvar version = \"3.7.1\",\n\n\trhtmlSuffix = /HTML$/i,\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t};\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\n\t\t// Return all the elements in a clean array\n\t\tif ( num == null ) {\n\t\t\treturn slice.call( this );\n\t\t}\n\n\t\t// Return just the one element from the set\n\t\treturn num < 0 ? this[ num + this.length ] : this[ num ];\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teven: function() {\n\t\treturn this.pushStack( jQuery.grep( this, function( _elem, i ) {\n\t\t\treturn ( i + 1 ) % 2;\n\t\t} ) );\n\t},\n\n\todd: function() {\n\t\treturn this.pushStack( jQuery.grep( this, function( _elem, i ) {\n\t\t\treturn i % 2;\n\t\t} ) );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent Object.prototype pollution\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( name === \"__proto__\" || target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = Array.isArray( copy ) ) ) ) {\n\t\t\t\t\tsrc = target[ name ];\n\n\t\t\t\t\t// Ensure proper type for the source value\n\t\t\t\t\tif ( copyIsArray && !Array.isArray( src ) ) {\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {\n\t\t\t\t\t\tclone = {};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src;\n\t\t\t\t\t}\n\t\t\t\t\tcopyIsArray = false;\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisPlainObject: function( obj ) {\n\t\tvar proto, Ctor;\n\n\t\t// Detect obvious negatives\n\t\t// Use toString instead of jQuery.type to catch host objects\n\t\tif ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tproto = getProto( obj );\n\n\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\n\t\tif ( !proto ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Objects with prototype are plain iff they were constructed by a global Object function\n\t\tCtor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n\t\treturn typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n\t},\n\n\tisEmptyObject: function( obj ) {\n\t\tvar name;\n\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\t// Evaluates a script in a provided context; falls back to the global one\n\t// if not specified.\n\tglobalEval: function( code, options, doc ) {\n\t\tDOMEval( code, { nonce: options && options.nonce }, doc );\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\n\t// Retrieve the text value of an array of DOM nodes\n\ttext: function( elem ) {\n\t\tvar node,\n\t\t\tret = \"\",\n\t\t\ti = 0,\n\t\t\tnodeType = elem.nodeType;\n\n\t\tif ( !nodeType ) {\n\n\t\t\t// If no nodeType, this is expected to be an array\n\t\t\twhile ( ( node = elem[ i++ ] ) ) {\n\n\t\t\t\t// Do not traverse comment nodes\n\t\t\t\tret += jQuery.text( node );\n\t\t\t}\n\t\t}\n\t\tif ( nodeType === 1 || nodeType === 11 ) {\n\t\t\treturn elem.textContent;\n\t\t}\n\t\tif ( nodeType === 9 ) {\n\t\t\treturn elem.documentElement.textContent;\n\t\t}\n\t\tif ( nodeType === 3 || nodeType === 4 ) {\n\t\t\treturn elem.nodeValue;\n\t\t}\n\n\t\t// Do not include comment or processing instruction nodes\n\n\t\treturn ret;\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\tisXMLDoc: function( elem ) {\n\t\tvar namespace = elem && elem.namespaceURI,\n\t\t\tdocElem = elem && ( elem.ownerDocument || elem ).documentElement;\n\n\t\t// Assume HTML when documentElement doesn't yet exist, such as inside\n\t\t// document fragments.\n\t\treturn !rhtmlSuffix.test( namespace || docElem && docElem.nodeName || \"HTML\" );\n\t},\n\n\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t// push.apply(_, arraylike) throws on ancient WebKit\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn flat( ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\n\tfunction( _i, name ) {\n\t\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n\t} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: real iOS 8.2 only (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn't used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\ttype = toType( obj );\n\n\tif ( isFunction( obj ) || isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\n\n\nfunction nodeName( elem, name ) {\n\n\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\n}\nvar pop = arr.pop;\n\n\nvar sort = arr.sort;\n\n\nvar splice = arr.splice;\n\n\nvar whitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\";\n\n\nvar rtrimCSS = new RegExp(\n\t\"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\",\n\t\"g\"\n);\n\n\n\n\n// Note: an element does not contain itself\njQuery.contains = function( a, b ) {\n\tvar bup = b && b.parentNode;\n\n\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\n\t\t// Support: IE 9 - 11+\n\t\t// IE doesn't have `contains` on SVG.\n\t\ta.contains ?\n\t\t\ta.contains( bup ) :\n\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t) );\n};\n\n\n\n\n// CSS string/identifier serialization\n// https://drafts.csswg.org/cssom/#common-serializing-idioms\nvar rcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\x80-\\uFFFF\\w-]/g;\n\nfunction fcssescape( ch, asCodePoint ) {\n\tif ( asCodePoint ) {\n\n\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\tif ( ch === \"\\0\" ) {\n\t\t\treturn \"\\uFFFD\";\n\t\t}\n\n\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\treturn ch.slice( 0, -1 ) + \"\\\\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n\t}\n\n\t// Other potentially-special ASCII characters get backslash-escaped\n\treturn \"\\\\\" + ch;\n}\n\njQuery.escapeSelector = function( sel ) {\n\treturn ( sel + \"\" ).replace( rcssescape, fcssescape );\n};\n\n\n\n\nvar preferredDoc = document,\n\tpushNative = push;\n\n( function() {\n\nvar i,\n\tExpr,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\tpush = pushNative,\n\n\t// Local document vars\n\tdocument,\n\tdocumentElement,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\tmatches,\n\n\t// Instance-specific data\n\texpando = jQuery.expando,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tnonnativeSelectorCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|\" +\n\t\t\"loop|multiple|open|readonly|required|scoped\",\n\n\t// Regular expressions\n\n\t// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram\n\tidentifier = \"(?:\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace +\n\t\t\"?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+\",\n\n\t// Attribute selectors: https://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\n\t\t// \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" +\n\t\twhitespace + \"*\\\\]\",\n\n\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" +\n\t\t\")\\\\)|)\",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n\trleadingCombinator = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" +\n\t\twhitespace + \"*\" ),\n\trdescend = new RegExp( whitespace + \"|>\" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n\tmatchExpr = {\n\t\tID: new RegExp( \"^#(\" + identifier + \")\" ),\n\t\tCLASS: new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n\t\tTAG: new RegExp( \"^(\" + identifier + \"|[*])\" ),\n\t\tATTR: new RegExp( \"^\" + attributes ),\n\t\tPSEUDO: new RegExp( \"^\" + pseudos ),\n\t\tCHILD: new RegExp(\n\t\t\t\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" +\n\t\t\t\twhitespace + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" +\n\t\t\t\twhitespace + \"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n\t\tbool: new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\tneedsContext: new RegExp( \"^\" + whitespace +\n\t\t\t\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + whitespace +\n\t\t\t\"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n\t},\n\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\n\t// CSS escapes\n\t// https://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( \"\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace +\n\t\t\"?|\\\\\\\\([^\\\\r\\\\n\\\\f])\", \"g\" ),\n\tfunescape = function( escape, nonHex ) {\n\t\tvar high = \"0x\" + escape.slice( 1 ) - 0x10000;\n\n\t\tif ( nonHex ) {\n\n\t\t\t// Strip the backslash prefix from a non-hex escape sequence\n\t\t\treturn nonHex;\n\t\t}\n\n\t\t// Replace a hexadecimal escape sequence with the encoded Unicode code point\n\t\t// Support: IE <=11+\n\t\t// For values outside the Basic Multilingual Plane (BMP), manually construct a\n\t\t// surrogate pair\n\t\treturn high < 0 ?\n\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// Used for iframes; see `setDocument`.\n\t// Support: IE 9 - 11+, Edge 12 - 18+\n\t// Removing the function wrapper causes a \"Permission Denied\"\n\t// error in IE/Edge.\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t},\n\n\tinDisabledFieldset = addCombinator(\n\t\tfunction( elem ) {\n\t\t\treturn elem.disabled === true && nodeName( elem, \"fieldset\" );\n\t\t},\n\t\t{ dir: \"parentNode\", next: \"legend\" }\n\t);\n\n// Support: IE <=9 only\n// Accessing document.activeElement can throw unexpectedly\n// https://bugs.jquery.com/ticket/13393\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t( arr = slice.call( preferredDoc.childNodes ) ),\n\t\tpreferredDoc.childNodes\n\t);\n\n\t// Support: Android <=4.0\n\t// Detect silently failing push.apply\n\t// eslint-disable-next-line no-unused-expressions\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = {\n\t\tapply: function( target, els ) {\n\t\t\tpushNative.apply( target, slice.call( els ) );\n\t\t},\n\t\tcall: function( target ) {\n\t\t\tpushNative.apply( target, slice.call( arguments, 1 ) );\n\t\t}\n\t};\n}\n\nfunction find( selector, context, results, seed ) {\n\tvar m, i, elem, nid, match, groups, newSelector,\n\t\tnewContext = context && context.ownerDocument,\n\n\t\t// nodeType defaults to 9, since context defaults to document\n\t\tnodeType = context ? context.nodeType : 9;\n\n\tresults = results || [];\n\n\t// Return early from calls with invalid selector or context\n\tif ( typeof selector !== \"string\" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\tif ( !seed ) {\n\t\tsetDocument( context );\n\t\tcontext = context || document;\n\n\t\tif ( documentIsHTML ) {\n\n\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n\t\t\tif ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {\n\n\t\t\t\t// ID selector\n\t\t\t\tif ( ( m = match[ 1 ] ) ) {\n\n\t\t\t\t\t// Document context\n\t\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\t\tif ( ( elem = context.getElementById( m ) ) ) {\n\n\t\t\t\t\t\t\t// Support: IE 9 only\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\t\tpush.call( results, elem );\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t// Element context\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Support: IE 9 only\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\tif ( newContext && ( elem = newContext.getElementById( m ) ) &&\n\t\t\t\t\t\t\tfind.contains( context, elem ) &&\n\t\t\t\t\t\t\telem.id === m ) {\n\n\t\t\t\t\t\t\tpush.call( results, elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// Type selector\n\t\t\t\t} else if ( match[ 2 ] ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\t\treturn results;\n\n\t\t\t\t// Class selector\n\t\t\t\t} else if ( ( m = match[ 3 ] ) && context.getElementsByClassName ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Take advantage of querySelectorAll\n\t\t\tif ( !nonnativeSelectorCache[ selector + \" \" ] &&\n\t\t\t\t( !rbuggyQSA || !rbuggyQSA.test( selector ) ) ) {\n\n\t\t\t\tnewSelector = selector;\n\t\t\t\tnewContext = context;\n\n\t\t\t\t// qSA considers elements outside a scoping root when evaluating child or\n\t\t\t\t// descendant combinators, which is not what we want.\n\t\t\t\t// In such cases, we work around the behavior by prefixing every selector in the\n\t\t\t\t// list with an ID selector referencing the scope context.\n\t\t\t\t// The technique has to be used as well when a leading combinator is used\n\t\t\t\t// as such selectors are not recognized by querySelectorAll.\n\t\t\t\t// Thanks to Andrew Dupont for this technique.\n\t\t\t\tif ( nodeType === 1 &&\n\t\t\t\t\t( rdescend.test( selector ) || rleadingCombinator.test( selector ) ) ) {\n\n\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext;\n\n\t\t\t\t\t// We can use :scope instead of the ID hack if the browser\n\t\t\t\t\t// supports it & if we're not changing the context.\n\t\t\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when\n\t\t\t\t\t// strict-comparing two documents; shallow comparisons work.\n\t\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\t\tif ( newContext != context || !support.scope ) {\n\n\t\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\t\tif ( ( nid = context.getAttribute( \"id\" ) ) ) {\n\t\t\t\t\t\t\tnid = jQuery.escapeSelector( nid );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcontext.setAttribute( \"id\", ( nid = expando ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\tgroups = tokenize( selector );\n\t\t\t\t\ti = groups.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tgroups[ i ] = ( nid ? \"#\" + nid : \":scope\" ) + \" \" +\n\t\t\t\t\t\t\ttoSelector( groups[ i ] );\n\t\t\t\t\t}\n\t\t\t\t\tnewSelector = groups.join( \",\" );\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t);\n\t\t\t\t\treturn results;\n\t\t\t\t} catch ( qsaError ) {\n\t\t\t\t\tnonnativeSelectorCache( selector, true );\n\t\t\t\t} finally {\n\t\t\t\t\tif ( nid === expando ) {\n\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrimCSS, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\n\t\t// Use (key + \" \") to avoid collision with native prototype properties\n\t\t// (see https://github.com/jquery/sizzle/issues/157)\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn ( cache[ key + \" \" ] = value );\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by jQuery selector module\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created element and returns a boolean result\n */\nfunction assert( fn ) {\n\tvar el = document.createElement( \"fieldset\" );\n\n\ttry {\n\t\treturn !!fn( el );\n\t} catch ( e ) {\n\t\treturn false;\n\t} finally {\n\n\t\t// Remove from its parent by default\n\t\tif ( el.parentNode ) {\n\t\t\tel.parentNode.removeChild( el );\n\t\t}\n\n\t\t// release memory in IE\n\t\tel = null;\n\t}\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\treturn nodeName( elem, \"input\" ) && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\treturn ( nodeName( elem, \"input\" ) || nodeName( elem, \"button\" ) ) &&\n\t\t\telem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n\t// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n\treturn function( elem ) {\n\n\t\t// Only certain elements can match :enabled or :disabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n\t\tif ( \"form\" in elem ) {\n\n\t\t\t// Check for inherited disabledness on relevant non-disabled elements:\n\t\t\t// * listed form-associated elements in a disabled fieldset\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n\t\t\t// * option elements in a disabled optgroup\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n\t\t\t// All such elements have a \"form\" property.\n\t\t\tif ( elem.parentNode && elem.disabled === false ) {\n\n\t\t\t\t// Option elements defer to a parent optgroup if present\n\t\t\t\tif ( \"label\" in elem ) {\n\t\t\t\t\tif ( \"label\" in elem.parentNode ) {\n\t\t\t\t\t\treturn elem.parentNode.disabled === disabled;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn elem.disabled === disabled;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Support: IE 6 - 11+\n\t\t\t\t// Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\t\t\t\treturn elem.isDisabled === disabled ||\n\n\t\t\t\t\t// Where there is no isDisabled, check manually\n\t\t\t\t\telem.isDisabled !== !disabled &&\n\t\t\t\t\t\tinDisabledFieldset( elem ) === disabled;\n\t\t\t}\n\n\t\t\treturn elem.disabled === disabled;\n\n\t\t// Try to winnow out elements that can't be disabled before trusting the disabled property.\n\t\t// Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n\t\t// even exist on them, let alone have a boolean value.\n\t\t} else if ( \"label\" in elem ) {\n\t\t\treturn elem.disabled === disabled;\n\t\t}\n\n\t\t// Remaining elements are neither :enabled nor :disabled\n\t\treturn false;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction( function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction( function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ ( j = matchIndexes[ i ] ) ] ) {\n\t\t\t\t\tseed[ j ] = !( matches[ j ] = seed[ j ] );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t} );\n}\n\n/**\n * Checks a node for validity as a jQuery selector context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [node] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nfunction setDocument( node ) {\n\tvar subWindow,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// Return early if doc is invalid or already selected\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Update global variables\n\tdocument = doc;\n\tdocumentElement = document.documentElement;\n\tdocumentIsHTML = !jQuery.isXMLDoc( document );\n\n\t// Support: iOS 7 only, IE 9 - 11+\n\t// Older browsers didn't support unprefixed `matches`.\n\tmatches = documentElement.matches ||\n\t\tdocumentElement.webkitMatchesSelector ||\n\t\tdocumentElement.msMatchesSelector;\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+\n\t// Accessing iframe documents after unload throws \"permission denied\" errors\n\t// (see trac-13936).\n\t// Limit the fix to IE & Edge Legacy; despite Edge 15+ implementing `matches`,\n\t// all IE 9+ and Edge Legacy versions implement `msMatchesSelector` as well.\n\tif ( documentElement.msMatchesSelector &&\n\n\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t// two documents; shallow comparisons work.\n\t\t// eslint-disable-next-line eqeqeq\n\t\tpreferredDoc != document &&\n\t\t( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {\n\n\t\t// Support: IE 9 - 11+, Edge 12 - 18+\n\t\tsubWindow.addEventListener( \"unload\", unloadHandler );\n\t}\n\n\t// Support: IE <10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don't pick up programmatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert( function( el ) {\n\t\tdocumentElement.appendChild( el ).id = jQuery.expando;\n\t\treturn !document.getElementsByName ||\n\t\t\t!document.getElementsByName( jQuery.expando ).length;\n\t} );\n\n\t// Support: IE 9 only\n\t// Check to see if it's possible to do matchesSelector\n\t// on a disconnected node.\n\tsupport.disconnectedMatch = assert( function( el ) {\n\t\treturn matches.call( el, \"*\" );\n\t} );\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+\n\t// IE/Edge don't support the :scope pseudo-class.\n\tsupport.scope = assert( function() {\n\t\treturn document.querySelectorAll( \":scope\" );\n\t} );\n\n\t// Support: Chrome 105 - 111 only, Safari 15.4 - 16.3 only\n\t// Make sure the `:has()` argument is parsed unforgivingly.\n\t// We include `*` in the test to detect buggy implementations that are\n\t// _selectively_ forgiving (specifically when the list includes at least\n\t// one valid selector).\n\t// Note that we treat complete lack of support for `:has()` as if it were\n\t// spec-compliant support, which is fine because use of `:has()` in such\n\t// environments will fail in the qSA path and fall back to jQuery traversal\n\t// anyway.\n\tsupport.cssHas = assert( function() {\n\t\ttry {\n\t\t\tdocument.querySelector( \":has(*,:jqfake)\" );\n\t\t\treturn false;\n\t\t} catch ( e ) {\n\t\t\treturn true;\n\t\t}\n\t} );\n\n\t// ID filter and find\n\tif ( support.getById ) {\n\t\tExpr.filter.ID = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute( \"id\" ) === attrId;\n\t\t\t};\n\t\t};\n\t\tExpr.find.ID = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar elem = context.getElementById( id );\n\t\t\t\treturn elem ? [ elem ] : [];\n\t\t\t}\n\t\t};\n\t} else {\n\t\tExpr.filter.ID =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\n\t\t\t\t\telem.getAttributeNode( \"id\" );\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\n\t\t// Support: IE 6 - 7 only\n\t\t// getElementById is not reliable as a find shortcut\n\t\tExpr.find.ID = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar node, i, elems,\n\t\t\t\t\telem = context.getElementById( id );\n\n\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t// Verify the id attribute\n\t\t\t\t\tnode = elem.getAttributeNode( \"id\" );\n\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fall back on getElementsByName\n\t\t\t\t\telems = context.getElementsByName( id );\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile ( ( elem = elems[ i++ ] ) ) {\n\t\t\t\t\t\tnode = elem.getAttributeNode( \"id\" );\n\t\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [];\n\t\t\t}\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find.TAG = function( tag, context ) {\n\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t// DocumentFragment nodes don't have gEBTN\n\t\t} else {\n\t\t\treturn context.querySelectorAll( tag );\n\t\t}\n\t};\n\n\t// Class\n\tExpr.find.CLASS = function( className, context ) {\n\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\trbuggyQSA = [];\n\n\t// Build QSA regex\n\t// Regex strategy adopted from Diego Perini\n\tassert( function( el ) {\n\n\t\tvar input;\n\n\t\tdocumentElement.appendChild( el ).innerHTML =\n\t\t\t\"<a id='\" + expando + \"' href='' disabled='disabled'></a>\" +\n\t\t\t\"<select id='\" + expando + \"-\\r\\\\' disabled='disabled'>\" +\n\t\t\t\"<option selected=''></option></select>\";\n\n\t\t// Support: iOS <=7 - 8 only\n\t\t// Boolean attributes and \"value\" are not treated correctly in some XML documents\n\t\tif ( !el.querySelectorAll( \"[selected]\" ).length ) {\n\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n\t\t}\n\n\t\t// Support: iOS <=7 - 8 only\n\t\tif ( !el.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n\t\t\trbuggyQSA.push( \"~=\" );\n\t\t}\n\n\t\t// Support: iOS 8 only\n\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t// In-page `selector#id sibling-combinator selector` fails\n\t\tif ( !el.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n\t\t\trbuggyQSA.push( \".#.+[+~]\" );\n\t\t}\n\n\t\t// Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+\n\t\t// In some of the document kinds, these selectors wouldn't work natively.\n\t\t// This is probably OK but for backwards compatibility we want to maintain\n\t\t// handling them through jQuery traversal in jQuery 3.x.\n\t\tif ( !el.querySelectorAll( \":checked\" ).length ) {\n\t\t\trbuggyQSA.push( \":checked\" );\n\t\t}\n\n\t\t// Support: Windows 8 Native Apps\n\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\tinput = document.createElement( \"input\" );\n\t\tinput.setAttribute( \"type\", \"hidden\" );\n\t\tel.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n\t\t// Support: IE 9 - 11+\n\t\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\t// Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+\n\t\t// In some of the document kinds, these selectors wouldn't work natively.\n\t\t// This is probably OK but for backwards compatibility we want to maintain\n\t\t// handling them through jQuery traversal in jQuery 3.x.\n\t\tdocumentElement.appendChild( el ).disabled = true;\n\t\tif ( el.querySelectorAll( \":disabled\" ).length !== 2 ) {\n\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t}\n\n\t\t// Support: IE 11+, Edge 15 - 18+\n\t\t// IE 11/Edge don't find elements on a `[name='']` query in some cases.\n\t\t// Adding a temporary attribute to the document before the selection works\n\t\t// around the issue.\n\t\t// Interestingly, IE 10 & older don't seem to have the issue.\n\t\tinput = document.createElement( \"input\" );\n\t\tinput.setAttribute( \"name\", \"\" );\n\t\tel.appendChild( input );\n\t\tif ( !el.querySelectorAll( \"[name='']\" ).length ) {\n\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*name\" + whitespace + \"*=\" +\n\t\t\t\twhitespace + \"*(?:''|\\\"\\\")\" );\n\t\t}\n\t} );\n\n\tif ( !support.cssHas ) {\n\n\t\t// Support: Chrome 105 - 110+, Safari 15.4 - 16.3+\n\t\t// Our regular `try-catch` mechanism fails to detect natively-unsupported\n\t\t// pseudo-classes inside `:has()` (such as `:has(:contains(\"Foo\"))`)\n\t\t// in browsers that parse the `:has()` argument as a forgiving selector list.\n\t\t// https://drafts.csswg.org/selectors/#relational now requires the argument\n\t\t// to be parsed unforgivingly, but browsers have not yet fully adjusted.\n\t\trbuggyQSA.push( \":has\" );\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( \"|\" ) );\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = function( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t// two documents; shallow comparisons work.\n\t\t// eslint-disable-next-line eqeqeq\n\t\tcompare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\tif ( a === document || a.ownerDocument == preferredDoc &&\n\t\t\t\tfind.contains( preferredDoc, a ) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\tif ( b === document || b.ownerDocument == preferredDoc &&\n\t\t\t\tfind.contains( preferredDoc, b ) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t};\n\n\treturn document;\n}\n\nfind.matches = function( expr, elements ) {\n\treturn find( expr, null, null, elements );\n};\n\nfind.matchesSelector = function( elem, expr ) {\n\tsetDocument( elem );\n\n\tif ( documentIsHTML &&\n\t\t!nonnativeSelectorCache[ expr + \" \" ] &&\n\t\t( !rbuggyQSA || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t\t// fragment in IE 9\n\t\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch ( e ) {\n\t\t\tnonnativeSelectorCache( expr, true );\n\t\t}\n\t}\n\n\treturn find( expr, document, null, [ elem ] ).length > 0;\n};\n\nfind.contains = function( context, elem ) {\n\n\t// Set document vars if needed\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( ( context.ownerDocument || context ) != document ) {\n\t\tsetDocument( context );\n\t}\n\treturn jQuery.contains( context, elem );\n};\n\n\nfind.attr = function( elem, name ) {\n\n\t// Set document vars if needed\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( ( elem.ownerDocument || elem ) != document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\n\t\t// Don't get fooled by Object.prototype properties (see trac-13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\tif ( val !== undefined ) {\n\t\treturn val;\n\t}\n\n\treturn elem.getAttribute( name );\n};\n\nfind.error = function( msg ) {\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\njQuery.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\t//\n\t// Support: Android <=4.0+\n\t// Testing for detecting duplicates is unpredictable so instead assume we can't\n\t// depend on duplicate detection in all browsers without a stable sort.\n\thasDuplicate = !support.sortStable;\n\tsortInput = !support.sortStable && slice.call( results, 0 );\n\tsort.call( results, sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( ( elem = results[ i++ ] ) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tsplice.call( results, duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\njQuery.fn.uniqueSort = function() {\n\treturn this.pushStack( jQuery.uniqueSort( slice.apply( this ) ) );\n};\n\nExpr = jQuery.expr = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\" \": { dir: \"parentNode\" },\n\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\"~\": { dir: \"previousSibling\" }\n\t},\n\n\tpreFilter: {\n\t\tATTR: function( match ) {\n\t\t\tmatch[ 1 ] = match[ 1 ].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[ 3 ] = ( match[ 3 ] || match[ 4 ] || match[ 5 ] || \"\" )\n\t\t\t\t.replace( runescape, funescape );\n\n\t\t\tif ( match[ 2 ] === \"~=\" ) {\n\t\t\t\tmatch[ 3 ] = \" \" + match[ 3 ] + \" \";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\tCHILD: function( match ) {\n\n\t\t\t/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[ 1 ] = match[ 1 ].toLowerCase();\n\n\t\t\tif ( match[ 1 ].slice( 0, 3 ) === \"nth\" ) {\n\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[ 3 ] ) {\n\t\t\t\t\tfind.error( match[ 0 ] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[ 4 ] = +( match[ 4 ] ?\n\t\t\t\t\tmatch[ 5 ] + ( match[ 6 ] || 1 ) :\n\t\t\t\t\t2 * ( match[ 3 ] === \"even\" || match[ 3 ] === \"odd\" )\n\t\t\t\t);\n\t\t\t\tmatch[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === \"odd\" );\n\n\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[ 3 ] ) {\n\t\t\t\tfind.error( match[ 0 ] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\tPSEUDO: function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[ 6 ] && match[ 2 ];\n\n\t\t\tif ( matchExpr.CHILD.test( match[ 0 ] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[ 3 ] ) {\n\t\t\t\tmatch[ 2 ] = match[ 4 ] || match[ 5 ] || \"\";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t( excess = tokenize( unquoted, true ) ) &&\n\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t( excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length ) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[ 0 ] = match[ 0 ].slice( 0, excess );\n\t\t\t\tmatch[ 2 ] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\tTAG: function( nodeNameSelector ) {\n\t\t\tvar expectedNodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === \"*\" ?\n\t\t\t\tfunction() {\n\t\t\t\t\treturn true;\n\t\t\t\t} :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn nodeName( elem, expectedNodeName );\n\t\t\t\t};\n\t\t},\n\n\t\tCLASS: function( className ) {\n\t\t\tvar pattern = classCache[ className + \" \" ];\n\n\t\t\treturn pattern ||\n\t\t\t\t( pattern = new RegExp( \"(^|\" + whitespace + \")\" + className +\n\t\t\t\t\t\"(\" + whitespace + \"|$)\" ) ) &&\n\t\t\t\tclassCache( className, function( elem ) {\n\t\t\t\t\treturn pattern.test(\n\t\t\t\t\t\ttypeof elem.className === \"string\" && elem.className ||\n\t\t\t\t\t\t\ttypeof elem.getAttribute !== \"undefined\" &&\n\t\t\t\t\t\t\t\telem.getAttribute( \"class\" ) ||\n\t\t\t\t\t\t\t\"\"\n\t\t\t\t\t);\n\t\t\t\t} );\n\t\t},\n\n\t\tATTR: function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = find.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += \"\";\n\n\t\t\t\tif ( operator === \"=\" ) {\n\t\t\t\t\treturn result === check;\n\t\t\t\t}\n\t\t\t\tif ( operator === \"!=\" ) {\n\t\t\t\t\treturn result !== check;\n\t\t\t\t}\n\t\t\t\tif ( operator === \"^=\" ) {\n\t\t\t\t\treturn check && result.indexOf( check ) === 0;\n\t\t\t\t}\n\t\t\t\tif ( operator === \"*=\" ) {\n\t\t\t\t\treturn check && result.indexOf( check ) > -1;\n\t\t\t\t}\n\t\t\t\tif ( operator === \"$=\" ) {\n\t\t\t\t\treturn check && result.slice( -check.length ) === check;\n\t\t\t\t}\n\t\t\t\tif ( operator === \"~=\" ) {\n\t\t\t\t\treturn ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" )\n\t\t\t\t\t\t.indexOf( check ) > -1;\n\t\t\t\t}\n\t\t\t\tif ( operator === \"|=\" ) {\n\t\t\t\t\treturn result === check || result.slice( 0, check.length + 1 ) === check + \"-\";\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t};\n\t\t},\n\n\t\tCHILD: function( type, what, _argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n\t\t\t\tofType = what === \"of-type\";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, _context, xml ) {\n\t\t\t\t\tvar cache, outerCache, node, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType,\n\t\t\t\t\t\tdiff = false;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( ( node = node[ dir ] ) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnodeName( node, name ) :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\n\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\t\t\t\t\t\t\touterCache = parent[ expando ] || ( parent[ expando ] = {} );\n\t\t\t\t\t\t\tcache = outerCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( ( node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\touterCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\touterCache = elem[ expando ] || ( elem[ expando ] = {} );\n\t\t\t\t\t\t\t\tcache = outerCache[ type ] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\tif ( diff === false ) {\n\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile ( ( node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t\t( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnodeName( node, name ) :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\n\t\t\t\t\t\t\t\t\t\t++diff ) {\n\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t( node[ expando ] = {} );\n\t\t\t\t\t\t\t\t\t\t\touterCache[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\tPSEUDO: function( pseudo, argument ) {\n\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// https://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tfind.error( \"unsupported pseudo: \" + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as jQuery does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction( function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf.call( seed, matched[ i ] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[ i ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t} ) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\n\t\t// Potentially complex pseudos\n\t\tnot: markFunction( function( selector ) {\n\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrimCSS, \"$1\" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction( function( seed, matches, _context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( ( elem = unmatched[ i ] ) ) {\n\t\t\t\t\t\t\tseed[ i ] = !( matches[ i ] = elem );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} ) :\n\t\t\t\tfunction( elem, _context, xml ) {\n\t\t\t\t\tinput[ 0 ] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\n\t\t\t\t\t// Don't keep the element\n\t\t\t\t\t// (see https://github.com/jquery/sizzle/issues/299)\n\t\t\t\t\tinput[ 0 ] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t} ),\n\n\t\thas: markFunction( function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn find( selector, elem ).length > 0;\n\t\t\t};\n\t\t} ),\n\n\t\tcontains: markFunction( function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || jQuery.text( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t} ),\n\n\t\t// \"Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element's language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name.\"\n\t\t// https://www.w3.org/TR/selectors/#lang-pseudo\n\t\tlang: markFunction( function( lang ) {\n\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test( lang || \"\" ) ) {\n\t\t\t\tfind.error( \"unsupported lang: \" + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( ( elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute( \"xml:lang\" ) || elem.getAttribute( \"lang\" ) ) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t} ),\n\n\t\t// Miscellaneous\n\t\ttarget: function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\troot: function( elem ) {\n\t\t\treturn elem === documentElement;\n\t\t},\n\n\t\tfocus: function( elem ) {\n\t\t\treturn elem === safeActiveElement() &&\n\t\t\t\tdocument.hasFocus() &&\n\t\t\t\t!!( elem.type || elem.href || ~elem.tabIndex );\n\t\t},\n\n\t\t// Boolean properties\n\t\tenabled: createDisabledPseudo( false ),\n\t\tdisabled: createDisabledPseudo( true ),\n\n\t\tchecked: function( elem ) {\n\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// https://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\treturn ( nodeName( elem, \"input\" ) && !!elem.checked ) ||\n\t\t\t\t( nodeName( elem, \"option\" ) && !!elem.selected );\n\t\t},\n\n\t\tselected: function( elem ) {\n\n\t\t\t// Support: IE <=11+\n\t\t\t// Accessing the selectedIndex property\n\t\t\t// forces the browser to treat the default option as\n\t\t\t// selected when in an optgroup.\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\t// eslint-disable-next-line no-unused-expressions\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\tempty: function( elem ) {\n\n\t\t\t// https://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\tparent: function( elem ) {\n\t\t\treturn !Expr.pseudos.empty( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\theader: function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\tinput: function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\tbutton: function( elem ) {\n\t\t\treturn nodeName( elem, \"input\" ) && elem.type === \"button\" ||\n\t\t\t\tnodeName( elem, \"button\" );\n\t\t},\n\n\t\ttext: function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn nodeName( elem, \"input\" ) && elem.type === \"text\" &&\n\n\t\t\t\t// Support: IE <10 only\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear\n\t\t\t\t// with elem.type === \"text\"\n\t\t\t\t( ( attr = elem.getAttribute( \"type\" ) ) == null ||\n\t\t\t\t\tattr.toLowerCase() === \"text\" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\tfirst: createPositionalPseudo( function() {\n\t\t\treturn [ 0 ];\n\t\t} ),\n\n\t\tlast: createPositionalPseudo( function( _matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t} ),\n\n\t\teq: createPositionalPseudo( function( _matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t} ),\n\n\t\teven: createPositionalPseudo( function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\todd: createPositionalPseudo( function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\tlt: createPositionalPseudo( function( matchIndexes, length, argument ) {\n\t\t\tvar i;\n\n\t\t\tif ( argument < 0 ) {\n\t\t\t\ti = argument + length;\n\t\t\t} else if ( argument > length ) {\n\t\t\t\ti = length;\n\t\t\t} else {\n\t\t\t\ti = argument;\n\t\t\t}\n\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\tgt: createPositionalPseudo( function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} )\n\t}\n};\n\nExpr.pseudos.nth = Expr.pseudos.eq;\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\nfunction tokenize( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + \" \" ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || ( match = rcomma.exec( soFar ) ) ) {\n\t\t\tif ( match ) {\n\n\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[ 0 ].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( ( tokens = [] ) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( ( match = rleadingCombinator.exec( soFar ) ) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push( {\n\t\t\t\tvalue: matched,\n\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[ 0 ].replace( rtrimCSS, \" \" )\n\t\t\t} );\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||\n\t\t\t\t( match = preFilters[ type ]( match ) ) ) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push( {\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t} );\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we're just parsing\n\t// Otherwise, throw an error or return tokens\n\tif ( parseOnly ) {\n\t\treturn soFar.length;\n\t}\n\n\treturn soFar ?\n\t\tfind.error( selector ) :\n\n\t\t// Cache the tokens\n\t\ttokenCache( selector, groups ).slice( 0 );\n}\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = \"\";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[ i ].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tskip = combinator.next,\n\t\tkey = skip || dir,\n\t\tcheckNonElements = base && key === \"parentNode\",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || ( elem[ expando ] = {} );\n\n\t\t\t\t\t\tif ( skip && nodeName( elem, skip ) ) {\n\t\t\t\t\t\t\telem = elem[ dir ] || elem;\n\t\t\t\t\t\t} else if ( ( oldCache = outerCache[ key ] ) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn ( newCache[ 2 ] = oldCache[ 2 ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\touterCache[ key ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[ i ]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[ 0 ];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tfind( selector, contexts[ i ], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( ( elem = unmatched[ i ] ) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction( function( seed, results, context, xml ) {\n\t\tvar temp, i, elem, matcherOut,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed ||\n\t\t\t\tmultipleContexts( selector || \"*\",\n\t\t\t\t\tcontext.nodeType ? [ context ] : context, [] ),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems;\n\n\t\tif ( matcher ) {\n\n\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter\n\t\t\t// or preexisting results,\n\t\t\tmatcherOut = postFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t[] :\n\n\t\t\t\t// ...otherwise use results directly\n\t\t\t\tresults;\n\n\t\t\t// Find primary matches\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t} else {\n\t\t\tmatcherOut = matcherIn;\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( ( elem = temp[ i ] ) ) {\n\t\t\t\t\tmatcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( ( elem = matcherOut[ i ] ) ) {\n\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( ( matcherIn[ i ] = elem ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, ( matcherOut = [] ), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( ( elem = matcherOut[ i ] ) &&\n\t\t\t\t\t\t( temp = postFinder ? indexOf.call( seed, elem ) : preMap[ i ] ) > -1 ) {\n\n\t\t\t\t\t\tseed[ temp ] = !( results[ temp ] = elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t} );\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[ 0 ].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[ \" \" ],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf.call( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\tvar ret = ( !leadingRelative && ( xml || context != outermostContext ) ) || (\n\t\t\t\t( checkContext = context ).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\n\t\t\t// Avoid hanging onto element\n\t\t\t// (see https://github.com/jquery/sizzle/issues/299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {\n\t\t\tmatchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[ j ].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\n\t\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\t\ttokens.slice( 0, i - 1 )\n\t\t\t\t\t\t\t.concat( { value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" } )\n\t\t\t\t\t).replace( rtrimCSS, \"$1\" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = \"0\",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find.TAG( \"*\", outermost ),\n\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\n\t\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t\t// two documents; shallow comparisons work.\n\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\toutermostContext = context == document || context || outermost;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Support: iOS <=7 - 9 only\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching\n\t\t\t// elements by id. (see trac-14142)\n\t\t\tfor ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\n\t\t\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t\t\t// two documents; shallow comparisons work.\n\t\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\t\tif ( !context && elem.ownerDocument != document ) {\n\t\t\t\t\t\tsetDocument( elem );\n\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t}\n\t\t\t\t\twhile ( ( matcher = elementMatchers[ j++ ] ) ) {\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml ) ) {\n\t\t\t\t\t\t\tpush.call( results, elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( ( elem = !matcher && elem ) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t// makes the latter nonnegative.\n\t\t\tmatchedCount += i;\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n\t\t\t// no element matchers and no seed.\n\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n\t\t\t// numerically zero.\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( ( matcher = setMatchers[ j++ ] ) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !( unmatched[ i ] || setMatched[ i ] ) ) {\n\t\t\t\t\t\t\t\tsetMatched[ i ] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tjQuery.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\nfunction compile( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + \" \" ];\n\n\tif ( !cached ) {\n\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[ i ] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache( selector,\n\t\t\tmatcherFromGroupMatchers( elementMatchers, setMatchers ) );\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n}\n\n/**\n * A low-level selection function that works with jQuery's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with jQuery selector compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nfunction select( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === \"function\" && selector,\n\t\tmatch = !seed && tokenize( ( selector = compiled.selector || selector ) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is only one selector in the list and no seed\n\t// (the latter of which guarantees us context)\n\tif ( match.length === 1 ) {\n\n\t\t// Reduce context if the leading compound selector is an ID\n\t\ttokens = match[ 0 ] = match[ 0 ].slice( 0 );\n\t\tif ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === \"ID\" &&\n\t\t\t\tcontext.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {\n\n\t\t\tcontext = ( Expr.find.ID(\n\t\t\t\ttoken.matches[ 0 ].replace( runescape, funescape ),\n\t\t\t\tcontext\n\t\t\t) || [] )[ 0 ];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr.needsContext.test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[ i ];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ ( type = token.type ) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( ( find = Expr.find[ type ] ) ) {\n\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( ( seed = find(\n\t\t\t\t\ttoken.matches[ 0 ].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[ 0 ].type ) &&\n\t\t\t\t\t\ttestContext( context.parentNode ) || context\n\t\t\t\t) ) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n}\n\n// One-time assignments\n\n// Support: Android <=4.0 - 4.1+\n// Sort stability\nsupport.sortStable = expando.split( \"\" ).sort( sortOrder ).join( \"\" ) === expando;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Android <=4.0 - 4.1+\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert( function( el ) {\n\n\t// Should return 1, but returns 4 (following)\n\treturn el.compareDocumentPosition( document.createElement( \"fieldset\" ) ) & 1;\n} );\n\njQuery.find = find;\n\n// Deprecated\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\njQuery.unique = jQuery.uniqueSort;\n\n// These have always been private, but they used to be documented as part of\n// Sizzle so let's maintain them for now for backwards compatibility purposes.\nfind.compile = compile;\nfind.select = select;\nfind.setDocument = setDocument;\nfind.tokenize = tokenize;\n\nfind.escape = jQuery.escapeSelector;\nfind.getText = jQuery.text;\nfind.isXML = jQuery.isXMLDoc;\nfind.selectors = jQuery.expr;\nfind.support = jQuery.support;\nfind.uniqueSort = jQuery.uniqueSort;\n\n\t/* eslint-enable */\n\n} )();\n\n\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n\t\tif ( elem.nodeType === 1 ) {\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatched.push( elem );\n\t\t}\n\t}\n\treturn matched;\n};\n\n\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );\n\t\t}\n\t}\n\n\treturn matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\nvar rsingleTag = ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n\n\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\t}\n\n\t// Single element\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\t}\n\n\t// Arraylike of elements (jQuery, arguments, Array)\n\tif ( typeof qualifier !== \"string\" ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t\t} );\n\t}\n\n\t// Filtered directly for both simple and complex selectors\n\treturn jQuery.filter( qualifier, elements, not );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n\t}\n\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\treturn elem.nodeType === 1;\n\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (trac-9521)\n\t// Strict HTML recognition (trac-11290: must start with <)\n\t// Shortcut simple #id case for speed\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n\tinit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Method init() accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === \"string\" ) {\n\t\t\tif ( selector[ 0 ] === \"<\" &&\n\t\t\t\tselector[ selector.length - 1 ] === \">\" &&\n\t\t\t\tselector.length >= 3 ) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[ 1 ] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[ 1 ],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( isFunction( this[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\n\n\t\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis[ 0 ] = elem;\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || root ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis[ 0 ] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( isFunction( selector ) ) {\n\t\t\treturn root.ready !== undefined ?\n\t\t\t\troot.ready( selector ) :\n\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.fn.extend( {\n\thas: function( target ) {\n\t\tvar targets = jQuery( target, this ),\n\t\t\tl = targets.length;\n\n\t\treturn this.filter( function() {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\ttargets = typeof selectors !== \"string\" && jQuery( selectors );\n\n\t\t// Positional selectors never match, since there's no _selection_ context\n\t\tif ( !rneedsContext.test( selectors ) ) {\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n\t\t\t\t\t// Always skip document fragments\n\t\t\t\t\tif ( cur.nodeType < 11 && ( targets ?\n\t\t\t\t\t\ttargets.index( cur ) > -1 :\n\n\t\t\t\t\t\t// Don't pass non-elements to jQuery#find\n\t\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n\t\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within the set\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// Index in selector\n\t\tif ( typeof elem === \"string\" ) {\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn indexOf.call( this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[ 0 ] : elem\n\t\t);\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.uniqueSort(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\n\t\t);\n\t}\n} );\n\nfunction sibling( cur, dir ) {\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\njQuery.each( {\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n\t\tif ( elem.contentDocument != null &&\n\n\t\t\t// Support: IE 11+\n\t\t\t// <object> elements with no `data` attribute has an object\n\t\t\t// `contentDocument` with a `null` prototype.\n\t\t\tgetProto( elem.contentDocument ) ) {\n\n\t\t\treturn elem.contentDocument;\n\t\t}\n\n\t\t// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n\t\t// Treat the template element as a regular one in browsers that\n\t\t// don't support it.\n\t\tif ( nodeName( elem, \"template\" ) ) {\n\t\t\telem = elem.content || elem;\n\t\t}\n\n\t\treturn jQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar matched = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === \"string\" ) {\n\t\t\tmatched = jQuery.filter( selector, matched );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tjQuery.uniqueSort( matched );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tmatched.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched );\n\t};\n} );\nvar rnothtmlwhite = ( /[^\\x20\\t\\r\\n\\f]+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n\tvar object = {};\n\tjQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t} );\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\tcreateOptions( options ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\t\t// Fire callbacks\n\t\tfire = function() {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = locked || options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile ( ++firingIndex < list.length ) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n\t\t\t\t\t\toptions.stopOnFalse ) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif ( !options.memory ) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif ( locked ) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif ( memory ) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push( memory );\n\t\t\t\t\t}\n\n\t\t\t\t\t( function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tif ( isFunction( arg ) ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && toType( arg ) !== \"string\" ) {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} )( arguments );\n\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\tlist.splice( index, 1 );\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ?\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n\t\t\t\t\tlist.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif ( !memory && !firing ) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function() {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( !locked ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tqueue.push( args );\n\t\t\t\t\tif ( !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\nfunction Identity( v ) {\n\treturn v;\n}\nfunction Thrower( ex ) {\n\tthrow ex;\n}\n\nfunction adoptValue( value, resolve, reject, noValue ) {\n\tvar method;\n\n\ttry {\n\n\t\t// Check for promise aspect first to privilege synchronous behavior\n\t\tif ( value && isFunction( ( method = value.promise ) ) ) {\n\t\t\tmethod.call( value ).done( resolve ).fail( reject );\n\n\t\t// Other thenables\n\t\t} else if ( value && isFunction( ( method = value.then ) ) ) {\n\t\t\tmethod.call( value, resolve, reject );\n\n\t\t// Other non-thenables\n\t\t} else {\n\n\t\t\t// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n\t\t\t// * false: [ value ].slice( 0 ) => resolve( value )\n\t\t\t// * true: [ value ].slice( 1 ) => resolve()\n\t\t\tresolve.apply( undefined, [ value ].slice( noValue ) );\n\t\t}\n\n\t// For Promises/A+, convert exceptions into rejections\n\t// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n\t// Deferred#then to conditionally suppress rejection.\n\t} catch ( value ) {\n\n\t\t// Support: Android 4.0 only\n\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\treject.apply( undefined, [ value ] );\n\t}\n}\n\njQuery.extend( {\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\n\t\t\t\t// action, add listener, callbacks,\n\t\t\t\t// ... .then handlers, argument index, [final state]\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"memory\" ), 2 ],\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 0, \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 1, \"rejected\" ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\t\"catch\": function( fn ) {\n\t\t\t\t\treturn promise.then( null, fn );\n\t\t\t\t},\n\n\t\t\t\t// Keep pipe for back-compat\n\t\t\t\tpipe: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( _i, tuple ) {\n\n\t\t\t\t\t\t\t// Map tuples (progress, done, fail) to arguments (done, fail, progress)\n\t\t\t\t\t\t\tvar fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];\n\n\t\t\t\t\t\t\t// deferred.progress(function() { bind to newDefer or newDefer.notify })\n\t\t\t\t\t\t\t// deferred.done(function() { bind to newDefer or newDefer.resolve })\n\t\t\t\t\t\t\t// deferred.fail(function() { bind to newDefer or newDefer.reject })\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\n\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\t\t\t\tthen: function( onFulfilled, onRejected, onProgress ) {\n\t\t\t\t\tvar maxDepth = 0;\n\t\t\t\t\tfunction resolve( depth, deferred, handler, special ) {\n\t\t\t\t\t\treturn function() {\n\t\t\t\t\t\t\tvar that = this,\n\t\t\t\t\t\t\t\targs = arguments,\n\t\t\t\t\t\t\t\tmightThrow = function() {\n\t\t\t\t\t\t\t\t\tvar returned, then;\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.3\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-59\n\t\t\t\t\t\t\t\t\t// Ignore double-resolution attempts\n\t\t\t\t\t\t\t\t\tif ( depth < maxDepth ) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturned = handler.apply( that, args );\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.1\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-48\n\t\t\t\t\t\t\t\t\tif ( returned === deferred.promise() ) {\n\t\t\t\t\t\t\t\t\t\tthrow new TypeError( \"Thenable self-resolution\" );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ sections 2.3.3.1, 3.5\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-54\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-75\n\t\t\t\t\t\t\t\t\t// Retrieve `then` only once\n\t\t\t\t\t\t\t\t\tthen = returned &&\n\n\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.4\n\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-64\n\t\t\t\t\t\t\t\t\t\t// Only check objects and functions for thenability\n\t\t\t\t\t\t\t\t\t\t( typeof returned === \"object\" ||\n\t\t\t\t\t\t\t\t\t\t\ttypeof returned === \"function\" ) &&\n\t\t\t\t\t\t\t\t\t\treturned.then;\n\n\t\t\t\t\t\t\t\t\t// Handle a returned thenable\n\t\t\t\t\t\t\t\t\tif ( isFunction( then ) ) {\n\n\t\t\t\t\t\t\t\t\t\t// Special processors (notify) just wait for resolution\n\t\t\t\t\t\t\t\t\t\tif ( special ) {\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special )\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t// Normal processors (resolve) also hook into progress\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\t// ...and disregard older resolution values\n\t\t\t\t\t\t\t\t\t\t\tmaxDepth++;\n\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeferred.notifyWith )\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Handle all other returned values\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\tif ( handler !== Identity ) {\n\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\targs = [ returned ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// Process the value(s)\n\t\t\t\t\t\t\t\t\t\t// Default process is resolve\n\t\t\t\t\t\t\t\t\t\t( special || deferred.resolveWith )( that, args );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t\t// Only normal processors (resolve) catch and reject exceptions\n\t\t\t\t\t\t\t\tprocess = special ?\n\t\t\t\t\t\t\t\t\tmightThrow :\n\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tmightThrow();\n\t\t\t\t\t\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\t\t\t\t\t\tif ( jQuery.Deferred.exceptionHook ) {\n\t\t\t\t\t\t\t\t\t\t\t\tjQuery.Deferred.exceptionHook( e,\n\t\t\t\t\t\t\t\t\t\t\t\t\tprocess.error );\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.4.1\n\t\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-61\n\t\t\t\t\t\t\t\t\t\t\t// Ignore post-resolution exceptions\n\t\t\t\t\t\t\t\t\t\t\tif ( depth + 1 >= maxDepth ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\t\t\tif ( handler !== Thrower ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\t\t\targs = [ e ];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tdeferred.rejectWith( that, args );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.1\n\t\t\t\t\t\t\t// https://promisesaplus.com/#point-57\n\t\t\t\t\t\t\t// Re-resolve promises immediately to dodge false rejection from\n\t\t\t\t\t\t\t// subsequent errors\n\t\t\t\t\t\t\tif ( depth ) {\n\t\t\t\t\t\t\t\tprocess();\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// Call an optional hook to record the error, in case of exception\n\t\t\t\t\t\t\t\t// since it's otherwise lost when execution goes async\n\t\t\t\t\t\t\t\tif ( jQuery.Deferred.getErrorHook ) {\n\t\t\t\t\t\t\t\t\tprocess.error = jQuery.Deferred.getErrorHook();\n\n\t\t\t\t\t\t\t\t// The deprecated alias of the above. While the name suggests\n\t\t\t\t\t\t\t\t// returning the stack, not an error instance, jQuery just passes\n\t\t\t\t\t\t\t\t// it directly to `console.warn` so both will work; an instance\n\t\t\t\t\t\t\t\t// just better cooperates with source maps.\n\t\t\t\t\t\t\t\t} else if ( jQuery.Deferred.getStackHook ) {\n\t\t\t\t\t\t\t\t\tprocess.error = jQuery.Deferred.getStackHook();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twindow.setTimeout( process );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\n\t\t\t\t\t\t// progress_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 0 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onProgress ) ?\n\t\t\t\t\t\t\t\t\tonProgress :\n\t\t\t\t\t\t\t\t\tIdentity,\n\t\t\t\t\t\t\t\tnewDefer.notifyWith\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// fulfilled_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 1 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onFulfilled ) ?\n\t\t\t\t\t\t\t\t\tonFulfilled :\n\t\t\t\t\t\t\t\t\tIdentity\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// rejected_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 2 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onRejected ) ?\n\t\t\t\t\t\t\t\t\tonRejected :\n\t\t\t\t\t\t\t\t\tThrower\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 5 ];\n\n\t\t\t// promise.progress = list.add\n\t\t\t// promise.done = list.add\n\t\t\t// promise.fail = list.add\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add(\n\t\t\t\t\tfunction() {\n\n\t\t\t\t\t\t// state = \"resolved\" (i.e., fulfilled)\n\t\t\t\t\t\t// state = \"rejected\"\n\t\t\t\t\t\tstate = stateString;\n\t\t\t\t\t},\n\n\t\t\t\t\t// rejected_callbacks.disable\n\t\t\t\t\t// fulfilled_callbacks.disable\n\t\t\t\t\ttuples[ 3 - i ][ 2 ].disable,\n\n\t\t\t\t\t// rejected_handlers.disable\n\t\t\t\t\t// fulfilled_handlers.disable\n\t\t\t\t\ttuples[ 3 - i ][ 3 ].disable,\n\n\t\t\t\t\t// progress_callbacks.lock\n\t\t\t\t\ttuples[ 0 ][ 2 ].lock,\n\n\t\t\t\t\t// progress_handlers.lock\n\t\t\t\t\ttuples[ 0 ][ 3 ].lock\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// progress_handlers.fire\n\t\t\t// fulfilled_handlers.fire\n\t\t\t// rejected_handlers.fire\n\t\t\tlist.add( tuple[ 3 ].fire );\n\n\t\t\t// deferred.notify = function() { deferred.notifyWith(...) }\n\t\t\t// deferred.resolve = function() { deferred.resolveWith(...) }\n\t\t\t// deferred.reject = function() { deferred.rejectWith(...) }\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\n\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? undefined : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\t// deferred.notifyWith = list.fireWith\n\t\t\t// deferred.resolveWith = list.fireWith\n\t\t\t// deferred.rejectWith = list.fireWith\n\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\n\t\t} );\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( singleValue ) {\n\t\tvar\n\n\t\t\t// count of uncompleted subordinates\n\t\t\tremaining = arguments.length,\n\n\t\t\t// count of unprocessed arguments\n\t\t\ti = remaining,\n\n\t\t\t// subordinate fulfillment data\n\t\t\tresolveContexts = Array( i ),\n\t\t\tresolveValues = slice.call( arguments ),\n\n\t\t\t// the primary Deferred\n\t\t\tprimary = jQuery.Deferred(),\n\n\t\t\t// subordinate callback factory\n\t\t\tupdateFunc = function( i ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tresolveContexts[ i ] = this;\n\t\t\t\t\tresolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( !( --remaining ) ) {\n\t\t\t\t\t\tprimary.resolveWith( resolveContexts, resolveValues );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t// Single- and empty arguments are adopted like Promise.resolve\n\t\tif ( remaining <= 1 ) {\n\t\t\tadoptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,\n\t\t\t\t!remaining );\n\n\t\t\t// Use .then() to unwrap secondary thenables (cf. gh-3000)\n\t\t\tif ( primary.state() === \"pending\" ||\n\t\t\t\tisFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {\n\n\t\t\t\treturn primary.then();\n\t\t\t}\n\t\t}\n\n\t\t// Multiple arguments are aggregated like Promise.all array elements\n\t\twhile ( i-- ) {\n\t\t\tadoptValue( resolveValues[ i ], updateFunc( i ), primary.reject );\n\t\t}\n\n\t\treturn primary.promise();\n\t}\n} );\n\n\n// These usually indicate a programmer mistake during development,\n// warn about them ASAP rather than swallowing them by default.\nvar rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\n// If `jQuery.Deferred.getErrorHook` is defined, `asyncError` is an error\n// captured before the async barrier to get the original error cause\n// which may otherwise be hidden.\njQuery.Deferred.exceptionHook = function( error, asyncError ) {\n\n\t// Support: IE 8 - 9 only\n\t// Console exists when dev tools are open, which can happen at any time\n\tif ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {\n\t\twindow.console.warn( \"jQuery.Deferred exception: \" + error.message,\n\t\t\terror.stack, asyncError );\n\t}\n};\n\n\n\n\njQuery.readyException = function( error ) {\n\twindow.setTimeout( function() {\n\t\tthrow error;\n\t} );\n};\n\n\n\n\n// The deferred used on DOM ready\nvar readyList = jQuery.Deferred();\n\njQuery.fn.ready = function( fn ) {\n\n\treadyList\n\t\t.then( fn )\n\n\t\t// Wrap jQuery.readyException in a function so that the lookup\n\t\t// happens at the time of error handling instead of callback\n\t\t// registration.\n\t\t.catch( function( error ) {\n\t\t\tjQuery.readyException( error );\n\t\t} );\n\n\treturn this;\n};\n\njQuery.extend( {\n\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See trac-6781\n\treadyWait: 1,\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\t}\n} );\n\njQuery.ready.then = readyList.then;\n\n// The ready event handler and self cleanup method\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\n\twindow.removeEventListener( \"load\", completed );\n\tjQuery.ready();\n}\n\n// Catch cases where $(document).ready() is called\n// after the browser event has already occurred.\n// Support: IE <=9 - 10 only\n// Older IE sometimes signals \"interactive\" too soon\nif ( document.readyState === \"complete\" ||\n\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n\n\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\twindow.setTimeout( jQuery.ready );\n\n} else {\n\n\t// Use the handy event callback\n\tdocument.addEventListener( \"DOMContentLoaded\", completed );\n\n\t// A fallback to window.onload, that will always work\n\twindow.addEventListener( \"load\", completed );\n}\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlen = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( toType( key ) === \"object\" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, _key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\tfn(\n\t\t\t\t\telems[ i ], key, raw ?\n\t\t\t\t\t\tvalue :\n\t\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( chainable ) {\n\t\treturn elems;\n\t}\n\n\t// Gets\n\tif ( bulk ) {\n\t\treturn fn.call( elems );\n\t}\n\n\treturn len ? fn( elems[ 0 ], key ) : emptyGet;\n};\n\n\n// Matches dashed string for camelizing\nvar rmsPrefix = /^-ms-/,\n\trdashAlpha = /-([a-z])/g;\n\n// Used by camelCase as callback to replace()\nfunction fcamelCase( _all, letter ) {\n\treturn letter.toUpperCase();\n}\n\n// Convert dashed to camelCase; used by the css and data modules\n// Support: IE <=9 - 11, Edge 12 - 15\n// Microsoft forgot to hump their vendor prefix (trac-9572)\nfunction camelCase( string ) {\n\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n}\nvar acceptData = function( owner ) {\n\n\t// Accepts only:\n\t//  - Node\n\t//    - Node.ELEMENT_NODE\n\t//    - Node.DOCUMENT_NODE\n\t//  - Object\n\t//    - Any\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n\tthis.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n\tcache: function( owner ) {\n\n\t\t// Check if the owner object already has a cache\n\t\tvar value = owner[ this.expando ];\n\n\t\t// If not, create one\n\t\tif ( !value ) {\n\t\t\tvalue = {};\n\n\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t// but we should not, see trac-8335.\n\t\t\t// Always return an empty object.\n\t\t\tif ( acceptData( owner ) ) {\n\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t// use plain assignment\n\t\t\t\tif ( owner.nodeType ) {\n\t\t\t\t\towner[ this.expando ] = value;\n\n\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t// deleted when data is removed\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t},\n\tset: function( owner, data, value ) {\n\t\tvar prop,\n\t\t\tcache = this.cache( owner );\n\n\t\t// Handle: [ owner, key, value ] args\n\t\t// Always use camelCase key (gh-2257)\n\t\tif ( typeof data === \"string\" ) {\n\t\t\tcache[ camelCase( data ) ] = value;\n\n\t\t// Handle: [ owner, { properties } ] args\n\t\t} else {\n\n\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\tfor ( prop in data ) {\n\t\t\t\tcache[ camelCase( prop ) ] = data[ prop ];\n\t\t\t}\n\t\t}\n\t\treturn cache;\n\t},\n\tget: function( owner, key ) {\n\t\treturn key === undefined ?\n\t\t\tthis.cache( owner ) :\n\n\t\t\t// Always use camelCase key (gh-2257)\n\t\t\towner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];\n\t},\n\taccess: function( owner, key, value ) {\n\n\t\t// In cases where either:\n\t\t//\n\t\t//   1. No key was specified\n\t\t//   2. A string key was specified, but no value provided\n\t\t//\n\t\t// Take the \"read\" path and allow the get method to determine\n\t\t// which value to return, respectively either:\n\t\t//\n\t\t//   1. The entire cache object\n\t\t//   2. The data stored at the key\n\t\t//\n\t\tif ( key === undefined ||\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\n\n\t\t\treturn this.get( owner, key );\n\t\t}\n\n\t\t// When the key is not a string, or both a key and value\n\t\t// are specified, set or extend (existing objects) with either:\n\t\t//\n\t\t//   1. An object of properties\n\t\t//   2. A key and value\n\t\t//\n\t\tthis.set( owner, key, value );\n\n\t\t// Since the \"set\" path can have two possible entry points\n\t\t// return the expected data based on which path was taken[*]\n\t\treturn value !== undefined ? value : key;\n\t},\n\tremove: function( owner, key ) {\n\t\tvar i,\n\t\t\tcache = owner[ this.expando ];\n\n\t\tif ( cache === undefined ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( key !== undefined ) {\n\n\t\t\t// Support array or space separated string of keys\n\t\t\tif ( Array.isArray( key ) ) {\n\n\t\t\t\t// If key is an array of keys...\n\t\t\t\t// We always set camelCase keys, so remove that.\n\t\t\t\tkey = key.map( camelCase );\n\t\t\t} else {\n\t\t\t\tkey = camelCase( key );\n\n\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\tkey = key in cache ?\n\t\t\t\t\t[ key ] :\n\t\t\t\t\t( key.match( rnothtmlwhite ) || [] );\n\t\t\t}\n\n\t\t\ti = key.length;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete cache[ key[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if there's no more data\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n\t\t\t// Support: Chrome <=35 - 45\n\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n\t\t\tif ( owner.nodeType ) {\n\t\t\t\towner[ this.expando ] = undefined;\n\t\t\t} else {\n\t\t\t\tdelete owner[ this.expando ];\n\t\t\t}\n\t\t}\n\t},\n\thasData: function( owner ) {\n\t\tvar cache = owner[ this.expando ];\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\n\t}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//\tImplementation Summary\n//\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n//\t2. Improve the module's maintainability by reducing the storage\n//\t\tpaths to a single mechanism.\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /[A-Z]/g;\n\nfunction getData( data ) {\n\tif ( data === \"true\" ) {\n\t\treturn true;\n\t}\n\n\tif ( data === \"false\" ) {\n\t\treturn false;\n\t}\n\n\tif ( data === \"null\" ) {\n\t\treturn null;\n\t}\n\n\t// Only convert to a number if it doesn't change the string\n\tif ( data === +data + \"\" ) {\n\t\treturn +data;\n\t}\n\n\tif ( rbrace.test( data ) ) {\n\t\treturn JSON.parse( data );\n\t}\n\n\treturn data;\n}\n\nfunction dataAttr( elem, key, data ) {\n\tvar name;\n\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\t\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === \"string\" ) {\n\t\t\ttry {\n\t\t\t\tdata = getData( data );\n\t\t\t} catch ( e ) {}\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\tdataUser.set( elem, key, data );\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\treturn data;\n}\n\njQuery.extend( {\n\thasData: function( elem ) {\n\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn dataUser.access( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\tdataUser.remove( elem, name );\n\t},\n\n\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t// with direct calls to dataPriv methods, these can be deprecated.\n\t_data: function( elem, name, data ) {\n\t\treturn dataPriv.access( elem, name, data );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\tdataPriv.remove( elem, name );\n\t}\n} );\n\njQuery.fn.extend( {\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[ 0 ],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = dataUser.get( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE 11 only\n\t\t\t\t\t\t// The attrs elements can be null (trac-14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = camelCase( name.slice( 5 ) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.set( elem, \"hasDataAttrs\", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === \"object\" ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tdataUser.set( this, key );\n\t\t\t} );\n\t\t}\n\n\t\treturn access( this, function( value ) {\n\t\t\tvar data;\n\n\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\tif ( elem && value === undefined ) {\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// The key will always be camelCased in Data\n\t\t\t\tdata = dataUser.get( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\tdata = dataAttr( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the data...\n\t\t\tthis.each( function() {\n\n\t\t\t\t// We always store the camelCased key\n\t\t\t\tdataUser.set( this, key, value );\n\t\t\t} );\n\t\t}, null, value, arguments.length > 1, null, true );\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each( function() {\n\t\t\tdataUser.remove( this, key );\n\t\t} );\n\t}\n} );\n\n\njQuery.extend( {\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n\t\t\tqueue = dataPriv.get( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || Array.isArray( data ) ) {\n\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || \"fx\";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === \"inprogress\" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === \"fx\" ) {\n\t\t\t\tqueue.unshift( \"inprogress\" );\n\t\t\t}\n\n\t\t\t// Clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// Not public - generate a queueHooks object, or return the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + \"queueHooks\";\n\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\n\t\t\t\tdataPriv.remove( elem, [ type + \"queue\", key ] );\n\t\t\t} )\n\t\t} );\n\t}\n} );\n\njQuery.fn.extend( {\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tdata = type;\n\t\t\ttype = \"fx\";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[ 0 ], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each( function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t} );\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || \"fx\", [] );\n\t},\n\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || \"fx\";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\n\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar documentElement = document.documentElement;\n\n\n\n\tvar isAttached = function( elem ) {\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem );\n\t\t},\n\t\tcomposed = { composed: true };\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only\n\t// Check attachment across shadow DOM boundaries when possible (gh-3504)\n\t// Support: iOS 10.0-10.2 only\n\t// Early iOS 10 versions support `attachShadow` but not `getRootNode`,\n\t// leading to errors. We need to check for `getRootNode`.\n\tif ( documentElement.getRootNode ) {\n\t\tisAttached = function( elem ) {\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem ) ||\n\t\t\t\telem.getRootNode( composed ) === elem.ownerDocument;\n\t\t};\n\t}\nvar isHiddenWithinTree = function( elem, el ) {\n\n\t\t// isHiddenWithinTree might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\n\t\t// Inline style trumps all\n\t\treturn elem.style.display === \"none\" ||\n\t\t\telem.style.display === \"\" &&\n\n\t\t\t// Otherwise, check computed style\n\t\t\t// Support: Firefox <=43 - 45\n\t\t\t// Disconnected elements can have computed display: none, so first confirm that elem is\n\t\t\t// in the document.\n\t\t\tisAttached( elem ) &&\n\n\t\t\tjQuery.css( elem, \"display\" ) === \"none\";\n\t};\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n\tvar adjusted, scale,\n\t\tmaxIterations = 20,\n\t\tcurrentValue = tween ?\n\t\t\tfunction() {\n\t\t\t\treturn tween.cur();\n\t\t\t} :\n\t\t\tfunction() {\n\t\t\t\treturn jQuery.css( elem, prop, \"\" );\n\t\t\t},\n\t\tinitial = currentValue(),\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = elem.nodeType &&\n\t\t\t( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n\t\t// Support: Firefox <=54\n\t\t// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)\n\t\tinitial = initial / 2;\n\n\t\t// Trust units reported by jQuery.css\n\t\tunit = unit || initialInUnit[ 3 ];\n\n\t\t// Iteratively approximate from a nonzero starting point\n\t\tinitialInUnit = +initial || 1;\n\n\t\twhile ( maxIterations-- ) {\n\n\t\t\t// Evaluate and update our best guess (doubling guesses that zero out).\n\t\t\t// Finish if the scale equals or crosses 1 (making the old*new product non-positive).\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\t\t\tif ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {\n\t\t\t\tmaxIterations = 0;\n\t\t\t}\n\t\t\tinitialInUnit = initialInUnit / scale;\n\n\t\t}\n\n\t\tinitialInUnit = initialInUnit * 2;\n\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\n\t\t// Make sure we update the tween properties later on\n\t\tvalueParts = valueParts || [];\n\t}\n\n\tif ( valueParts ) {\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t// Apply relative offset (+=/-=) if specified\n\t\tadjusted = valueParts[ 1 ] ?\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n\t\t\t+valueParts[ 2 ];\n\t\tif ( tween ) {\n\t\t\ttween.unit = unit;\n\t\t\ttween.start = initialInUnit;\n\t\t\ttween.end = adjusted;\n\t\t}\n\t}\n\treturn adjusted;\n}\n\n\nvar defaultDisplayMap = {};\n\nfunction getDefaultDisplay( elem ) {\n\tvar temp,\n\t\tdoc = elem.ownerDocument,\n\t\tnodeName = elem.nodeName,\n\t\tdisplay = defaultDisplayMap[ nodeName ];\n\n\tif ( display ) {\n\t\treturn display;\n\t}\n\n\ttemp = doc.body.appendChild( doc.createElement( nodeName ) );\n\tdisplay = jQuery.css( temp, \"display\" );\n\n\ttemp.parentNode.removeChild( temp );\n\n\tif ( display === \"none\" ) {\n\t\tdisplay = \"block\";\n\t}\n\tdefaultDisplayMap[ nodeName ] = display;\n\n\treturn display;\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\t// Determine new display value for elements that need to change\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\n\t\t\t// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n\t\t\t// check is required in this first loop unless we have a nonempty display value (either\n\t\t\t// inline or about-to-be-restored)\n\t\t\tif ( display === \"none\" ) {\n\t\t\t\tvalues[ index ] = dataPriv.get( elem, \"display\" ) || null;\n\t\t\t\tif ( !values[ index ] ) {\n\t\t\t\t\telem.style.display = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( elem.style.display === \"\" && isHiddenWithinTree( elem ) ) {\n\t\t\t\tvalues[ index ] = getDefaultDisplay( elem );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( display !== \"none\" ) {\n\t\t\t\tvalues[ index ] = \"none\";\n\n\t\t\t\t// Remember what we're overwriting\n\t\t\t\tdataPriv.set( elem, \"display\", display );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of the elements in a second loop to avoid constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\tif ( values[ index ] != null ) {\n\t\t\telements[ index ].style.display = values[ index ];\n\t\t}\n\t}\n\n\treturn elements;\n}\n\njQuery.fn.extend( {\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === \"boolean\" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tif ( isHiddenWithinTree( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t} );\n\t}\n} );\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i );\n\nvar rscriptType = ( /^$|^module$|\\/(?:java|ecma)script/i );\n\n\n\n( function() {\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\n\t\tinput = document.createElement( \"input\" );\n\n\t// Support: Android 4.0 - 4.3 only\n\t// Check state lost if the name is set (trac-11217)\n\t// Support: Windows Web Apps (WWA)\n\t// `name` and `type` must use .setAttribute for WWA (trac-14901)\n\tinput.setAttribute( \"type\", \"radio\" );\n\tinput.setAttribute( \"checked\", \"checked\" );\n\tinput.setAttribute( \"name\", \"t\" );\n\n\tdiv.appendChild( input );\n\n\t// Support: Android <=4.1 only\n\t// Older WebKit doesn't clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE <=11 only\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n\n\t// Support: IE <=9 only\n\t// IE <=9 replaces <option> tags with their contents when inserted outside of\n\t// the select element.\n\tdiv.innerHTML = \"<option></option>\";\n\tsupport.option = !!div.lastChild;\n} )();\n\n\n// We have to close these tags to support XHTML (trac-13200)\nvar wrapMap = {\n\n\t// XHTML parsers do not magically insert elements in the\n\t// same way that tag soup parsers do. So we cannot shorten\n\t// this by omitting <tbody> or other required elements.\n\tthead: [ 1, \"<table>\", \"</table>\" ],\n\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\n\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n\t_default: [ 0, \"\", \"\" ]\n};\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n// Support: IE <=9 only\nif ( !support.option ) {\n\twrapMap.optgroup = wrapMap.option = [ 1, \"<select multiple='multiple'>\", \"</select>\" ];\n}\n\n\nfunction getAll( context, tag ) {\n\n\t// Support: IE <=9 - 11 only\n\t// Use typeof to avoid zero-argument method invocation on host objects (trac-15151)\n\tvar ret;\n\n\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\tret = context.getElementsByTagName( tag || \"*\" );\n\n\t} else if ( typeof context.querySelectorAll !== \"undefined\" ) {\n\t\tret = context.querySelectorAll( tag || \"*\" );\n\n\t} else {\n\t\tret = [];\n\t}\n\n\tif ( tag === undefined || tag && nodeName( context, tag ) ) {\n\t\treturn jQuery.merge( [ context ], ret );\n\t}\n\n\treturn ret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar i = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\tdataPriv.set(\n\t\t\telems[ i ],\n\t\t\t\"globalEval\",\n\t\t\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\n\t\t);\n\t}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n\tvar elem, tmp, tag, wrap, attached, j,\n\t\tfragment = context.createDocumentFragment(),\n\t\tnodes = [],\n\t\ti = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\telem = elems[ i ];\n\n\t\tif ( elem || elem === 0 ) {\n\n\t\t\t// Add nodes directly\n\t\t\tif ( toType( elem ) === \"object\" ) {\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t// Convert non-html into a text node\n\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t// Convert html into DOM nodes\n\t\t\t} else {\n\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\n\n\t\t\t\t// Deserialize a standard representation\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\tj = wrap[ 0 ];\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t}\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t// Remember the top-level container\n\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t// Ensure the created nodes are orphaned (trac-12392)\n\t\t\t\ttmp.textContent = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove wrapper from fragment\n\tfragment.textContent = \"\";\n\n\ti = 0;\n\twhile ( ( elem = nodes[ i++ ] ) ) {\n\n\t\t// Skip elements already in the context collection (trac-4087)\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n\t\t\tif ( ignored ) {\n\t\t\t\tignored.push( elem );\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tattached = isAttached( elem );\n\n\t\t// Append to fragment\n\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\n\n\t\t// Preserve script evaluation history\n\t\tif ( attached ) {\n\t\t\tsetGlobalEval( tmp );\n\t\t}\n\n\t\t// Capture executables\n\t\tif ( scripts ) {\n\t\t\tj = 0;\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\n\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n\t\t\t\t\tscripts.push( elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fragment;\n}\n\n\nvar rtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n\tvar origFn, type;\n\n\t// Types can be a map of types/handlers\n\tif ( typeof types === \"object\" ) {\n\n\t\t// ( types-Object, selector, data )\n\t\tif ( typeof selector !== \"string\" ) {\n\n\t\t\t// ( types-Object, data )\n\t\t\tdata = data || selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tfor ( type in types ) {\n\t\t\ton( elem, type, selector, data, types[ type ], one );\n\t\t}\n\t\treturn elem;\n\t}\n\n\tif ( data == null && fn == null ) {\n\n\t\t// ( types, fn )\n\t\tfn = selector;\n\t\tdata = selector = undefined;\n\t} else if ( fn == null ) {\n\t\tif ( typeof selector === \"string\" ) {\n\n\t\t\t// ( types, selector, fn )\n\t\t\tfn = data;\n\t\t\tdata = undefined;\n\t\t} else {\n\n\t\t\t// ( types, data, fn )\n\t\t\tfn = data;\n\t\t\tdata = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t}\n\tif ( fn === false ) {\n\t\tfn = returnFalse;\n\t} else if ( !fn ) {\n\t\treturn elem;\n\t}\n\n\tif ( one === 1 ) {\n\t\torigFn = fn;\n\t\tfn = function( event ) {\n\n\t\t\t// Can use an empty set, since event contains the info\n\t\t\tjQuery().off( event );\n\t\t\treturn origFn.apply( this, arguments );\n\t\t};\n\n\t\t// Use same guid so caller can remove using origFn\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t}\n\treturn elem.each( function() {\n\t\tjQuery.event.add( this, types, fn, data, selector );\n\t} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\n\t\tvar handleObjIn, eventHandle, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.get( elem );\n\n\t\t// Only attach events to objects that accept data\n\t\tif ( !acceptData( elem ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Ensure that invalid selectors throw exceptions at attach time\n\t\t// Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\t\tif ( selector ) {\n\t\t\tjQuery.find.matchesSelector( documentElement, selector );\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element's event structure and main handler, if this is the first\n\t\tif ( !( events = elemData.events ) ) {\n\t\t\tevents = elemData.events = Object.create( null );\n\t\t}\n\t\tif ( !( eventHandle = elemData.handle ) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\n\t\t\t};\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend( {\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join( \".\" )\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we're the first\n\t\t\tif ( !( handlers = events[ type ] ) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\tif ( !special.setup ||\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element's handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\n\t\tvar j, origCount, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n\t\tif ( !elemData || !( events = elemData.events ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[ 2 ] &&\n\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\n\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown ||\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove data and the expando if it's no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdataPriv.remove( elem, \"handle events\" );\n\t\t}\n\t},\n\n\tdispatch: function( nativeEvent ) {\n\n\t\tvar i, j, ret, matched, handleObj, handlerQueue,\n\t\t\targs = new Array( arguments.length ),\n\n\t\t\t// Make a writable jQuery.Event from the native event object\n\t\t\tevent = jQuery.event.fix( nativeEvent ),\n\n\t\t\thandlers = (\n\t\t\t\tdataPriv.get( this, \"events\" ) || Object.create( null )\n\t\t\t)[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[ 0 ] = event;\n\n\t\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// If the event is namespaced, then each handler is only invoked if it is\n\t\t\t\t// specially universal or its namespaces are a superset of the event's.\n\t\t\t\tif ( !event.rnamespace || handleObj.namespace === false ||\n\t\t\t\t\tevent.rnamespace.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar i, handleObj, sel, matchedHandlers, matchedSelectors,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Find delegate handlers\n\t\tif ( delegateCount &&\n\n\t\t\t// Support: IE <=9\n\t\t\t// Black-hole SVG <use> instance trees (trac-13180)\n\t\t\tcur.nodeType &&\n\n\t\t\t// Support: Firefox <=42\n\t\t\t// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n\t\t\t// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n\t\t\t// Support: IE 11 only\n\t\t\t// ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n\t\t\t!( event.type === \"click\" && event.button >= 1 ) ) {\n\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\n\n\t\t\t\t// Don't check non-elements (trac-13208)\n\t\t\t\t// Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)\n\t\t\t\tif ( cur.nodeType === 1 && !( event.type === \"click\" && cur.disabled === true ) ) {\n\t\t\t\t\tmatchedHandlers = [];\n\t\t\t\t\tmatchedSelectors = {};\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (trac-13203)\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatchedSelectors[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] ) {\n\t\t\t\t\t\t\tmatchedHandlers.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matchedHandlers.length ) {\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matchedHandlers } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tcur = this;\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\taddProp: function( name, hook ) {\n\t\tObject.defineProperty( jQuery.Event.prototype, name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\n\t\t\tget: isFunction( hook ) ?\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\treturn hook( this.originalEvent );\n\t\t\t\t\t}\n\t\t\t\t} :\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\treturn this.originalEvent[ name ];\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\tset: function( value ) {\n\t\t\t\tObject.defineProperty( this, name, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tvalue: value\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t},\n\n\tfix: function( originalEvent ) {\n\t\treturn originalEvent[ jQuery.expando ] ?\n\t\t\toriginalEvent :\n\t\t\tnew jQuery.Event( originalEvent );\n\t},\n\n\tspecial: {\n\t\tload: {\n\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tclick: {\n\n\t\t\t// Utilize native event to ensure correct state for checkable inputs\n\t\t\tsetup: function( data ) {\n\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n\t\t\t\tvar el = this || data;\n\n\t\t\t\t// Claim the first handler\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n\n\t\t\t\t\t// dataPriv.set( el, \"click\", ... )\n\t\t\t\t\tleverageNative( el, \"click\", true );\n\t\t\t\t}\n\n\t\t\t\t// Return false to allow normal processing in the caller\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\ttrigger: function( data ) {\n\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n\t\t\t\tvar el = this || data;\n\n\t\t\t\t// Force setup before triggering a click\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n\n\t\t\t\t\tleverageNative( el, \"click\" );\n\t\t\t\t}\n\n\t\t\t\t// Return non-false to allow normal event-path propagation\n\t\t\t\treturn true;\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, suppress native .click() on links\n\t\t\t// Also prevent it if we're currently inside a leveraged native-event stack\n\t\t\t_default: function( event ) {\n\t\t\t\tvar target = event.target;\n\t\t\t\treturn rcheckableType.test( target.type ) &&\n\t\t\t\t\ttarget.click && nodeName( target, \"input\" ) &&\n\t\t\t\t\tdataPriv.get( target, \"click\" ) ||\n\t\t\t\t\tnodeName( target, \"a\" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Ensure the presence of an event listener that handles manually-triggered\n// synthetic events by interrupting progress until reinvoked in response to\n// *native* events that it fires directly, ensuring that state changes have\n// already occurred before other listeners are invoked.\nfunction leverageNative( el, type, isSetup ) {\n\n\t// Missing `isSetup` indicates a trigger call, which must force setup through jQuery.event.add\n\tif ( !isSetup ) {\n\t\tif ( dataPriv.get( el, type ) === undefined ) {\n\t\t\tjQuery.event.add( el, type, returnTrue );\n\t\t}\n\t\treturn;\n\t}\n\n\t// Register the controller as a special universal handler for all event namespaces\n\tdataPriv.set( el, type, false );\n\tjQuery.event.add( el, type, {\n\t\tnamespace: false,\n\t\thandler: function( event ) {\n\t\t\tvar result,\n\t\t\t\tsaved = dataPriv.get( this, type );\n\n\t\t\tif ( ( event.isTrigger & 1 ) && this[ type ] ) {\n\n\t\t\t\t// Interrupt processing of the outer synthetic .trigger()ed event\n\t\t\t\tif ( !saved ) {\n\n\t\t\t\t\t// Store arguments for use when handling the inner native event\n\t\t\t\t\t// There will always be at least one argument (an event object), so this array\n\t\t\t\t\t// will not be confused with a leftover capture object.\n\t\t\t\t\tsaved = slice.call( arguments );\n\t\t\t\t\tdataPriv.set( this, type, saved );\n\n\t\t\t\t\t// Trigger the native event and capture its result\n\t\t\t\t\tthis[ type ]();\n\t\t\t\t\tresult = dataPriv.get( this, type );\n\t\t\t\t\tdataPriv.set( this, type, false );\n\n\t\t\t\t\tif ( saved !== result ) {\n\n\t\t\t\t\t\t// Cancel the outer synthetic event\n\t\t\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t\t\t\tevent.preventDefault();\n\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\n\t\t\t\t// If this is an inner synthetic event for an event with a bubbling surrogate\n\t\t\t\t// (focus or blur), assume that the surrogate already propagated from triggering\n\t\t\t\t// the native event and prevent that from happening again here.\n\t\t\t\t// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the\n\t\t\t\t// bubbling surrogate propagates *after* the non-bubbling base), but that seems\n\t\t\t\t// less bad than duplication.\n\t\t\t\t} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t}\n\n\t\t\t// If this is a native event triggered above, everything is now in order\n\t\t\t// Fire an inner synthetic event with the original arguments\n\t\t\t} else if ( saved ) {\n\n\t\t\t\t// ...and capture the result\n\t\t\t\tdataPriv.set( this, type, jQuery.event.trigger(\n\t\t\t\t\tsaved[ 0 ],\n\t\t\t\t\tsaved.slice( 1 ),\n\t\t\t\t\tthis\n\t\t\t\t) );\n\n\t\t\t\t// Abort handling of the native event by all jQuery handlers while allowing\n\t\t\t\t// native handlers on the same element to run. On target, this is achieved\n\t\t\t\t// by stopping immediate propagation just on the jQuery event. However,\n\t\t\t\t// the native event is re-wrapped by a jQuery one on each level of the\n\t\t\t\t// propagation so the only way to stop it for jQuery is to stop it for\n\t\t\t\t// everyone via native `stopPropagation()`. This is not a problem for\n\t\t\t\t// focus/blur which don't bubble, but it does also stop click on checkboxes\n\t\t\t\t// and radios. We accept this limitation.\n\t\t\t\tevent.stopPropagation();\n\t\t\t\tevent.isImmediatePropagationStopped = returnTrue;\n\t\t\t}\n\t\t}\n\t} );\n}\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n\t// This \"if\" is needed for plain objects\n\tif ( elem.removeEventListener ) {\n\t\telem.removeEventListener( type, handle );\n\t}\n};\n\njQuery.Event = function( src, props ) {\n\n\t// Allow instantiation without the 'new' keyword\n\tif ( !( this instanceof jQuery.Event ) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\n\t\t\t\t// Support: Android <=2.3 only\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t\t// Create target properties\n\t\t// Support: Safari <=6 - 7 only\n\t\t// Target should not be a text node (trac-504, trac-13143)\n\t\tthis.target = ( src.target && src.target.nodeType === 3 ) ?\n\t\t\tsrc.target.parentNode :\n\t\t\tsrc.target;\n\n\t\tthis.currentTarget = src.currentTarget;\n\t\tthis.relatedTarget = src.relatedTarget;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn't have one\n\tthis.timeStamp = src && src.timeStamp || Date.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tconstructor: jQuery.Event,\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\tisSimulated: false,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopPropagation();\n\t\t}\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Includes all common event props including KeyEvent and MouseEvent specific props\njQuery.each( {\n\taltKey: true,\n\tbubbles: true,\n\tcancelable: true,\n\tchangedTouches: true,\n\tctrlKey: true,\n\tdetail: true,\n\teventPhase: true,\n\tmetaKey: true,\n\tpageX: true,\n\tpageY: true,\n\tshiftKey: true,\n\tview: true,\n\t\"char\": true,\n\tcode: true,\n\tcharCode: true,\n\tkey: true,\n\tkeyCode: true,\n\tbutton: true,\n\tbuttons: true,\n\tclientX: true,\n\tclientY: true,\n\toffsetX: true,\n\toffsetY: true,\n\tpointerId: true,\n\tpointerType: true,\n\tscreenX: true,\n\tscreenY: true,\n\ttargetTouches: true,\n\ttoElement: true,\n\ttouches: true,\n\twhich: true\n}, jQuery.event.addProp );\n\njQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( type, delegateType ) {\n\n\tfunction focusMappedHandler( nativeEvent ) {\n\t\tif ( document.documentMode ) {\n\n\t\t\t// Support: IE 11+\n\t\t\t// Attach a single focusin/focusout handler on the document while someone wants\n\t\t\t// focus/blur. This is because the former are synchronous in IE while the latter\n\t\t\t// are async. In other browsers, all those handlers are invoked synchronously.\n\n\t\t\t// `handle` from private data would already wrap the event, but we need\n\t\t\t// to change the `type` here.\n\t\t\tvar handle = dataPriv.get( this, \"handle\" ),\n\t\t\t\tevent = jQuery.event.fix( nativeEvent );\n\t\t\tevent.type = nativeEvent.type === \"focusin\" ? \"focus\" : \"blur\";\n\t\t\tevent.isSimulated = true;\n\n\t\t\t// First, handle focusin/focusout\n\t\t\thandle( nativeEvent );\n\n\t\t\t// ...then, handle focus/blur\n\t\t\t//\n\t\t\t// focus/blur don't bubble while focusin/focusout do; simulate the former by only\n\t\t\t// invoking the handler at the lower level.\n\t\t\tif ( event.target === event.currentTarget ) {\n\n\t\t\t\t// The setup part calls `leverageNative`, which, in turn, calls\n\t\t\t\t// `jQuery.event.add`, so event handle will already have been set\n\t\t\t\t// by this point.\n\t\t\t\thandle( event );\n\t\t\t}\n\t\t} else {\n\n\t\t\t// For non-IE browsers, attach a single capturing handler on the document\n\t\t\t// while someone wants focusin/focusout.\n\t\t\tjQuery.event.simulate( delegateType, nativeEvent.target,\n\t\t\t\tjQuery.event.fix( nativeEvent ) );\n\t\t}\n\t}\n\n\tjQuery.event.special[ type ] = {\n\n\t\t// Utilize native event if possible so blur/focus sequence is correct\n\t\tsetup: function() {\n\n\t\t\tvar attaches;\n\n\t\t\t// Claim the first handler\n\t\t\t// dataPriv.set( this, \"focus\", ... )\n\t\t\t// dataPriv.set( this, \"blur\", ... )\n\t\t\tleverageNative( this, type, true );\n\n\t\t\tif ( document.documentMode ) {\n\n\t\t\t\t// Support: IE 9 - 11+\n\t\t\t\t// We use the same native handler for focusin & focus (and focusout & blur)\n\t\t\t\t// so we need to coordinate setup & teardown parts between those events.\n\t\t\t\t// Use `delegateType` as the key as `type` is already used by `leverageNative`.\n\t\t\t\tattaches = dataPriv.get( this, delegateType );\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tthis.addEventListener( delegateType, focusMappedHandler );\n\t\t\t\t}\n\t\t\t\tdataPriv.set( this, delegateType, ( attaches || 0 ) + 1 );\n\t\t\t} else {\n\n\t\t\t\t// Return false to allow normal processing in the caller\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\ttrigger: function() {\n\n\t\t\t// Force setup before trigger\n\t\t\tleverageNative( this, type );\n\n\t\t\t// Return non-false to allow normal event-path propagation\n\t\t\treturn true;\n\t\t},\n\n\t\tteardown: function() {\n\t\t\tvar attaches;\n\n\t\t\tif ( document.documentMode ) {\n\t\t\t\tattaches = dataPriv.get( this, delegateType ) - 1;\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tthis.removeEventListener( delegateType, focusMappedHandler );\n\t\t\t\t\tdataPriv.remove( this, delegateType );\n\t\t\t\t} else {\n\t\t\t\t\tdataPriv.set( this, delegateType, attaches );\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Return false to indicate standard teardown should be applied\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\n\t\t// Suppress native focus or blur if we're currently inside\n\t\t// a leveraged native-event stack\n\t\t_default: function( event ) {\n\t\t\treturn dataPriv.get( event.target, type );\n\t\t},\n\n\t\tdelegateType: delegateType\n\t};\n\n\t// Support: Firefox <=44\n\t// Firefox doesn't have focus(in | out) events\n\t// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n\t//\n\t// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n\t// focus(in | out) events fire after focus & blur events,\n\t// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n\t// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\n\t//\n\t// Support: IE 9 - 11+\n\t// To preserve relative focusin/focus & focusout/blur event order guaranteed on the 3.x branch,\n\t// attach a single handler for both events in IE.\n\tjQuery.event.special[ delegateType ] = {\n\t\tsetup: function() {\n\n\t\t\t// Handle: regular nodes (via `this.ownerDocument`), window\n\t\t\t// (via `this.document`) & document (via `this`).\n\t\t\tvar doc = this.ownerDocument || this.document || this,\n\t\t\t\tdataHolder = document.documentMode ? this : doc,\n\t\t\t\tattaches = dataPriv.get( dataHolder, delegateType );\n\n\t\t\t// Support: IE 9 - 11+\n\t\t\t// We use the same native handler for focusin & focus (and focusout & blur)\n\t\t\t// so we need to coordinate setup & teardown parts between those events.\n\t\t\t// Use `delegateType` as the key as `type` is already used by `leverageNative`.\n\t\t\tif ( !attaches ) {\n\t\t\t\tif ( document.documentMode ) {\n\t\t\t\t\tthis.addEventListener( delegateType, focusMappedHandler );\n\t\t\t\t} else {\n\t\t\t\t\tdoc.addEventListener( type, focusMappedHandler, true );\n\t\t\t\t}\n\t\t\t}\n\t\t\tdataPriv.set( dataHolder, delegateType, ( attaches || 0 ) + 1 );\n\t\t},\n\t\tteardown: function() {\n\t\t\tvar doc = this.ownerDocument || this.document || this,\n\t\t\t\tdataHolder = document.documentMode ? this : doc,\n\t\t\t\tattaches = dataPriv.get( dataHolder, delegateType ) - 1;\n\n\t\t\tif ( !attaches ) {\n\t\t\t\tif ( document.documentMode ) {\n\t\t\t\t\tthis.removeEventListener( delegateType, focusMappedHandler );\n\t\t\t\t} else {\n\t\t\t\t\tdoc.removeEventListener( type, focusMappedHandler, true );\n\t\t\t\t}\n\t\t\t\tdataPriv.remove( dataHolder, delegateType );\n\t\t\t} else {\n\t\t\t\tdataPriv.set( dataHolder, delegateType, attaches );\n\t\t\t}\n\t\t}\n\t};\n} );\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n\tmouseenter: \"mouseover\",\n\tmouseleave: \"mouseout\",\n\tpointerenter: \"pointerover\",\n\tpointerleave: \"pointerout\"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n} );\n\njQuery.fn.extend( {\n\n\ton: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn );\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ?\n\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\n\t\t\t\t\thandleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === \"object\" ) {\n\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === \"function\" ) {\n\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t} );\n\t}\n} );\n\n\nvar\n\n\t// Support: IE <=10 - 11, Edge 12 - 13 only\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\n\trcleanScript = /^\\s*<!\\[CDATA\\[|\\]\\]>\\s*$/g;\n\n// Prefer a tbody over its parent table for containing new rows\nfunction manipulationTarget( elem, content ) {\n\tif ( nodeName( elem, \"table\" ) &&\n\t\tnodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ) {\n\n\t\treturn jQuery( elem ).children( \"tbody\" )[ 0 ] || elem;\n\t}\n\n\treturn elem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tif ( ( elem.type || \"\" ).slice( 0, 5 ) === \"true/\" ) {\n\t\telem.type = elem.type.slice( 5 );\n\t} else {\n\t\telem.removeAttribute( \"type\" );\n\t}\n\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( dataPriv.hasData( src ) ) {\n\t\tpdataOld = dataPriv.get( src );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdataPriv.remove( dest, \"handle events\" );\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( dataUser.hasData( src ) ) {\n\t\tudataOld = dataUser.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdataUser.set( dest, udataCur );\n\t}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = flat( args );\n\n\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tvalueIsFunction = isFunction( value );\n\n\t// We can't cloneNode fragments that contain checked, in WebKit\n\tif ( valueIsFunction ||\n\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (trac-8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Re-enable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src && ( node.type || \"\" ).toLowerCase()  !== \"module\" ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl && !node.noModule ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src, {\n\t\t\t\t\t\t\t\t\tnonce: node.nonce || node.getAttribute( \"nonce\" )\n\t\t\t\t\t\t\t\t}, doc );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Unwrap a CDATA section containing script contents. This shouldn't be\n\t\t\t\t\t\t\t// needed as in XML documents they're already not visible when\n\t\t\t\t\t\t\t// inspecting element contents and in HTML documents they have no\n\t\t\t\t\t\t\t// meaning but we're preserving that logic for backwards compatibility.\n\t\t\t\t\t\t\t// This will be removed completely in 4.0. See gh-4904.\n\t\t\t\t\t\t\tDOMEval( node.textContent.replace( rcleanScript, \"\" ), node, doc );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && isAttached( node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html;\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = isAttached( elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew jQuery#find here for performance reasons:\n\t\t\t// https://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n\t\t\tif ( acceptData( elem ) ) {\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n\t\t\t\t}\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\nvar rcustomProp = /^--/;\n\n\nvar getStyles = function( elem ) {\n\n\t\t// Support: IE <=11 only, Firefox <=30 (trac-15098, trac-14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif ( !view || !view.opener ) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle( elem );\n\t};\n\nvar swap = function( elem, options, callback ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.call( elem );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\nvar rboxStyle = new RegExp( cssExpand.join( \"|\" ), \"i\" );\n\n\n\n( function() {\n\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t// so they're executed at the same time to save the second computation.\n\tfunction computeStyleTests() {\n\n\t\t// This is a singleton, we need to execute it only once\n\t\tif ( !div ) {\n\t\t\treturn;\n\t\t}\n\n\t\tcontainer.style.cssText = \"position:absolute;left:-11111px;width:60px;\" +\n\t\t\t\"margin-top:1px;padding:0;border:0\";\n\t\tdiv.style.cssText =\n\t\t\t\"position:relative;display:block;box-sizing:border-box;overflow:scroll;\" +\n\t\t\t\"margin:auto;border:1px;padding:1px;\" +\n\t\t\t\"width:60%;top:1%\";\n\t\tdocumentElement.appendChild( container ).appendChild( div );\n\n\t\tvar divStyle = window.getComputedStyle( div );\n\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\n\t\t// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\t\treliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;\n\n\t\t// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3\n\t\t// Some styles come back with percentage values, even though they shouldn't\n\t\tdiv.style.right = \"60%\";\n\t\tpixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;\n\n\t\t// Support: IE 9 - 11 only\n\t\t// Detect misreporting of content dimensions for box-sizing:border-box elements\n\t\tboxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;\n\n\t\t// Support: IE 9 only\n\t\t// Detect overflow:scroll screwiness (gh-3699)\n\t\t// Support: Chrome <=64\n\t\t// Don't get tricked when zoom affects offsetWidth (gh-4029)\n\t\tdiv.style.position = \"absolute\";\n\t\tscrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;\n\n\t\tdocumentElement.removeChild( container );\n\n\t\t// Nullify the div so it wouldn't be stored in the memory and\n\t\t// it will also be a sign that checks already performed\n\t\tdiv = null;\n\t}\n\n\tfunction roundPixelMeasures( measure ) {\n\t\treturn Math.round( parseFloat( measure ) );\n\t}\n\n\tvar pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,\n\t\treliableTrDimensionsVal, reliableMarginLeftVal,\n\t\tcontainer = document.createElement( \"div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\t// Finish early in limited (non-browser) environments\n\tif ( !div.style ) {\n\t\treturn;\n\t}\n\n\t// Support: IE <=9 - 11 only\n\t// Style of cloned element affects source element cloned (trac-8908)\n\tdiv.style.backgroundClip = \"content-box\";\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\tjQuery.extend( support, {\n\t\tboxSizingReliable: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn boxSizingReliableVal;\n\t\t},\n\t\tpixelBoxStyles: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelBoxStylesVal;\n\t\t},\n\t\tpixelPosition: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelPositionVal;\n\t\t},\n\t\treliableMarginLeft: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn reliableMarginLeftVal;\n\t\t},\n\t\tscrollboxSize: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn scrollboxSizeVal;\n\t\t},\n\n\t\t// Support: IE 9 - 11+, Edge 15 - 18+\n\t\t// IE/Edge misreport `getComputedStyle` of table rows with width/height\n\t\t// set in CSS while `offset*` properties report correct values.\n\t\t// Behavior in IE 9 is more subtle than in newer versions & it passes\n\t\t// some versions of this test; make sure not to make it pass there!\n\t\t//\n\t\t// Support: Firefox 70+\n\t\t// Only Firefox includes border widths\n\t\t// in computed dimensions. (gh-4529)\n\t\treliableTrDimensions: function() {\n\t\t\tvar table, tr, trChild, trStyle;\n\t\t\tif ( reliableTrDimensionsVal == null ) {\n\t\t\t\ttable = document.createElement( \"table\" );\n\t\t\t\ttr = document.createElement( \"tr\" );\n\t\t\t\ttrChild = document.createElement( \"div\" );\n\n\t\t\t\ttable.style.cssText = \"position:absolute;left:-11111px;border-collapse:separate\";\n\t\t\t\ttr.style.cssText = \"box-sizing:content-box;border:1px solid\";\n\n\t\t\t\t// Support: Chrome 86+\n\t\t\t\t// Height set through cssText does not get applied.\n\t\t\t\t// Computed height then comes back as 0.\n\t\t\t\ttr.style.height = \"1px\";\n\t\t\t\ttrChild.style.height = \"9px\";\n\n\t\t\t\t// Support: Android 8 Chrome 86+\n\t\t\t\t// In our bodyBackground.html iframe,\n\t\t\t\t// display for all div elements is set to \"inline\",\n\t\t\t\t// which causes a problem only in Android 8 Chrome 86.\n\t\t\t\t// Ensuring the div is `display: block`\n\t\t\t\t// gets around this issue.\n\t\t\t\ttrChild.style.display = \"block\";\n\n\t\t\t\tdocumentElement\n\t\t\t\t\t.appendChild( table )\n\t\t\t\t\t.appendChild( tr )\n\t\t\t\t\t.appendChild( trChild );\n\n\t\t\t\ttrStyle = window.getComputedStyle( tr );\n\t\t\t\treliableTrDimensionsVal = ( parseInt( trStyle.height, 10 ) +\n\t\t\t\t\tparseInt( trStyle.borderTopWidth, 10 ) +\n\t\t\t\t\tparseInt( trStyle.borderBottomWidth, 10 ) ) === tr.offsetHeight;\n\n\t\t\t\tdocumentElement.removeChild( table );\n\t\t\t}\n\t\t\treturn reliableTrDimensionsVal;\n\t\t}\n\t} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n\tvar width, minWidth, maxWidth, ret,\n\t\tisCustomProp = rcustomProp.test( name ),\n\n\t\t// Support: Firefox 51+\n\t\t// Retrieving style before computed somehow\n\t\t// fixes an issue with getting wrong values\n\t\t// on detached elements\n\t\tstyle = elem.style;\n\n\tcomputed = computed || getStyles( elem );\n\n\t// getPropertyValue is needed for:\n\t//   .css('filter') (IE 9 only, trac-12537)\n\t//   .css('--customProperty) (gh-3144)\n\tif ( computed ) {\n\n\t\t// Support: IE <=9 - 11+\n\t\t// IE only supports `\"float\"` in `getPropertyValue`; in computed styles\n\t\t// it's only available as `\"cssFloat\"`. We no longer modify properties\n\t\t// sent to `.css()` apart from camelCasing, so we need to check both.\n\t\t// Normally, this would create difference in behavior: if\n\t\t// `getPropertyValue` returns an empty string, the value returned\n\t\t// by `.css()` would be `undefined`. This is usually the case for\n\t\t// disconnected elements. However, in IE even disconnected elements\n\t\t// with no styles return `\"none\"` for `getPropertyValue( \"float\" )`\n\t\tret = computed.getPropertyValue( name ) || computed[ name ];\n\n\t\tif ( isCustomProp && ret ) {\n\n\t\t\t// Support: Firefox 105+, Chrome <=105+\n\t\t\t// Spec requires trimming whitespace for custom properties (gh-4926).\n\t\t\t// Firefox only trims leading whitespace. Chrome just collapses\n\t\t\t// both leading & trailing whitespace to a single space.\n\t\t\t//\n\t\t\t// Fall back to `undefined` if empty string returned.\n\t\t\t// This collapses a missing definition with property defined\n\t\t\t// and set to an empty string but there's no standard API\n\t\t\t// allowing us to differentiate them without a performance penalty\n\t\t\t// and returning `undefined` aligns with older jQuery.\n\t\t\t//\n\t\t\t// rtrimCSS treats U+000D CARRIAGE RETURN and U+000C FORM FEED\n\t\t\t// as whitespace while CSS does not, but this is not a problem\n\t\t\t// because CSS preprocessing replaces them with U+000A LINE FEED\n\t\t\t// (which *is* CSS whitespace)\n\t\t\t// https://www.w3.org/TR/css-syntax-3/#input-preprocessing\n\t\t\tret = ret.replace( rtrimCSS, \"$1\" ) || undefined;\n\t\t}\n\n\t\tif ( ret === \"\" && !isAttached( elem ) ) {\n\t\t\tret = jQuery.style( elem, name );\n\t\t}\n\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t// Android Browser returns percentage for some values,\n\t\t// but width seems to be reliably pixels.\n\t\t// This is against the CSSOM draft spec:\n\t\t// https://drafts.csswg.org/cssom/#resolved-values\n\t\tif ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\twidth = style.width;\n\t\t\tminWidth = style.minWidth;\n\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\tret = computed.width;\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.width = width;\n\t\t\tstyle.minWidth = minWidth;\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\n\treturn ret !== undefined ?\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" :\n\t\tret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n\t// Define the hook, we'll check on the first run if it's really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tif ( conditionFn() ) {\n\n\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t// to missing dependency), remove it.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\nvar cssPrefixes = [ \"Webkit\", \"Moz\", \"ms\" ],\n\temptyStyle = document.createElement( \"div\" ).style,\n\tvendorProps = {};\n\n// Return a vendor-prefixed property or undefined\nfunction vendorPropName( name ) {\n\n\t// Check for vendor prefixed names\n\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in emptyStyle ) {\n\t\t\treturn name;\n\t\t}\n\t}\n}\n\n// Return a potentially-mapped jQuery.cssProps or vendor prefixed property\nfunction finalPropName( name ) {\n\tvar final = jQuery.cssProps[ name ] || vendorProps[ name ];\n\n\tif ( final ) {\n\t\treturn final;\n\t}\n\tif ( name in emptyStyle ) {\n\t\treturn name;\n\t}\n\treturn vendorProps[ name ] = vendorPropName( name ) || name;\n}\n\n\nvar\n\n\t// Swappable if display is none or starts with table\n\t// except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\tcssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t};\n\nfunction setPositiveNumber( _elem, value, subtract ) {\n\n\t// Any relative (+/-) values have already been\n\t// normalized at this point\n\tvar matches = rcssNum.exec( value );\n\treturn matches ?\n\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\n\t\tvalue;\n}\n\nfunction boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {\n\tvar i = dimension === \"width\" ? 1 : 0,\n\t\textra = 0,\n\t\tdelta = 0,\n\t\tmarginDelta = 0;\n\n\t// Adjustment may not be necessary\n\tif ( box === ( isBorderBox ? \"border\" : \"content\" ) ) {\n\t\treturn 0;\n\t}\n\n\tfor ( ; i < 4; i += 2 ) {\n\n\t\t// Both box models exclude margin\n\t\t// Count margin delta separately to only add it after scroll gutter adjustment.\n\t\t// This is needed to make negative margins work with `outerHeight( true )` (gh-3982).\n\t\tif ( box === \"margin\" ) {\n\t\t\tmarginDelta += jQuery.css( elem, box + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\t// If we get here with a content-box, we're seeking \"padding\" or \"border\" or \"margin\"\n\t\tif ( !isBorderBox ) {\n\n\t\t\t// Add padding\n\t\t\tdelta += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n\t\t\t// For \"border\" or \"margin\", add border\n\t\t\tif ( box !== \"padding\" ) {\n\t\t\t\tdelta += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\n\t\t\t// But still keep track of it otherwise\n\t\t\t} else {\n\t\t\t\textra += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\n\t\t// If we get here with a border-box (content + padding + border), we're seeking \"content\" or\n\t\t// \"padding\" or \"margin\"\n\t\t} else {\n\n\t\t\t// For \"content\", subtract padding\n\t\t\tif ( box === \"content\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// For \"content\" or \"padding\", subtract border\n\t\t\tif ( box !== \"margin\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Account for positive content-box scroll gutter when requested by providing computedVal\n\tif ( !isBorderBox && computedVal >= 0 ) {\n\n\t\t// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border\n\t\t// Assuming integer scroll gutter, subtract the rest and round down\n\t\tdelta += Math.max( 0, Math.ceil(\n\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\tcomputedVal -\n\t\t\tdelta -\n\t\t\textra -\n\t\t\t0.5\n\n\t\t// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter\n\t\t// Use an explicit zero to avoid NaN (gh-3964)\n\t\t) ) || 0;\n\t}\n\n\treturn delta + marginDelta;\n}\n\nfunction getWidthOrHeight( elem, dimension, extra ) {\n\n\t// Start with computed style\n\tvar styles = getStyles( elem ),\n\n\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).\n\t\t// Fake content-box until we know it's needed to know the true value.\n\t\tboxSizingNeeded = !support.boxSizingReliable() || extra,\n\t\tisBorderBox = boxSizingNeeded &&\n\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\tvalueIsBorderBox = isBorderBox,\n\n\t\tval = curCSS( elem, dimension, styles ),\n\t\toffsetProp = \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );\n\n\t// Support: Firefox <=54\n\t// Return a confounding non-pixel value or feign ignorance, as appropriate.\n\tif ( rnumnonpx.test( val ) ) {\n\t\tif ( !extra ) {\n\t\t\treturn val;\n\t\t}\n\t\tval = \"auto\";\n\t}\n\n\n\t// Support: IE 9 - 11 only\n\t// Use offsetWidth/offsetHeight for when box sizing is unreliable.\n\t// In those cases, the computed value can be trusted to be border-box.\n\tif ( ( !support.boxSizingReliable() && isBorderBox ||\n\n\t\t// Support: IE 10 - 11+, Edge 15 - 18+\n\t\t// IE/Edge misreport `getComputedStyle` of table rows with width/height\n\t\t// set in CSS while `offset*` properties report correct values.\n\t\t// Interestingly, in some cases IE 9 doesn't suffer from this issue.\n\t\t!support.reliableTrDimensions() && nodeName( elem, \"tr\" ) ||\n\n\t\t// Fall back to offsetWidth/offsetHeight when value is \"auto\"\n\t\t// This happens for inline elements with no explicit setting (gh-3571)\n\t\tval === \"auto\" ||\n\n\t\t// Support: Android <=4.1 - 4.3 only\n\t\t// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)\n\t\t!parseFloat( val ) && jQuery.css( elem, \"display\", false, styles ) === \"inline\" ) &&\n\n\t\t// Make sure the element is visible & connected\n\t\telem.getClientRects().length ) {\n\n\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\n\n\t\t// Where available, offsetWidth/offsetHeight approximate border box dimensions.\n\t\t// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the\n\t\t// retrieved value as a content box dimension.\n\t\tvalueIsBorderBox = offsetProp in elem;\n\t\tif ( valueIsBorderBox ) {\n\t\t\tval = elem[ offsetProp ];\n\t\t}\n\t}\n\n\t// Normalize \"\" and auto\n\tval = parseFloat( val ) || 0;\n\n\t// Adjust for the element's box model\n\treturn ( val +\n\t\tboxModelAdjustment(\n\t\t\telem,\n\t\t\tdimension,\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles,\n\n\t\t\t// Provide the current computed size to request scroll gutter calculation (gh-3589)\n\t\t\tval\n\t\t)\n\t) + \"px\";\n}\n\njQuery.extend( {\n\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don't automatically add \"px\" to these possibly-unitless properties\n\tcssNumber: {\n\t\tanimationIterationCount: true,\n\t\taspectRatio: true,\n\t\tborderImageSlice: true,\n\t\tcolumnCount: true,\n\t\tflexGrow: true,\n\t\tflexShrink: true,\n\t\tfontWeight: true,\n\t\tgridArea: true,\n\t\tgridColumn: true,\n\t\tgridColumnEnd: true,\n\t\tgridColumnStart: true,\n\t\tgridRow: true,\n\t\tgridRowEnd: true,\n\t\tgridRowStart: true,\n\t\tlineHeight: true,\n\t\topacity: true,\n\t\torder: true,\n\t\torphans: true,\n\t\tscale: true,\n\t\twidows: true,\n\t\tzIndex: true,\n\t\tzoom: true,\n\n\t\t// SVG-related\n\t\tfillOpacity: true,\n\t\tfloodOpacity: true,\n\t\tstopOpacity: true,\n\t\tstrokeMiterlimit: true,\n\t\tstrokeOpacity: true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\n\t\t// Don't set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we're working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name ),\n\t\t\tstyle = elem.style;\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to query the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we're setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (trac-7345)\n\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\n\n\t\t\t\t// Fixes bug trac-9237\n\t\t\t\ttype = \"number\";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren't set (trac-7116)\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\t// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append\n\t\t\t// \"px\" to a few hardcoded values.\n\t\t\tif ( type === \"number\" && !isCustomProp ) {\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\n\t\t\t}\n\n\t\t\t// background-* props affect original clone's values\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n\t\t\t\tstyle[ name ] = \"inherit\";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n\t\t\t\tif ( isCustomProp ) {\n\t\t\t\t\tstyle.setProperty( name, value );\n\t\t\t\t} else {\n\t\t\t\t\tstyle[ name ] = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && \"get\" in hooks &&\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar val, num, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name );\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to modify the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Try prefixed name followed by the unprefixed name\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && \"get\" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t// Convert \"normal\" to computed value\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === \"\" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\n\t\t}\n\n\t\treturn val;\n\t}\n} );\n\njQuery.each( [ \"height\", \"width\" ], function( _i, dimension ) {\n\tjQuery.cssHooks[ dimension ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\n\n\t\t\t\t\t// Support: Safari 8+\n\t\t\t\t\t// Table columns in Safari have non-zero offsetWidth & zero\n\t\t\t\t\t// getBoundingClientRect().width unless display is changed.\n\t\t\t\t\t// Support: IE <=11 only\n\t\t\t\t\t// Running getBoundingClientRect on a disconnected node\n\t\t\t\t\t// in IE throws an error.\n\t\t\t\t\t( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?\n\t\t\t\t\tswap( elem, cssShow, function() {\n\t\t\t\t\t\treturn getWidthOrHeight( elem, dimension, extra );\n\t\t\t\t\t} ) :\n\t\t\t\t\tgetWidthOrHeight( elem, dimension, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar matches,\n\t\t\t\tstyles = getStyles( elem ),\n\n\t\t\t\t// Only read styles.position if the test has a chance to fail\n\t\t\t\t// to avoid forcing a reflow.\n\t\t\t\tscrollboxSizeBuggy = !support.scrollboxSize() &&\n\t\t\t\t\tstyles.position === \"absolute\",\n\n\t\t\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)\n\t\t\t\tboxSizingNeeded = scrollboxSizeBuggy || extra,\n\t\t\t\tisBorderBox = boxSizingNeeded &&\n\t\t\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\t\t\tsubtract = extra ?\n\t\t\t\t\tboxModelAdjustment(\n\t\t\t\t\t\telem,\n\t\t\t\t\t\tdimension,\n\t\t\t\t\t\textra,\n\t\t\t\t\t\tisBorderBox,\n\t\t\t\t\t\tstyles\n\t\t\t\t\t) :\n\t\t\t\t\t0;\n\n\t\t\t// Account for unreliable border-box dimensions by comparing offset* to computed and\n\t\t\t// faking a content-box to get border and padding (gh-3699)\n\t\t\tif ( isBorderBox && scrollboxSizeBuggy ) {\n\t\t\t\tsubtract -= Math.ceil(\n\t\t\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\t\t\tparseFloat( styles[ dimension ] ) -\n\t\t\t\t\tboxModelAdjustment( elem, dimension, \"border\", false, styles ) -\n\t\t\t\t\t0.5\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Convert to pixels if value adjustment is needed\n\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\n\t\t\t\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\n\n\t\t\t\telem.style[ dimension ] = value;\n\t\t\t\tvalue = jQuery.css( elem, dimension );\n\t\t\t}\n\n\t\t\treturn setPositiveNumber( elem, value, subtract );\n\t\t}\n\t};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\n\t\t\t\telem.getBoundingClientRect().left -\n\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\n\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t\t\t} )\n\t\t\t) + \"px\";\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n\tmargin: \"\",\n\tpadding: \"\",\n\tborder: \"Width\"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( prefix !== \"margin\" ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n} );\n\njQuery.fn.extend( {\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || jQuery.easing._default;\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t// or when there is no matching style property that exists.\n\t\t\tif ( tween.elem.nodeType !== 1 ||\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\n\t\t\t// Use step hook for back compat.\n\t\t\t// Use cssHook if its there.\n\t\t\t// Use .style if available and use plain properties where available.\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.nodeType === 1 && (\n\t\t\t\tjQuery.cssHooks[ tween.prop ] ||\n\t\t\t\t\ttween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE <=9 only\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t},\n\t_default: \"swing\"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, inProgress,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trrun = /queueHooks$/;\n\nfunction schedule() {\n\tif ( inProgress ) {\n\t\tif ( document.hidden === false && window.requestAnimationFrame ) {\n\t\t\twindow.requestAnimationFrame( schedule );\n\t\t} else {\n\t\t\twindow.setTimeout( schedule, jQuery.fx.interval );\n\t\t}\n\n\t\tjQuery.fx.tick();\n\t}\n}\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\twindow.setTimeout( function() {\n\t\tfxNow = undefined;\n\t} );\n\treturn ( fxNow = Date.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\ti = 0,\n\t\tattrs = { height: type };\n\n\t// If we include width, step value is 1 to do all cssExpand values,\n\t// otherwise step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n\t\t\t// We're done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\tvar prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,\n\t\tisBox = \"width\" in props || \"height\" in props,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHiddenWithinTree( elem ),\n\t\tdataShow = dataPriv.get( elem, \"fxshow\" );\n\n\t// Queue-skipping animations hijack the fx hooks\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always( function() {\n\n\t\t\t// Ensure the complete handler is called before this completes\n\t\t\tanim.always( function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t// Detect show/hide animations\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.test( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n\t\t\t\t// Pretend to be hidden if this is a \"show\" and\n\t\t\t\t// there is still data from a stopped show/hide\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\n\t\t\t\t// Ignore all other no-op show/hide data\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\t\t}\n\t}\n\n\t// Bail out if this is a no-op like .hide().hide()\n\tpropTween = !jQuery.isEmptyObject( props );\n\tif ( !propTween && jQuery.isEmptyObject( orig ) ) {\n\t\treturn;\n\t}\n\n\t// Restrict \"overflow\" and \"display\" styles during box animations\n\tif ( isBox && elem.nodeType === 1 ) {\n\n\t\t// Support: IE <=9 - 11, Edge 12 - 15\n\t\t// Record all 3 overflow attributes because IE does not infer the shorthand\n\t\t// from identically-valued overflowX and overflowY and Edge just mirrors\n\t\t// the overflowX value there.\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Identify a display type, preferring old show/hide data over the CSS cascade\n\t\trestoreDisplay = dataShow && dataShow.display;\n\t\tif ( restoreDisplay == null ) {\n\t\t\trestoreDisplay = dataPriv.get( elem, \"display\" );\n\t\t}\n\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\tif ( display === \"none\" ) {\n\t\t\tif ( restoreDisplay ) {\n\t\t\t\tdisplay = restoreDisplay;\n\t\t\t} else {\n\n\t\t\t\t// Get nonempty value(s) by temporarily forcing visibility\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t\trestoreDisplay = elem.style.display || restoreDisplay;\n\t\t\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\t\t\tshowHide( [ elem ] );\n\t\t\t}\n\t\t}\n\n\t\t// Animate inline elements as inline-block\n\t\tif ( display === \"inline\" || display === \"inline-block\" && restoreDisplay != null ) {\n\t\t\tif ( jQuery.css( elem, \"float\" ) === \"none\" ) {\n\n\t\t\t\t// Restore the original display value at the end of pure show/hide animations\n\t\t\t\tif ( !propTween ) {\n\t\t\t\t\tanim.done( function() {\n\t\t\t\t\t\tstyle.display = restoreDisplay;\n\t\t\t\t\t} );\n\t\t\t\t\tif ( restoreDisplay == null ) {\n\t\t\t\t\t\tdisplay = style.display;\n\t\t\t\t\t\trestoreDisplay = display === \"none\" ? \"\" : display;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = \"hidden\";\n\t\tanim.always( function() {\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t} );\n\t}\n\n\t// Implement show/hide animations\n\tpropTween = false;\n\tfor ( prop in orig ) {\n\n\t\t// General show/hide setup for this element animation\n\t\tif ( !propTween ) {\n\t\t\tif ( dataShow ) {\n\t\t\t\tif ( \"hidden\" in dataShow ) {\n\t\t\t\t\thidden = dataShow.hidden;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdataShow = dataPriv.access( elem, \"fxshow\", { display: restoreDisplay } );\n\t\t\t}\n\n\t\t\t// Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n\t\t\tif ( toggle ) {\n\t\t\t\tdataShow.hidden = !hidden;\n\t\t\t}\n\n\t\t\t// Show elements before animating them\n\t\t\tif ( hidden ) {\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t}\n\n\t\t\t/* eslint-disable no-loop-func */\n\n\t\t\tanim.done( function() {\n\n\t\t\t\t/* eslint-enable no-loop-func */\n\n\t\t\t\t// The final step of a \"hide\" animation is actually hiding the element\n\t\t\t\tif ( !hidden ) {\n\t\t\t\t\tshowHide( [ elem ] );\n\t\t\t\t}\n\t\t\t\tdataPriv.remove( elem, \"fxshow\" );\n\t\t\t\tfor ( prop in orig ) {\n\t\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t// Per-property setup\n\t\tpropTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\t\tif ( !( prop in dataShow ) ) {\n\t\t\tdataShow[ prop ] = propTween.start;\n\t\t\tif ( hidden ) {\n\t\t\t\tpropTween.end = propTween.start;\n\t\t\t\tpropTween.start = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( Array.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && \"expand\" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = Animation.prefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t} ),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n\t\t\t\t// Support: Android 2.3 only\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (trac-12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n\t\t\t// If there's more to do, yield\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t}\n\n\t\t\t// If this was an empty animation, synthesize a final progress notification\n\t\t\tif ( !length ) {\n\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t}\n\n\t\t\t// Resolve the animation and report its conclusion\n\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\treturn false;\n\t\t},\n\t\tanimation = deferred.promise( {\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} ),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length; index++ ) {\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\tif ( isFunction( result.stop ) ) {\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n\t\t\t\t\tresult.stop.bind( result );\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\t// Attach callbacks from options\n\tanimation\n\t\t.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t} )\n\t);\n\n\treturn animation;\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\n\ttweeners: {\n\t\t\"*\": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value );\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n\t\t\treturn tween;\n\t\t} ]\n\t},\n\n\ttweener: function( props, callback ) {\n\t\tif ( isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ \"*\" ];\n\t\t} else {\n\t\t\tprops = props.match( rnothtmlwhite );\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilters: [ defaultPrefilter ],\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tAnimation.prefilters.unshift( callback );\n\t\t} else {\n\t\t\tAnimation.prefilters.push( callback );\n\t\t}\n\t}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tisFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !isFunction( easing ) && easing\n\t};\n\n\t// Go to the end state if fx are off\n\tif ( jQuery.fx.off ) {\n\t\topt.duration = 0;\n\n\t} else {\n\t\tif ( typeof opt.duration !== \"number\" ) {\n\t\t\tif ( opt.duration in jQuery.fx.speeds ) {\n\t\t\t\topt.duration = jQuery.fx.speeds[ opt.duration ];\n\n\t\t\t} else {\n\t\t\t\topt.duration = jQuery.fx.speeds._default;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = \"fx\";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend( {\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// Show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHiddenWithinTree ).css( \"opacity\", 0 ).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\n\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue ) {\n\t\t\tthis.queue( type || \"fx\", [] );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + \"queueHooks\",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = dataPriv.get( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this &&\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\n\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t} );\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || \"fx\";\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tvar index,\n\t\t\t\tdata = dataPriv.get( this ),\n\t\t\t\tqueue = data[ type + \"queue\" ],\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// Enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// Empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// Look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t} );\n\t}\n} );\n\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( _i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === \"boolean\" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n\tslideDown: genFx( \"show\" ),\n\tslideUp: genFx( \"hide\" ),\n\tslideToggle: genFx( \"toggle\" ),\n\tfadeIn: { opacity: \"show\" },\n\tfadeOut: { opacity: \"hide\" },\n\tfadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ti = 0,\n\t\ttimers = jQuery.timers;\n\n\tfxNow = Date.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\n\t\t// Run the timer and safely remove it when done (allowing for external removal)\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tjQuery.fx.start();\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n\tif ( inProgress ) {\n\t\treturn;\n\t}\n\n\tinProgress = true;\n\tschedule();\n};\n\njQuery.fx.stop = function() {\n\tinProgress = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || \"fx\";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = window.setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\twindow.clearTimeout( timeout );\n\t\t};\n\t} );\n};\n\n\n( function() {\n\tvar input = document.createElement( \"input\" ),\n\t\tselect = document.createElement( \"select\" ),\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\n\n\tinput.type = \"checkbox\";\n\n\t// Support: Android <=4.3 only\n\t// Default value for a checkbox should be \"on\"\n\tsupport.checkOn = input.value !== \"\";\n\n\t// Support: IE <=11 only\n\t// Must access selectedIndex to make default options select\n\tsupport.optSelected = opt.selected;\n\n\t// Support: IE <=11 only\n\t// An input loses its value after becoming a radio\n\tinput = document.createElement( \"input\" );\n\tinput.value = \"t\";\n\tinput.type = \"radio\";\n\tsupport.radioValue = input.value === \"t\";\n} )();\n\n\nvar boolHook,\n\tattrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = jQuery.find.attr( elem, name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\n\t\t\t\t\tnodeName( elem, \"input\" ) ) {\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else {\n\t\t\telem.setAttribute( name, name );\n\t\t}\n\t\treturn name;\n\t}\n};\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( _i, name ) {\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\tvar ret, handle,\n\t\t\tlowercaseName = name.toLowerCase();\n\n\t\tif ( !isXML ) {\n\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\thandle = attrHandle[ lowercaseName ];\n\t\t\tattrHandle[ lowercaseName ] = ret;\n\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\tlowercaseName :\n\t\t\t\tnull;\n\t\t\tattrHandle[ lowercaseName ] = handle;\n\t\t}\n\t\treturn ret;\n\t};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11 only\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// Use proper attribute retrieval (trac-12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\tif ( tabindex ) {\n\t\t\t\t\treturn parseInt( tabindex, 10 );\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\trclickable.test( elem.nodeName ) &&\n\t\t\t\t\telem.href\n\t\t\t\t) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\n// eslint rule \"no-unused-expressions\" is disabled for this code\n// since it considers such accessions noop\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\n\t// Strip and collapse whitespace according to HTML spec\n\t// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\n\tfunction stripAndCollapse( value ) {\n\t\tvar tokens = value.match( rnothtmlwhite ) || [];\n\t\treturn tokens.join( \" \" );\n\t}\n\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\nfunction classesToArray( value ) {\n\tif ( Array.isArray( value ) ) {\n\t\treturn value;\n\t}\n\tif ( typeof value === \"string\" ) {\n\t\treturn value.match( rnothtmlwhite ) || [];\n\t}\n\treturn [];\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classNames, cur, curValue, className, i, finalValue;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tclassNames = classesToArray( value );\n\n\t\tif ( classNames.length ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tcurValue = getClass( this );\n\t\t\t\tcur = this.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tfor ( i = 0; i < classNames.length; i++ ) {\n\t\t\t\t\t\tclassName = classNames[ i ];\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + className + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += className + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\tthis.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classNames, cur, curValue, className, i, finalValue;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tclassNames = classesToArray( value );\n\n\t\tif ( classNames.length ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tcurValue = getClass( this );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = this.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tfor ( i = 0; i < classNames.length; i++ ) {\n\t\t\t\t\t\tclassName = classNames[ i ];\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + className + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + className + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\tthis.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar classNames, className, i, self,\n\t\t\ttype = typeof value,\n\t\t\tisValidValue = type === \"string\" || Array.isArray( value );\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\tif ( typeof stateVal === \"boolean\" && isValidValue ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tclassNames = classesToArray( value );\n\n\t\treturn this.each( function() {\n\t\t\tif ( isValidValue ) {\n\n\t\t\t\t// Toggle individual class names\n\t\t\t\tself = jQuery( this );\n\n\t\t\t\tfor ( i = 0; i < classNames.length; i++ ) {\n\t\t\t\t\tclassName = classNames[ i ];\n\n\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\n\t\t\t\tclassName = getClass( this );\n\t\t\t\tif ( className ) {\n\n\t\t\t\t\t// Store className if set\n\t\t\t\t\tdataPriv.set( this, \"__className__\", className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tif ( this.setAttribute ) {\n\t\t\t\t\tthis.setAttribute( \"class\",\n\t\t\t\t\t\tclassName || value === false ?\n\t\t\t\t\t\t\t\"\" :\n\t\t\t\t\t\t\tdataPriv.get( this, \"__className__\" ) || \"\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n\n\n\n\nvar rreturn = /\\r/g;\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, valueIsFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\t// Handle most common string cases\n\t\t\t\tif ( typeof ret === \"string\" ) {\n\t\t\t\t\treturn ret.replace( rreturn, \"\" );\n\t\t\t\t}\n\n\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\treturn ret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueIsFunction = isFunction( value );\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( Array.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\n\t\t\t\t\t// Support: IE <=10 - 11 only\n\t\t\t\t\t// option.text throws exceptions (trac-14686, trac-14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option, i,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\",\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length;\n\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\ti = max;\n\n\t\t\t\t} else {\n\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t}\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t// IE8-9 doesn't update selected after form reset (trac-2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t!option.disabled &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t/* eslint-disable no-cond-assign */\n\n\t\t\t\t\tif ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* eslint-enable no-cond-assign */\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\n\t\t};\n\t}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\nvar location = window.location;\n\nvar nonce = { guid: Date.now() };\n\nvar rquery = ( /\\?/ );\n\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml, parserErrorElem;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE 9 - 11 only\n\t// IE throws on parseFromString with invalid input.\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {}\n\n\tparserErrorElem = xml && xml.getElementsByTagName( \"parsererror\" )[ 0 ];\n\tif ( !xml || parserErrorElem ) {\n\t\tjQuery.error( \"Invalid XML: \" + (\n\t\t\tparserErrorElem ?\n\t\t\t\tjQuery.map( parserErrorElem.childNodes, function( el ) {\n\t\t\t\t\treturn el.textContent;\n\t\t\t\t} ).join( \"\\n\" ) :\n\t\t\t\tdata\n\t\t) );\n\t}\n\treturn xml;\n};\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n\tstopPropagationCallback = function( e ) {\n\t\te.stopPropagation();\n\t};\n\njQuery.extend( jQuery.event, {\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special, lastElement,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\n\n\t\tcur = lastElement = tmp = elem = elem || document;\n\n\t\t// Don't do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf( \".\" ) > -1 ) {\n\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split( \".\" );\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join( \".\" );\n\t\tevent.rnamespace = event.namespace ?\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (trac-9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (trac-9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tlastElement = cur;\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = ( dataPriv.get( cur, \"events\" ) || Object.create( null ) )[ event.type ] &&\n\t\t\t\tdataPriv.get( cur, \"handle\" );\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif ( ( !special._default ||\n\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\n\t\t\t\tacceptData( elem ) ) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name as the event.\n\t\t\t\t// Don't do default actions on window, that's where global variables be (trac-6170)\n\t\t\t\tif ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {\n\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.addEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\telem[ type ]();\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.removeEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\t// Piggyback on a donor event to simulate a different one\n\t// Used only for `focus(in | out)` events\n\tsimulate: function( type, elem, event ) {\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\t\t\t}\n\t\t);\n\n\t\tjQuery.event.trigger( e, null, elem );\n\t}\n\n} );\n\njQuery.fn.extend( {\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t} );\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[ 0 ];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n} );\n\n\nvar\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( Array.isArray( obj ) ) {\n\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams(\n\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\n\t\t\t\t\tv,\n\t\t\t\t\ttraditional,\n\t\t\t\t\tadd\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t} else if ( !traditional && toType( obj ) === \"object\" ) {\n\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, valueOrFunction ) {\n\n\t\t\t// If value is a function, invoke it and use its return value\n\t\t\tvar value = isFunction( valueOrFunction ) ?\n\t\t\t\tvalueOrFunction() :\n\t\t\t\tvalueOrFunction;\n\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" +\n\t\t\t\tencodeURIComponent( value == null ? \"\" : value );\n\t\t};\n\n\tif ( a == null ) {\n\t\treturn \"\";\n\t}\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t} );\n\n\t} else {\n\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( \"&\" );\n};\n\njQuery.fn.extend( {\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map( function() {\n\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t} ).filter( function() {\n\t\t\tvar type = this.type;\n\n\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t} ).map( function( _i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\tif ( val == null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( Array.isArray( val ) ) {\n\t\t\t\treturn jQuery.map( val, function( val ) {\n\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t} ).get();\n\t}\n} );\n\n\nvar\n\tr20 = /%20/g,\n\trhash = /#.*$/,\n\trantiCache = /([?&])_=[^&]*/,\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\t// trac-7653, trac-8125, trac-8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (trac-10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat( \"*\" ),\n\n\t// Anchor tag for parsing the document origin\n\toriginAnchor = document.createElement( \"a\" );\n\noriginAnchor.href = location.href;\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to \"*\"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = \"*\";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];\n\n\t\tif ( isFunction( func ) ) {\n\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\n\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType[ 0 ] === \"+\" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t} );\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes trac-9887\nfunction ajaxExtend( target, src ) {\n\tvar key, deep,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar ct, type, finalDataType, firstDataType,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif ( current === \"*\" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s.throws ) {\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tstate: \"parsererror\",\n\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: \"success\", data: response };\n}\n\njQuery.extend( {\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: location.href,\n\t\ttype: \"GET\",\n\t\tisLocal: rlocalProtocol.test( location.protocol ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t\"*\": allTypes,\n\t\t\ttext: \"text/plain\",\n\t\t\thtml: \"text/html\",\n\t\t\txml: \"application/xml, text/xml\",\n\t\t\tjson: \"application/json, text/javascript\"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /\\bxml\\b/,\n\t\t\thtml: /\\bhtml/,\n\t\t\tjson: /\\bjson\\b/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: \"responseXML\",\n\t\t\ttext: \"responseText\",\n\t\t\tjson: \"responseJSON\"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t\"* text\": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t\"text html\": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t\"text json\": JSON.parse,\n\n\t\t\t// Parse text as xml\n\t\t\t\"text xml\": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn't be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn't be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar transport,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\tresponseHeaders,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// Url cleanup var\n\t\t\turlAnchor,\n\n\t\t\t// Request state (becomes false upon send and true upon completion)\n\t\t\tcompleted,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// uncached part of the url\n\t\t\tuncached,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context &&\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\tjQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( completed ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() + \" \" ] =\n\t\t\t\t\t\t\t\t\t( responseHeaders[ match[ 1 ].toLowerCase() + \" \" ] || [] )\n\t\t\t\t\t\t\t\t\t\t.concat( match[ 2 ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() + \" \" ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match.join( \", \" );\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn completed ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\tname = requestHeadersNames[ name.toLowerCase() ] =\n\t\t\t\t\t\t\trequestHeadersNames[ name.toLowerCase() ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( completed ) {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Lazy-add the new callbacks in a way that preserves old ones\n\t\t\t\t\t\t\tfor ( code in map ) {\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR );\n\n\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t// Handle falsy url in the settings object (trac-10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || location.href ) + \"\" )\n\t\t\t.replace( rprotocol, location.protocol + \"//\" );\n\n\t\t// Alias method option to type as per ticket trac-12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = ( s.dataType || \"*\" ).toLowerCase().match( rnothtmlwhite ) || [ \"\" ];\n\n\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\n\t\tif ( s.crossDomain == null ) {\n\t\t\turlAnchor = document.createElement( \"a\" );\n\n\t\t\t// Support: IE <=8 - 11, Edge 12 - 15\n\t\t\t// IE throws exception on accessing the href property if url is malformed,\n\t\t\t// e.g. http://example.com:80x/\n\t\t\ttry {\n\t\t\t\turlAnchor.href = s.url;\n\n\t\t\t\t// Support: IE <=8 - 11 only\n\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\n\t\t\t\turlAnchor.href = urlAnchor.href;\n\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\n\t\t\t\t\turlAnchor.protocol + \"//\" + urlAnchor.host;\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n\t\t\t\t// it can be rejected by the transport if it is invalid\n\t\t\t\ts.crossDomain = true;\n\t\t\t}\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( completed ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (trac-15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger( \"ajaxStart\" );\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\t// Remove hash to simplify url manipulation\n\t\tcacheURL = s.url.replace( rhash, \"\" );\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// Remember the hash so we can put it back\n\t\t\tuncached = s.url.slice( cacheURL.length );\n\n\t\t\t// If data is available and should be processed, append data to url\n\t\t\tif ( s.data && ( s.processData || typeof s.data === \"string\" ) ) {\n\t\t\t\tcacheURL += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data;\n\n\t\t\t\t// trac-9682: remove data so that it's not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add or update anti-cache param if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\tcacheURL = cacheURL.replace( rantiCache, \"$1\" );\n\t\t\t\tuncached = ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + ( nonce.guid++ ) +\n\t\t\t\t\tuncached;\n\t\t\t}\n\n\t\t\t// Put hash and anti-cache on the URL that will be requested (gh-1732)\n\t\t\ts.url = cacheURL + uncached;\n\n\t\t// Change '%20' to '+' if this is encoded form body content (gh-2658)\n\t\t} else if ( s.data && s.processData &&\n\t\t\t( s.contentType || \"\" ).indexOf( \"application/x-www-form-urlencoded\" ) === 0 ) {\n\t\t\ts.data = s.data.replace( r20, \"+\" );\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t\"Accept\",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\n\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n\t\t\t\ts.accepts[ \"*\" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend &&\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {\n\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// Aborting is no longer a cancellation\n\t\tstrAbort = \"abort\";\n\n\t\t// Install callbacks on deferreds\n\t\tcompleteDeferred.add( s.complete );\n\t\tjqXHR.done( s.success );\n\t\tjqXHR.fail( s.error );\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, \"No Transport\" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t\t\t}\n\n\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\tif ( completed ) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\n\t\t\t\t\tjqXHR.abort( \"timeout\" );\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcompleted = false;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// Rethrow post-completion exceptions\n\t\t\t\tif ( completed ) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\n\t\t\t\t// Propagate others as results\n\t\t\t\tdone( -1, e );\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Ignore repeat invocations\n\t\t\tif ( completed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcompleted = true;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\twindow.clearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Use a noop converter for missing script but not if jsonp\n\t\t\tif ( !isSuccess &&\n\t\t\t\tjQuery.inArray( \"script\", s.dataTypes ) > -1 &&\n\t\t\t\tjQuery.inArray( \"json\", s.dataTypes ) < 0 ) {\n\t\t\t\ts.converters[ \"text script\" ] = function() {};\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t// If we have data, let's convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, \"json\" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n\t}\n} );\n\njQuery.each( [ \"get\", \"post\" ], function( _i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\n\t\t// Shift arguments if data argument was omitted\n\t\tif ( isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\t// The url can be an options object (which then must have .url)\n\t\treturn jQuery.ajax( jQuery.extend( {\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t}, jQuery.isPlainObject( url ) && url ) );\n\t};\n} );\n\njQuery.ajaxPrefilter( function( s ) {\n\tvar i;\n\tfor ( i in s.headers ) {\n\t\tif ( i.toLowerCase() === \"content-type\" ) {\n\t\t\ts.contentType = s.headers[ i ] || \"\";\n\t\t}\n\t}\n} );\n\n\njQuery._evalUrl = function( url, options, doc ) {\n\treturn jQuery.ajax( {\n\t\turl: url,\n\n\t\t// Make this explicit, since user can override this through ajaxSetup (trac-11264)\n\t\ttype: \"GET\",\n\t\tdataType: \"script\",\n\t\tcache: true,\n\t\tasync: false,\n\t\tglobal: false,\n\n\t\t// Only evaluate the response if it is successful (gh-4126)\n\t\t// dataFilter is not invoked for failure responses, so using it instead\n\t\t// of the default converter is kludgy but it works.\n\t\tconverters: {\n\t\t\t\"text script\": function() {}\n\t\t},\n\t\tdataFilter: function( response ) {\n\t\t\tjQuery.globalEval( response, options, doc );\n\t\t}\n\t} );\n};\n\n\njQuery.fn.extend( {\n\twrapAll: function( html ) {\n\t\tvar wrap;\n\n\t\tif ( this[ 0 ] ) {\n\t\t\tif ( isFunction( html ) ) {\n\t\t\t\thtml = html.call( this[ 0 ] );\n\t\t\t}\n\n\t\t\t// The elements to wrap the target around\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n\t\t\tif ( this[ 0 ].parentNode ) {\n\t\t\t\twrap.insertBefore( this[ 0 ] );\n\t\t\t}\n\n\t\t\twrap.map( function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstElementChild ) {\n\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t} ).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t} );\n\t},\n\n\twrap: function( html ) {\n\t\tvar htmlIsFunction = isFunction( html );\n\n\t\treturn this.each( function( i ) {\n\t\t\tjQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );\n\t\t} );\n\t},\n\n\tunwrap: function( selector ) {\n\t\tthis.parent( selector ).not( \"body\" ).each( function() {\n\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t} );\n\t\treturn this;\n\t}\n} );\n\n\njQuery.expr.pseudos.hidden = function( elem ) {\n\treturn !jQuery.expr.pseudos.visible( elem );\n};\njQuery.expr.pseudos.visible = function( elem ) {\n\treturn !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\n};\n\n\n\n\njQuery.ajaxSettings.xhr = function() {\n\ttry {\n\t\treturn new window.XMLHttpRequest();\n\t} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n\t\t// File protocol always yields status code 0, assume 200\n\t\t0: 200,\n\n\t\t// Support: IE <=9 only\n\t\t// trac-1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n\tvar callback, errorCallback;\n\n\t// Cross domain only allowed if supported through XMLHttpRequest\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\n\t\treturn {\n\t\t\tsend: function( headers, complete ) {\n\t\t\t\tvar i,\n\t\t\t\t\txhr = options.xhr();\n\n\t\t\t\txhr.open(\n\t\t\t\t\toptions.type,\n\t\t\t\t\toptions.url,\n\t\t\t\t\toptions.async,\n\t\t\t\t\toptions.username,\n\t\t\t\t\toptions.password\n\t\t\t\t);\n\n\t\t\t\t// Apply custom fields if provided\n\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override mime type if needed\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t}\n\n\t\t\t\t// X-Requested-With header\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\n\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\n\t\t\t\t}\n\n\t\t\t\t// Set headers\n\t\t\t\tfor ( i in headers ) {\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\n\t\t\t\t}\n\n\t\t\t\t// Callback\n\t\t\t\tcallback = function( type ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.ontimeout =\n\t\t\t\t\t\t\t\t\txhr.onreadystatechange = null;\n\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\n\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\n\n\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\n\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(\n\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see trac-8605, trac-14207\n\t\t\t\t\t\t\t\t\t\txhr.status,\n\t\t\t\t\t\t\t\t\t\txhr.statusText\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\n\t\t\t\t\t\t\t\t\txhr.statusText,\n\n\t\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// Listen to events\n\t\t\t\txhr.onload = callback();\n\t\t\t\terrorCallback = xhr.onerror = xhr.ontimeout = callback( \"error\" );\n\n\t\t\t\t// Support: IE 9 only\n\t\t\t\t// Use onreadystatechange to replace onabort\n\t\t\t\t// to handle uncaught aborts\n\t\t\t\tif ( xhr.onabort !== undefined ) {\n\t\t\t\t\txhr.onabort = errorCallback;\n\t\t\t\t} else {\n\t\t\t\t\txhr.onreadystatechange = function() {\n\n\t\t\t\t\t\t// Check readyState before timeout as it changes\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\n\n\t\t\t\t\t\t\t// Allow onerror to be called first,\n\t\t\t\t\t\t\t// but that will not handle a native abort\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n\t\t\t\t\t\t\twindow.setTimeout( function() {\n\t\t\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\t\t\terrorCallback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Create the abort callback\n\t\t\t\tcallback = callback( \"abort\" );\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// trac-14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\n// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\njQuery.ajaxPrefilter( function( s ) {\n\tif ( s.crossDomain ) {\n\t\ts.contents.script = false;\n\t}\n} );\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, \" +\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /\\b(?:java|ecma)script\\b/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache's special case and crossDomain\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n\t// This transport only deals with cross domain or forced-by-attrs requests\n\tif ( s.crossDomain || s.scriptAttrs ) {\n\t\tvar script, callback;\n\t\treturn {\n\t\t\tsend: function( _, complete ) {\n\t\t\t\tscript = jQuery( \"<script>\" )\n\t\t\t\t\t.attr( s.scriptAttrs || {} )\n\t\t\t\t\t.prop( { charset: s.scriptCharset, src: s.url } )\n\t\t\t\t\t.on( \"load error\", callback = function( evt ) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\tcallback = null;\n\t\t\t\t\t\tif ( evt ) {\n\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce.guid++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n\n\n\n// Support: Safari 8 only\n// In Safari 8 documents created via document.implementation.createHTMLDocument\n// collapse sibling forms: the second one becomes a child of the first one.\n// Because of that, this security measure has to be disabled in Safari 8.\n// https://bugs.webkit.org/show_bug.cgi?id=137337\nsupport.createHTMLDocument = ( function() {\n\tvar body = document.implementation.createHTMLDocument( \"\" ).body;\n\tbody.innerHTML = \"<form></form><form></form>\";\n\treturn body.childNodes.length === 2;\n} )();\n\n\n// Argument \"data\" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( typeof data !== \"string\" ) {\n\t\treturn [];\n\t}\n\tif ( typeof context === \"boolean\" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\n\tvar base, parsed, scripts;\n\n\tif ( !context ) {\n\n\t\t// Stop scripts or inline event handlers from being executed immediately\n\t\t// by using document.implementation\n\t\tif ( support.createHTMLDocument ) {\n\t\t\tcontext = document.implementation.createHTMLDocument( \"\" );\n\n\t\t\t// Set the base href for the created document\n\t\t\t// so any parsed elements with URLs\n\t\t\t// are based on the document's URL (gh-2965)\n\t\t\tbase = context.createElement( \"base\" );\n\t\t\tbase.href = document.location.href;\n\t\t\tcontext.head.appendChild( base );\n\t\t} else {\n\t\t\tcontext = document;\n\t\t}\n\t}\n\n\tparsed = rsingleTag.exec( data );\n\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\n\t}\n\n\tparsed = buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tvar selector, type, response,\n\t\tself = this,\n\t\toff = url.indexOf( \" \" );\n\n\tif ( off > -1 ) {\n\t\tselector = stripAndCollapse( url.slice( off ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it's a function\n\tif ( isFunction( params ) ) {\n\n\t\t// We assume that it's the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === \"object\" ) {\n\t\ttype = \"POST\";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax( {\n\t\t\turl: url,\n\n\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n\t\t\t// Make value of this field explicit since\n\t\t\t// user can override it through ajaxSetup method\n\t\t\ttype: type || \"GET\",\n\t\t\tdataType: \"html\",\n\t\t\tdata: params\n\t\t} ).done( function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n\t\t// but they are ignored because response was set above.\n\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n\t\t} ).always( callback && function( jqXHR, status ) {\n\t\t\tself.each( function() {\n\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn this;\n};\n\n\n\n\njQuery.expr.pseudos.animated = function( elem ) {\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t} ).length;\n};\n\n\n\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, \"position\" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// Set position first, in-case top/left are set even on static elem\n\t\tif ( position === \"static\" ) {\n\t\t\telem.style.position = \"relative\";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n\t\t\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\n\n\t\t// Need to be able to calculate position if either\n\t\t// top or left is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( isFunction( options ) ) {\n\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( \"using\" in options ) {\n\t\t\toptions.using.call( elem, props );\n\n\t\t} else {\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend( {\n\n\t// offset() relates an element's border box to the document origin\n\toffset: function( options ) {\n\n\t\t// Preserve chaining for setter\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each( function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t} );\n\t\t}\n\n\t\tvar rect, win,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !elem ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n\t\t// Support: IE <=11 only\n\t\t// Running getBoundingClientRect on a\n\t\t// disconnected node in IE throws an error\n\t\tif ( !elem.getClientRects().length ) {\n\t\t\treturn { top: 0, left: 0 };\n\t\t}\n\n\t\t// Get document-relative position by adding viewport scroll to viewport-relative gBCR\n\t\trect = elem.getBoundingClientRect();\n\t\twin = elem.ownerDocument.defaultView;\n\t\treturn {\n\t\t\ttop: rect.top + win.pageYOffset,\n\t\t\tleft: rect.left + win.pageXOffset\n\t\t};\n\t},\n\n\t// position() relates an element's margin box to its offset parent's padding box\n\t// This corresponds to the behavior of CSS absolute positioning\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset, doc,\n\t\t\telem = this[ 0 ],\n\t\t\tparentOffset = { top: 0, left: 0 };\n\n\t\t// position:fixed elements are offset from the viewport, which itself always has zero offset\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\n\t\t\t// Assume position:fixed implies availability of getBoundingClientRect\n\t\t\toffset = elem.getBoundingClientRect();\n\n\t\t} else {\n\t\t\toffset = this.offset();\n\n\t\t\t// Account for the *real* offset parent, which can be the document or its root element\n\t\t\t// when a statically positioned element is identified\n\t\t\tdoc = elem.ownerDocument;\n\t\t\toffsetParent = elem.offsetParent || doc.documentElement;\n\t\t\twhile ( offsetParent &&\n\t\t\t\t( offsetParent === doc.body || offsetParent === doc.documentElement ) &&\n\t\t\t\tjQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\n\t\t\t\toffsetParent = offsetParent.parentNode;\n\t\t\t}\n\t\t\tif ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {\n\n\t\t\t\t// Incorporate borders into its offset, since they are outside its content origin\n\t\t\t\tparentOffset = jQuery( offsetParent ).offset();\n\t\t\t\tparentOffset.top += jQuery.css( offsetParent, \"borderTopWidth\", true );\n\t\t\t\tparentOffset.left += jQuery.css( offsetParent, \"borderLeftWidth\", true );\n\t\t\t}\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\treturn {\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n\t\t};\n\t},\n\n\t// This method will return documentElement in the following cases:\n\t// 1) For the element inside the iframe without offsetParent, this method will return\n\t//    documentElement of the parent window\n\t// 2) For the hidden or detached element\n\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n\t//\n\t// but those exceptions were never presented as a real life use-cases\n\t// and might be considered as more preferable results.\n\t//\n\t// This logic, however, is not guaranteed and can change at any point in the future\n\toffsetParent: function() {\n\t\treturn this.map( function() {\n\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\n\t\t\treturn offsetParent || documentElement;\n\t\t} );\n\t}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n\tvar top = \"pageYOffset\" === prop;\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\n\t\t\t// Coalesce documents and windows\n\t\t\tvar win;\n\t\t\tif ( isWindow( elem ) ) {\n\t\t\t\twin = elem;\n\t\t\t} else if ( elem.nodeType === 9 ) {\n\t\t\t\twin = elem.defaultView;\n\t\t\t}\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : win.pageXOffset,\n\t\t\t\t\ttop ? val : win.pageYOffset\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length );\n\t};\n} );\n\n// Support: Safari <=7 - 9.1, Chrome <=37 - 49\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ \"top\", \"left\" ], function( _i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n\tjQuery.each( {\n\t\tpadding: \"inner\" + name,\n\t\tcontent: type,\n\t\t\"\": \"outer\" + name\n\t}, function( defaultExtra, funcName ) {\n\n\t\t// Margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( isWindow( elem ) ) {\n\n\t\t\t\t\t// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n\t\t\t\t\treturn funcName.indexOf( \"outer\" ) === 0 ?\n\t\t\t\t\t\telem[ \"inner\" + name ] :\n\t\t\t\t\t\telem.document.documentElement[ \"client\" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t// whichever is greatest\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n\t\t\t\t\t\tdoc[ \"client\" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable );\n\t\t};\n\t} );\n} );\n\n\njQuery.each( [\n\t\"ajaxStart\",\n\t\"ajaxStop\",\n\t\"ajaxComplete\",\n\t\"ajaxError\",\n\t\"ajaxSuccess\",\n\t\"ajaxSend\"\n], function( _i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n} );\n\n\n\n\njQuery.fn.extend( {\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ?\n\t\t\tthis.off( selector, \"**\" ) :\n\t\t\tthis.off( types, selector || \"**\", fn );\n\t},\n\n\thover: function( fnOver, fnOut ) {\n\t\treturn this\n\t\t\t.on( \"mouseenter\", fnOver )\n\t\t\t.on( \"mouseleave\", fnOut || fnOver );\n\t}\n} );\n\njQuery.each(\n\t( \"blur focus focusin focusout resize scroll click dblclick \" +\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n\t\"change select submit keydown keypress keyup contextmenu\" ).split( \" \" ),\n\tfunction( _i, name ) {\n\n\t\t// Handle event binding\n\t\tjQuery.fn[ name ] = function( data, fn ) {\n\t\t\treturn arguments.length > 0 ?\n\t\t\t\tthis.on( name, null, data, fn ) :\n\t\t\t\tthis.trigger( name );\n\t\t};\n\t}\n);\n\n\n\n\n// Support: Android <=4.0 only\n// Make sure we trim BOM and NBSP\n// Require that the \"whitespace run\" starts from a non-whitespace\n// to avoid O(N^2) behavior when the engine would try matching \"\\s+$\" at each space position.\nvar rtrim = /^[\\s\\uFEFF\\xA0]+|([^\\s\\uFEFF\\xA0])[\\s\\uFEFF\\xA0]+$/g;\n\n// Bind a function to a context, optionally partially applying any\n// arguments.\n// jQuery.proxy is deprecated to promote standards (specifically Function#bind)\n// However, it is not slated for removal any time soon\njQuery.proxy = function( fn, context ) {\n\tvar tmp, args, proxy;\n\n\tif ( typeof context === \"string\" ) {\n\t\ttmp = fn[ context ];\n\t\tcontext = fn;\n\t\tfn = tmp;\n\t}\n\n\t// Quick check to determine if target is callable, in the spec\n\t// this throws a TypeError, but we will just return undefined.\n\tif ( !isFunction( fn ) ) {\n\t\treturn undefined;\n\t}\n\n\t// Simulated bind\n\targs = slice.call( arguments, 2 );\n\tproxy = function() {\n\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t};\n\n\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\treturn proxy;\n};\n\njQuery.holdReady = function( hold ) {\n\tif ( hold ) {\n\t\tjQuery.readyWait++;\n\t} else {\n\t\tjQuery.ready( true );\n\t}\n};\njQuery.isArray = Array.isArray;\njQuery.parseJSON = JSON.parse;\njQuery.nodeName = nodeName;\njQuery.isFunction = isFunction;\njQuery.isWindow = isWindow;\njQuery.camelCase = camelCase;\njQuery.type = toType;\n\njQuery.now = Date.now;\n\njQuery.isNumeric = function( obj ) {\n\n\t// As of jQuery 3.0, isNumeric is limited to\n\t// strings and numbers (primitives or objects)\n\t// that can be coerced to finite numbers (gh-2662)\n\tvar type = jQuery.type( obj );\n\treturn ( type === \"number\" || type === \"string\" ) &&\n\n\t\t// parseFloat NaNs numeric-cast false positives (\"\")\n\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t// subtraction forces infinities to NaN\n\t\t!isNaN( obj - parseFloat( obj ) );\n};\n\njQuery.trim = function( text ) {\n\treturn text == null ?\n\t\t\"\" :\n\t\t( text + \"\" ).replace( rtrim, \"$1\" );\n};\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( true ) {\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n\t\treturn jQuery;\n\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\n\n\n\n\nvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (trac-7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (trac-13566)\nif ( typeof noGlobal === \"undefined\" ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\n\n\n\nreturn jQuery;\n} );\n\n\n//# sourceURL=webpack://EntryPoint/./node_modules/jquery/dist/jquery.js?");

/***/ }),

/***/ "./index.ts":
/*!******************!*\
  !*** ./index.ts ***!
  \******************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.calc_three_way_tie = exports.update_pps = void 0;\nconst z3 = __webpack_require__(/*! z3-solver */ \"./node_modules/z3-solver/build/browser.js\");\nconst $ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\nwindow.z3Promise = z3.init();\nlet teams = [1, 2, 3].map((id) => ({\n    id: id,\n    matches_played: 0,\n    matches_won: 0,\n    sets_won: 0,\n    points_scored: 0,\n    points_scored_against: 0,\n    point_percentage: 0,\n    scores: [[], []],\n    z3_scores: [],\n}));\nfunction get_val(selected) {\n    let val = selected.val();\n    if (val == \"\") {\n        return Number.NaN;\n    }\n    return Number(val);\n}\nfunction range(size, startAt = 0) {\n    return [...Array(size).keys()].map(i => i + startAt);\n}\nfunction update_pps() {\n    collect_teams_data(teams);\n    $(\"#t1_pp\").html(\"\" + teams[0].point_percentage.toFixed(4));\n    $(\"#t2_pp\").html(\"\" + teams[1].point_percentage.toFixed(4));\n    $(\"#t3_pp\").html(\"\" + teams[2].point_percentage.toFixed(4));\n}\nexports.update_pps = update_pps;\nfunction collect_teams_data(teams) {\n    // Reset\n    teams.forEach((team) => {\n        team.matches_played = 0;\n        team.matches_won = 0;\n        team.sets_won = 0;\n        team.points_scored = 0;\n        team.points_scored_against = 0;\n        team.point_percentage = 0;\n        // [match][set]\n        team.scores = [1, 2, 3].map((s) => [Number.NaN, Number.NaN, Number.NaN]);\n        team.z3_scores = [1, 2, 3].map((s) => [undefined, undefined, undefined]);\n    });\n    // Collect up matches, sets, and points\n    range(3, 1).map((m, mn) => {\n        let sets_won = range(3, 1).map((s, sn) => {\n            var t1 = get_val($(\"#t1_m\" + m + \"_s\" + s));\n            var t2 = get_val($(\"#t2_m\" + m + \"_s\" + s));\n            var t3 = get_val($(\"#t3_m\" + m + \"_s\" + s));\n            var points_scored = -1;\n            var team_played = null;\n            if (!Number.isNaN(t1)) {\n                // Team 1 played this game\n                teams[0].points_scored += t1;\n                teams[0].scores[mn][sn] = t1;\n                points_scored = t1;\n                team_played = teams[0];\n            }\n            if (!Number.isNaN(t2)) {\n                // Team 2 played this game\n                teams[1].points_scored += t2;\n                teams[1].scores[mn][sn] = t2;\n                if (team_played != null) {\n                    team_played.points_scored_against += t2;\n                    teams[1].points_scored_against += points_scored;\n                    if (t2 > points_scored) {\n                        teams[1].sets_won += 1;\n                        return teams[1];\n                    }\n                    else {\n                        team_played.sets_won += 1;\n                        return team_played;\n                    }\n                }\n                points_scored = t2;\n                team_played = teams[1];\n            }\n            if (!Number.isNaN(t3)) {\n                // Team 3 played this game\n                teams[2].points_scored += t3;\n                teams[2].scores[mn][sn] = t3;\n                if (team_played != null) {\n                    team_played.points_scored_against += t3;\n                    teams[2].points_scored_against += points_scored;\n                    if (t3 > points_scored) {\n                        teams[2].sets_won += 1;\n                        return teams[2];\n                    }\n                    else {\n                        team_played.sets_won += 1;\n                        return team_played;\n                    }\n                }\n            }\n        });\n        // Collect games won (most number of sets)\n        if (sets_won[0] != undefined && (sets_won[0] == sets_won[1] || sets_won[0] == sets_won[2])) {\n            sets_won[0].matches_won += 1;\n        }\n        else if (sets_won[2] != undefined) {\n            sets_won[2].matches_won += 1;\n        }\n    });\n    // Calculate pp\n    teams.forEach((team) => { team.point_percentage = team.points_scored / team.points_scored_against; });\n}\nfunction build_cmp_rationals(a_num, a_den, b_num, b_den) {\n    return a_num.mul(b_den).sub(b_num.mul(a_den));\n}\nasync function build_solve_set(context, a_team_score, b_team_score, third_set) {\n    let { And, Or } = context;\n    /* The rules for a set:\n        - each team has  0 <= a score < 50 (reasonable max)\n        - one team reaches 25 and the other has 23 or less\n        - one team reaches 25 and ther other has 24, must win by 2 points\n        * 3rd set is 15 points\n     */\n    let point_val = third_set ? 15 : 25;\n    return And(a_team_score.ge(0), a_team_score.lt(50), b_team_score.ge(0), b_team_score.lt(50), Or(\n    // team a gets 25/15, other team is 23/13 or less, set 3 is 0 for both\n    And(a_team_score.eq(point_val), b_team_score.le(point_val - 2)), \n    // win by 2 over 25/15\n    And(a_team_score.ge(point_val), b_team_score.ge(point_val - 1), a_team_score.sub(b_team_score).eq(2)), \n    // Or B....\n    And(b_team_score.eq(point_val), a_team_score.le(point_val - 2)), And(b_team_score.ge(point_val), a_team_score.ge(point_val - 1), b_team_score.sub(a_team_score).eq(2)), \n    // Or Both teams are 0 (i.e. set 3 isn't played)\n    And(b_team_score.eq(0), a_team_score.eq(0))));\n}\nasync function build_solve_match(context, solver, a_team, b_team, match_id) {\n    let { And, Or, Int } = context;\n    let match_ndx = match_id - 1;\n    let a_team_scores = range(3, 1).map((s, sn) => {\n        let i = Int.const('t' + a_team.id + '_m' + match_id + '_s' + s + '_score');\n        if (!Number.isNaN(a_team.scores[match_ndx][sn])) {\n            solver.add(i.eq(a_team.scores[match_ndx][sn]));\n        }\n        // TODO: Do i really need this?\n        // It attempts to minimize the scores\n        //solver.minimize(i);\n        a_team.z3_scores[match_ndx][sn] = i;\n        return i;\n    });\n    let b_team_scores = range(3, 1).map((s, sn) => {\n        let i = Int.const('t' + b_team.id + '_m' + match_id + '_s' + s + '_score');\n        if (!Number.isNaN(b_team.scores[match_ndx][sn])) {\n            solver.add(i.eq(b_team.scores[match_ndx][sn]));\n        }\n        //solver.minimize(i);\n        b_team.z3_scores[match_ndx][sn] = i;\n        return i;\n    });\n    // Add in the set rules\n    range(3, 0).forEach(async (sn) => { solver.add(await build_solve_set(context, a_team_scores[sn], b_team_scores[sn], sn == 2)); });\n    // Add in the match rules (for all three sets)\n    solver.add(Or(\n    //    a_team won set 1 and 2; then 3 = 0 for both\n    And(a_team_scores[0].gt(b_team_scores[0]), a_team_scores[1].gt(b_team_scores[1]), a_team_scores[2].eq(0), b_team_scores[2].eq(0)), \n    // or a_team won set 1 and 3 and lost 2\n    And(a_team_scores[0].gt(b_team_scores[0]), a_team_scores[1].lt(b_team_scores[1]), a_team_scores[2].gt(b_team_scores[2])), \n    // or a_team won sets 2 and 3 and lost 1\n    And(a_team_scores[0].lt(b_team_scores[0]), a_team_scores[1].gt(b_team_scores[1]), a_team_scores[2].gt(b_team_scores[2])), \n    // Or b team\n    And(b_team_scores[0].gt(a_team_scores[0]), b_team_scores[1].gt(a_team_scores[1]), b_team_scores[2].eq(0), a_team_scores[2].eq(0)), \n    // or b_team won set 1 and 3 and lost 2\n    And(b_team_scores[0].gt(a_team_scores[0]), b_team_scores[1].lt(a_team_scores[1]), b_team_scores[2].gt(a_team_scores[2])), \n    // or b_team won sets 2 and 3 and lost 1\n    And(b_team_scores[0].lt(a_team_scores[0]), b_team_scores[1].gt(a_team_scores[1]), b_team_scores[2].gt(a_team_scores[2]))));\n    return [a_team_scores, b_team_scores];\n}\nasync function calc_three_way_tie() {\n    $('#result').html(\"Solving...\");\n    let { Context } = await window.z3Promise;\n    let context = Context('main');\n    let { Optimize, And, ToInt } = context;\n    console.log(teams);\n    // Now, for game 3, we want to come up with a solution where it creates a tie on matches/sets and a certain team wins\n    //let solver = new Solver();\n    let solver = new Optimize();\n    // Who will be playing?\n    //  - whichever teams have 1 games played\n    // a_team score is > b_team, by 2 points, and >= 25 (or vice versa) \n    // -- for both sets, in this simple case, there can be no 3d set\n    const isArith = (item) => { return !!item; };\n    await build_solve_match(context, solver, teams[0], teams[2], 1);\n    let match_1_team_1_scored_against = teams[2].z3_scores[0].filter(isArith).reduce((acc, cv) => acc.add(cv));\n    let match_1_team_3_scored_against = teams[0].z3_scores[0].filter(isArith).reduce((acc, cv) => acc.add(cv));\n    await build_solve_match(context, solver, teams[1], teams[2], 2);\n    let match_2_team_2_scored_against = teams[2].z3_scores[1].filter(isArith).reduce((acc, cv) => acc.add(cv));\n    let match_2_team_3_scored_against = teams[1].z3_scores[1].filter(isArith).reduce((acc, cv) => acc.add(cv));\n    let match_3_scores = await build_solve_match(context, solver, teams[0], teams[1], 3);\n    // Only worry about minimizing these scores\n    solver.minimize(match_3_scores[0][0]);\n    solver.minimize(match_3_scores[1][0]);\n    solver.minimize(match_3_scores[0][1]);\n    solver.minimize(match_3_scores[1][1]);\n    let match_3_team_1_scored_against = teams[1].z3_scores[2].filter(isArith).reduce((acc, cv) => acc.add(cv));\n    let match_3_team_2_scored_against = teams[0].z3_scores[2].filter(isArith).reduce((acc, cv) => acc.add(cv));\n    // now the pp for both teams has to be less than the team we want to win\n    // TODO: if \"winner\" is in this match, then it needs to be > the other two\n    // Instead of actually doing the division, cross multiply and make sure the second ratio is bigger\n    // FIXME: assuming team 3 to win, make this actually use the radio button...\n    solver.add(And(\n    // team 2 has to win match 3!\n    match_3_scores[1][0].gt(match_3_scores[0][0]), match_3_scores[1][1].gt(match_3_scores[0][1]), \n    // AND the point percent for both teams must be less than team 2's!\n    build_cmp_rationals(\n    // team 1, sum of scores from all matches\n    teams[0].z3_scores.flat().filter(isArith).reduce((acc, cv) => acc.add(cv)), \n    // team 1, all points scored against\n    match_1_team_1_scored_against.add(match_3_team_1_scored_against), \n    // team 3, (the wanna be winning team) sum of scores from all matches\n    teams[2].z3_scores.flat().filter(isArith).reduce((acc, cv) => acc.add(cv)), \n    // team 3, all points scored against\n    match_1_team_3_scored_against.add(match_2_team_3_scored_against)).lt(0), build_cmp_rationals(\n    // team 2, sum of scores from all matches\n    teams[1].z3_scores.flat().filter(isArith).reduce((acc, cv) => acc.add(cv)), \n    // team 2, all points scored against\n    match_2_team_2_scored_against.add(match_3_team_2_scored_against), \n    // team 3, (the want to be winning team) sum of scores from all matches\n    teams[2].z3_scores.flat().filter(isArith).reduce((acc, cv) => acc.add(cv)), \n    // team 3, all points scored against\n    match_1_team_3_scored_against.add(match_2_team_3_scored_against)).lt(0)));\n    let output = '';\n    for (const entry of solver.assertions().entries()) {\n        output += '' + entry + '<br/>';\n    }\n    $('#assertions').html(output);\n    if (await solver.check() == 'sat') {\n        $('#t1_m3_s1').val('' + solver.model().get(teams[0].z3_scores[2][0]));\n        $('#t1_m3_s2').val('' + solver.model().get(teams[0].z3_scores[2][1]));\n        $('#t2_m3_s1').val('' + solver.model().get(teams[1].z3_scores[2][0]));\n        $('#t2_m3_s2').val('' + solver.model().get(teams[1].z3_scores[2][1])).trigger(\"change\");\n        $('#result').html('' + solver.model());\n    }\n    else {\n        $('#result').html('Unable to solve!');\n    }\n}\nexports.calc_three_way_tie = calc_three_way_tie;\n;\n\n\n//# sourceURL=webpack://EntryPoint/./index.ts?");

/***/ }),

/***/ "./node_modules/z3-solver/build/browser.js":
/*!*************************************************!*\
  !*** ./node_modules/z3-solver/build/browser.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.init = void 0;\nconst high_level_1 = __webpack_require__(/*! ./high-level */ \"./node_modules/z3-solver/build/high-level/index.js\");\nconst low_level_1 = __webpack_require__(/*! ./low-level */ \"./node_modules/z3-solver/build/low-level/index.js\");\n__exportStar(__webpack_require__(/*! ./high-level/types */ \"./node_modules/z3-solver/build/high-level/types.js\"), exports);\n__exportStar(__webpack_require__(/*! ./low-level/types.__GENERATED__ */ \"./node_modules/z3-solver/build/low-level/types.__GENERATED__.js\"), exports);\nasync function init() {\n    const initZ3 = __webpack_require__.g.initZ3;\n    if (initZ3 === undefined) {\n        throw new Error('initZ3 was not imported correctly. Please consult documentation on how to load Z3 in browser');\n    }\n    const lowLevel = await (0, low_level_1.init)(initZ3);\n    const highLevel = (0, high_level_1.createApi)(lowLevel.Z3);\n    return { ...lowLevel, ...highLevel };\n}\nexports.init = init;\n\n\n//# sourceURL=webpack://EntryPoint/./node_modules/z3-solver/build/browser.js?");

/***/ }),

/***/ "./node_modules/z3-solver/build/high-level/high-level.js":
/*!***************************************************************!*\
  !*** ./node_modules/z3-solver/build/high-level/high-level.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createApi = void 0;\n// TODO(ritave): Add typing for Context Options\n//               https://github.com/Z3Prover/z3/pull/6048#discussion_r883391669\n// TODO(ritave): Add an error handler\n// TODO(ritave): Add support for building faster floats without support for Safari\n// TODO(ritave): Use Z3_DECLARE_CLOSURE macro to generate code https://github.com/Z3Prover/z3/pull/6048#discussion_r884155462\n// TODO(ritave): Add pretty printing\n// TODO(ritave): Make Z3 multi-threaded\n// TODO(ritave): If a test times out, jest kills it, and the global state of Z3 is left in an unexpected state.\n//               This occurs specifically during longer check(). Afterwards, all next tests will fail to run\n//               thinking the previous call was not finished. Find a way to stop execution and clean up the global state\nconst async_mutex_1 = __webpack_require__(/*! async-mutex */ \"./node_modules/async-mutex/lib/index.js\");\nconst low_level_1 = __webpack_require__(/*! ../low-level */ \"./node_modules/z3-solver/build/low-level/index.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"./node_modules/z3-solver/build/high-level/types.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./node_modules/z3-solver/build/high-level/utils.js\");\nconst FALLBACK_PRECISION = 17;\nconst asyncMutex = new async_mutex_1.Mutex();\nfunction isCoercibleRational(obj) {\n    // prettier-ignore\n    const r = ((obj !== null &&\n        (typeof obj === 'object' || typeof obj === 'function')) &&\n        (obj.numerator !== null &&\n            (typeof obj.numerator === 'number' || typeof obj.numerator === 'bigint')) &&\n        (obj.denominator !== null &&\n            (typeof obj.denominator === 'number' || typeof obj.denominator === 'bigint')));\n    r &&\n        (0, utils_1.assert)((typeof obj.numerator !== 'number' || Number.isSafeInteger(obj.numerator)) &&\n            (typeof obj.denominator !== 'number' || Number.isSafeInteger(obj.denominator)), 'Fraction numerator and denominator must be integers');\n    return r;\n}\nfunction createApi(Z3) {\n    // TODO(ritave): Create a custom linting rule that checks if the provided callbacks to cleanup\n    //               Don't capture `this`\n    const cleanup = new FinalizationRegistry(callback => callback());\n    function enableTrace(tag) {\n        Z3.enable_trace(tag);\n    }\n    function disableTrace(tag) {\n        Z3.disable_trace(tag);\n    }\n    function getVersion() {\n        return Z3.get_version();\n    }\n    function getVersionString() {\n        const { major, minor, build_number } = Z3.get_version();\n        return `${major}.${minor}.${build_number}`;\n    }\n    function getFullVersion() {\n        return Z3.get_full_version();\n    }\n    function openLog(filename) {\n        return Z3.open_log(filename);\n    }\n    function appendLog(s) {\n        Z3.append_log(s);\n    }\n    function setParam(key, value) {\n        if (typeof key === 'string') {\n            Z3.global_param_set(key, value.toString());\n        }\n        else {\n            (0, utils_1.assert)(value === undefined, \"Can't provide a Record and second parameter to set_param at the same time\");\n            Object.entries(key).forEach(([key, value]) => setParam(key, value));\n        }\n    }\n    function resetParams() {\n        Z3.global_param_reset_all();\n    }\n    function getParam(name) {\n        return Z3.global_param_get(name);\n    }\n    function createContext(name, options) {\n        const cfg = Z3.mk_config();\n        if (options != null) {\n            Object.entries(options).forEach(([key, value]) => check(Z3.set_param_value(cfg, key, value.toString())));\n        }\n        const contextPtr = Z3.mk_context_rc(cfg);\n        Z3.set_ast_print_mode(contextPtr, low_level_1.Z3_ast_print_mode.Z3_PRINT_SMTLIB2_COMPLIANT);\n        Z3.del_config(cfg);\n        function _assertContext(...ctxs) {\n            ctxs.forEach(other => (0, utils_1.assert)('ctx' in other ? ctx === other.ctx : ctx === other, 'Context mismatch'));\n        }\n        // call this after every nontrivial call to the underlying API\n        function throwIfError() {\n            if (Z3.get_error_code(contextPtr) !== low_level_1.Z3_error_code.Z3_OK) {\n                throw new Error(Z3.get_error_msg(ctx.ptr, Z3.get_error_code(ctx.ptr)));\n            }\n        }\n        function check(val) {\n            throwIfError();\n            return val;\n        }\n        /////////////\n        // Private //\n        /////////////\n        function _toSymbol(s) {\n            if (typeof s === 'number') {\n                return check(Z3.mk_int_symbol(contextPtr, s));\n            }\n            else {\n                return check(Z3.mk_string_symbol(contextPtr, s));\n            }\n        }\n        function _fromSymbol(sym) {\n            const kind = check(Z3.get_symbol_kind(contextPtr, sym));\n            switch (kind) {\n                case low_level_1.Z3_symbol_kind.Z3_INT_SYMBOL:\n                    return Z3.get_symbol_int(contextPtr, sym);\n                case low_level_1.Z3_symbol_kind.Z3_STRING_SYMBOL:\n                    return Z3.get_symbol_string(contextPtr, sym);\n                default:\n                    (0, utils_1.assertExhaustive)(kind);\n            }\n        }\n        function _toParams(key, value) {\n            const params = Z3.mk_params(contextPtr);\n            Z3.params_inc_ref(contextPtr, params);\n            // If value is a boolean\n            if (typeof value === 'boolean') {\n                Z3.params_set_bool(contextPtr, params, _toSymbol(key), value);\n            }\n            else if (typeof value === 'number') {\n                // If value is a uint\n                if (Number.isInteger(value)) {\n                    check(Z3.params_set_uint(contextPtr, params, _toSymbol(key), value));\n                }\n                else {\n                    // If value is a double\n                    check(Z3.params_set_double(contextPtr, params, _toSymbol(key), value));\n                }\n            }\n            else if (typeof value === 'string') {\n                check(Z3.params_set_symbol(contextPtr, params, _toSymbol(key), _toSymbol(value)));\n            }\n            return params;\n        }\n        function _toAst(ast) {\n            switch (check(Z3.get_ast_kind(contextPtr, ast))) {\n                case low_level_1.Z3_ast_kind.Z3_SORT_AST:\n                    return _toSort(ast);\n                case low_level_1.Z3_ast_kind.Z3_FUNC_DECL_AST:\n                    return new FuncDeclImpl(ast);\n                default:\n                    return _toExpr(ast);\n            }\n        }\n        function _toSort(ast) {\n            switch (check(Z3.get_sort_kind(contextPtr, ast))) {\n                case low_level_1.Z3_sort_kind.Z3_BOOL_SORT:\n                    return new BoolSortImpl(ast);\n                case low_level_1.Z3_sort_kind.Z3_INT_SORT:\n                case low_level_1.Z3_sort_kind.Z3_REAL_SORT:\n                    return new ArithSortImpl(ast);\n                case low_level_1.Z3_sort_kind.Z3_BV_SORT:\n                    return new BitVecSortImpl(ast);\n                case low_level_1.Z3_sort_kind.Z3_ARRAY_SORT:\n                    return new ArraySortImpl(ast);\n                default:\n                    return new SortImpl(ast);\n            }\n        }\n        function _toExpr(ast) {\n            const kind = check(Z3.get_ast_kind(contextPtr, ast));\n            if (kind === low_level_1.Z3_ast_kind.Z3_QUANTIFIER_AST) {\n                if (Z3.is_lambda(contextPtr, ast)) {\n                    return new LambdaImpl(ast);\n                }\n                return new NonLambdaQuantifierImpl(ast);\n            }\n            const sortKind = check(Z3.get_sort_kind(contextPtr, Z3.get_sort(contextPtr, ast)));\n            switch (sortKind) {\n                case low_level_1.Z3_sort_kind.Z3_BOOL_SORT:\n                    return new BoolImpl(ast);\n                case low_level_1.Z3_sort_kind.Z3_INT_SORT:\n                    if (kind === low_level_1.Z3_ast_kind.Z3_NUMERAL_AST) {\n                        return new IntNumImpl(ast);\n                    }\n                    return new ArithImpl(ast);\n                case low_level_1.Z3_sort_kind.Z3_REAL_SORT:\n                    if (kind === low_level_1.Z3_ast_kind.Z3_NUMERAL_AST) {\n                        return new RatNumImpl(ast);\n                    }\n                    return new ArithImpl(ast);\n                case low_level_1.Z3_sort_kind.Z3_BV_SORT:\n                    if (kind === low_level_1.Z3_ast_kind.Z3_NUMERAL_AST) {\n                        return new BitVecNumImpl(ast);\n                    }\n                    return new BitVecImpl(ast);\n                case low_level_1.Z3_sort_kind.Z3_ARRAY_SORT:\n                    return new ArrayImpl(ast);\n                default:\n                    return new ExprImpl(ast);\n            }\n        }\n        function _flattenArgs(args) {\n            const result = [];\n            for (const arg of args) {\n                if (isAstVector(arg)) {\n                    result.push(...arg.values());\n                }\n                else {\n                    result.push(arg);\n                }\n            }\n            return result;\n        }\n        function _toProbe(p) {\n            if (isProbe(p)) {\n                return p;\n            }\n            return new ProbeImpl(p);\n        }\n        function _probeNary(f, args) {\n            (0, utils_1.assert)(args.length > 0, 'At least one argument expected');\n            let r = _toProbe(args[0]);\n            for (let i = 1; i < args.length; i++) {\n                r = new ProbeImpl(check(f(contextPtr, r.ptr, _toProbe(args[i]).ptr)));\n            }\n            return r;\n        }\n        ///////////////\n        // Functions //\n        ///////////////\n        function interrupt() {\n            check(Z3.interrupt(contextPtr));\n        }\n        function isModel(obj) {\n            const r = obj instanceof ModelImpl;\n            r && _assertContext(obj);\n            return r;\n        }\n        function isAst(obj) {\n            const r = obj instanceof AstImpl;\n            r && _assertContext(obj);\n            return r;\n        }\n        function isSort(obj) {\n            const r = obj instanceof SortImpl;\n            r && _assertContext(obj);\n            return r;\n        }\n        function isFuncDecl(obj) {\n            const r = obj instanceof FuncDeclImpl;\n            r && _assertContext(obj);\n            return r;\n        }\n        function isFuncInterp(obj) {\n            const r = obj instanceof FuncInterpImpl;\n            r && _assertContext(obj);\n            return r;\n        }\n        function isApp(obj) {\n            if (!isExpr(obj)) {\n                return false;\n            }\n            const kind = check(Z3.get_ast_kind(contextPtr, obj.ast));\n            return kind === low_level_1.Z3_ast_kind.Z3_NUMERAL_AST || kind === low_level_1.Z3_ast_kind.Z3_APP_AST;\n        }\n        function isConst(obj) {\n            return isExpr(obj) && isApp(obj) && obj.numArgs() === 0;\n        }\n        function isExpr(obj) {\n            const r = obj instanceof ExprImpl;\n            r && _assertContext(obj);\n            return r;\n        }\n        function isVar(obj) {\n            return isExpr(obj) && check(Z3.get_ast_kind(contextPtr, obj.ast)) === low_level_1.Z3_ast_kind.Z3_VAR_AST;\n        }\n        function isAppOf(obj, kind) {\n            return isExpr(obj) && isApp(obj) && obj.decl().kind() === kind;\n        }\n        function isBool(obj) {\n            const r = obj instanceof ExprImpl && obj.sort.kind() === low_level_1.Z3_sort_kind.Z3_BOOL_SORT;\n            r && _assertContext(obj);\n            return r;\n        }\n        function isTrue(obj) {\n            return isAppOf(obj, low_level_1.Z3_decl_kind.Z3_OP_TRUE);\n        }\n        function isFalse(obj) {\n            return isAppOf(obj, low_level_1.Z3_decl_kind.Z3_OP_FALSE);\n        }\n        function isAnd(obj) {\n            return isAppOf(obj, low_level_1.Z3_decl_kind.Z3_OP_AND);\n        }\n        function isOr(obj) {\n            return isAppOf(obj, low_level_1.Z3_decl_kind.Z3_OP_OR);\n        }\n        function isImplies(obj) {\n            return isAppOf(obj, low_level_1.Z3_decl_kind.Z3_OP_IMPLIES);\n        }\n        function isNot(obj) {\n            return isAppOf(obj, low_level_1.Z3_decl_kind.Z3_OP_NOT);\n        }\n        function isEq(obj) {\n            return isAppOf(obj, low_level_1.Z3_decl_kind.Z3_OP_EQ);\n        }\n        function isDistinct(obj) {\n            return isAppOf(obj, low_level_1.Z3_decl_kind.Z3_OP_DISTINCT);\n        }\n        function isQuantifier(obj) {\n            const r = obj instanceof QuantifierImpl;\n            r && _assertContext(obj);\n            return r;\n        }\n        function isArith(obj) {\n            const r = obj instanceof ArithImpl;\n            r && _assertContext(obj);\n            return r;\n        }\n        function isArithSort(obj) {\n            const r = obj instanceof ArithSortImpl;\n            r && _assertContext(obj);\n            return r;\n        }\n        function isInt(obj) {\n            return isArith(obj) && isIntSort(obj.sort);\n        }\n        function isIntVal(obj) {\n            const r = obj instanceof IntNumImpl;\n            r && _assertContext(obj);\n            return r;\n        }\n        function isIntSort(obj) {\n            return isSort(obj) && obj.kind() === low_level_1.Z3_sort_kind.Z3_INT_SORT;\n        }\n        function isReal(obj) {\n            return isArith(obj) && isRealSort(obj.sort);\n        }\n        function isRealVal(obj) {\n            const r = obj instanceof RatNumImpl;\n            r && _assertContext(obj);\n            return r;\n        }\n        function isRealSort(obj) {\n            return isSort(obj) && obj.kind() === low_level_1.Z3_sort_kind.Z3_REAL_SORT;\n        }\n        function isBitVecSort(obj) {\n            const r = obj instanceof BitVecSortImpl;\n            r && _assertContext(obj);\n            return r;\n        }\n        function isBitVec(obj) {\n            const r = obj instanceof BitVecImpl;\n            r && _assertContext(obj);\n            return r;\n        }\n        function isBitVecVal(obj) {\n            const r = obj instanceof BitVecNumImpl;\n            r && _assertContext(obj);\n            return r;\n        }\n        function isArraySort(obj) {\n            const r = obj instanceof ArraySortImpl;\n            r && _assertContext(obj);\n            return r;\n        }\n        function isArray(obj) {\n            const r = obj instanceof ArrayImpl;\n            r && _assertContext(obj);\n            return r;\n        }\n        function isConstArray(obj) {\n            return isAppOf(obj, low_level_1.Z3_decl_kind.Z3_OP_CONST_ARRAY);\n        }\n        function isProbe(obj) {\n            const r = obj instanceof ProbeImpl;\n            r && _assertContext(obj);\n            return r;\n        }\n        function isTactic(obj) {\n            const r = obj instanceof TacticImpl;\n            r && _assertContext(obj);\n            return r;\n        }\n        function isAstVector(obj) {\n            const r = obj instanceof AstVectorImpl;\n            r && _assertContext(obj);\n            return r;\n        }\n        function eqIdentity(a, b) {\n            return a.eqIdentity(b);\n        }\n        function getVarIndex(obj) {\n            (0, utils_1.assert)(isVar(obj), 'Z3 bound variable expected');\n            return Z3.get_index_value(contextPtr, obj.ast);\n        }\n        function from(value) {\n            if (typeof value === 'boolean') {\n                return Bool.val(value);\n            }\n            else if (typeof value === 'number') {\n                if (!Number.isFinite(value)) {\n                    throw new Error(`cannot represent infinity/NaN (got ${value})`);\n                }\n                if (Math.floor(value) === value) {\n                    return Int.val(value);\n                }\n                return Real.val(value);\n            }\n            else if (isCoercibleRational(value)) {\n                return Real.val(value);\n            }\n            else if (typeof value === 'bigint') {\n                return Int.val(value);\n            }\n            else if (isExpr(value)) {\n                return value;\n            }\n            (0, utils_1.assert)(false);\n        }\n        async function solve(...assertions) {\n            const solver = new ctx.Solver();\n            solver.add(...assertions);\n            const result = await solver.check();\n            if (result === 'sat') {\n                return solver.model();\n            }\n            return result;\n        }\n        ///////////////////////////////\n        // expression simplification //\n        ///////////////////////////////\n        async function simplify(e) {\n            const result = await Z3.simplify(contextPtr, e.ast);\n            return _toExpr(check(result));\n        }\n        /////////////\n        // Objects //\n        /////////////\n        const Sort = {\n            declare: (name) => new SortImpl(Z3.mk_uninterpreted_sort(contextPtr, _toSymbol(name))),\n        };\n        const Function = {\n            declare: (name, ...signature) => {\n                const arity = signature.length - 1;\n                const rng = signature[arity];\n                _assertContext(rng);\n                const dom = [];\n                for (let i = 0; i < arity; i++) {\n                    _assertContext(signature[i]);\n                    dom.push(signature[i].ptr);\n                }\n                return new FuncDeclImpl(Z3.mk_func_decl(contextPtr, _toSymbol(name), dom, rng.ptr));\n            },\n            fresh: (...signature) => {\n                const arity = signature.length - 1;\n                const rng = signature[arity];\n                _assertContext(rng);\n                const dom = [];\n                for (let i = 0; i < arity; i++) {\n                    _assertContext(signature[i]);\n                    dom.push(signature[i].ptr);\n                }\n                return new FuncDeclImpl(Z3.mk_fresh_func_decl(contextPtr, 'f', dom, rng.ptr));\n            },\n        };\n        const RecFunc = {\n            declare: (name, ...signature) => {\n                const arity = signature.length - 1;\n                const rng = signature[arity];\n                _assertContext(rng);\n                const dom = [];\n                for (let i = 0; i < arity; i++) {\n                    _assertContext(signature[i]);\n                    dom.push(signature[i].ptr);\n                }\n                return new FuncDeclImpl(Z3.mk_rec_func_decl(contextPtr, _toSymbol(name), dom, rng.ptr));\n            },\n            addDefinition: (f, args, body) => {\n                _assertContext(f, ...args, body);\n                check(Z3.add_rec_def(contextPtr, f.ptr, args.map(arg => arg.ast), body.ast));\n            },\n        };\n        const Bool = {\n            sort: () => new BoolSortImpl(Z3.mk_bool_sort(contextPtr)),\n            const: (name) => new BoolImpl(Z3.mk_const(contextPtr, _toSymbol(name), Bool.sort().ptr)),\n            consts: (names) => {\n                if (typeof names === 'string') {\n                    names = names.split(' ');\n                }\n                return names.map(name => Bool.const(name));\n            },\n            vector: (prefix, count) => {\n                const result = [];\n                for (let i = 0; i < count; i++) {\n                    result.push(Bool.const(`${prefix}__${i}`));\n                }\n                return result;\n            },\n            fresh: (prefix = 'b') => new BoolImpl(Z3.mk_fresh_const(contextPtr, prefix, Bool.sort().ptr)),\n            val: (value) => {\n                if (value) {\n                    return new BoolImpl(Z3.mk_true(contextPtr));\n                }\n                return new BoolImpl(Z3.mk_false(contextPtr));\n            },\n        };\n        const Int = {\n            sort: () => new ArithSortImpl(Z3.mk_int_sort(contextPtr)),\n            const: (name) => new ArithImpl(Z3.mk_const(contextPtr, _toSymbol(name), Int.sort().ptr)),\n            consts: (names) => {\n                if (typeof names === 'string') {\n                    names = names.split(' ');\n                }\n                return names.map(name => Int.const(name));\n            },\n            vector: (prefix, count) => {\n                const result = [];\n                for (let i = 0; i < count; i++) {\n                    result.push(Int.const(`${prefix}__${i}`));\n                }\n                return result;\n            },\n            fresh: (prefix = 'x') => new ArithImpl(Z3.mk_fresh_const(contextPtr, prefix, Int.sort().ptr)),\n            val: (value) => {\n                (0, utils_1.assert)(typeof value === 'bigint' || typeof value === 'string' || Number.isSafeInteger(value));\n                return new IntNumImpl(check(Z3.mk_numeral(contextPtr, value.toString(), Int.sort().ptr)));\n            },\n        };\n        const Real = {\n            sort: () => new ArithSortImpl(Z3.mk_real_sort(contextPtr)),\n            const: (name) => new ArithImpl(check(Z3.mk_const(contextPtr, _toSymbol(name), Real.sort().ptr))),\n            consts: (names) => {\n                if (typeof names === 'string') {\n                    names = names.split(' ');\n                }\n                return names.map(name => Real.const(name));\n            },\n            vector: (prefix, count) => {\n                const result = [];\n                for (let i = 0; i < count; i++) {\n                    result.push(Real.const(`${prefix}__${i}`));\n                }\n                return result;\n            },\n            fresh: (prefix = 'b') => new ArithImpl(Z3.mk_fresh_const(contextPtr, prefix, Real.sort().ptr)),\n            val: (value) => {\n                if (isCoercibleRational(value)) {\n                    value = `${value.numerator}/${value.denominator}`;\n                }\n                return new RatNumImpl(Z3.mk_numeral(contextPtr, value.toString(), Real.sort().ptr));\n            },\n        };\n        const BitVec = {\n            sort(bits) {\n                (0, utils_1.assert)(Number.isSafeInteger(bits), 'number of bits must be an integer');\n                return new BitVecSortImpl(Z3.mk_bv_sort(contextPtr, bits));\n            },\n            const(name, bits) {\n                return new BitVecImpl(check(Z3.mk_const(contextPtr, _toSymbol(name), isBitVecSort(bits) ? bits.ptr : BitVec.sort(bits).ptr)));\n            },\n            consts(names, bits) {\n                if (typeof names === 'string') {\n                    names = names.split(' ');\n                }\n                return names.map(name => BitVec.const(name, bits));\n            },\n            val(value, bits) {\n                if (value === true) {\n                    return BitVec.val(1, bits);\n                }\n                else if (value === false) {\n                    return BitVec.val(0, bits);\n                }\n                return new BitVecNumImpl(check(Z3.mk_numeral(contextPtr, value.toString(), isBitVecSort(bits) ? bits.ptr : BitVec.sort(bits).ptr)));\n            },\n        };\n        const Array = {\n            sort(...sig) {\n                const arity = sig.length - 1;\n                const r = sig[arity];\n                const d = sig[0];\n                if (arity === 1) {\n                    return new ArraySortImpl(Z3.mk_array_sort(contextPtr, d.ptr, r.ptr));\n                }\n                const dom = sig.slice(0, arity);\n                return new ArraySortImpl(Z3.mk_array_sort_n(contextPtr, dom.map(s => s.ptr), r.ptr));\n            },\n            const(name, ...sig) {\n                return new ArrayImpl(check(Z3.mk_const(contextPtr, _toSymbol(name), Array.sort(...sig).ptr)));\n            },\n            consts(names, ...sig) {\n                if (typeof names === 'string') {\n                    names = names.split(' ');\n                }\n                return names.map(name => Array.const(name, ...sig));\n            },\n            K(domain, value) {\n                return new ArrayImpl(check(Z3.mk_const_array(contextPtr, domain.ptr, value.ptr)));\n            },\n        };\n        function If(condition, onTrue, onFalse) {\n            if (isProbe(condition) && isTactic(onTrue) && isTactic(onFalse)) {\n                return Cond(condition, onTrue, onFalse);\n            }\n            (0, utils_1.assert)(!isProbe(condition) && !isTactic(onTrue) && !isTactic(onFalse), 'Mixed expressions and goals');\n            if (typeof condition === 'boolean') {\n                condition = Bool.val(condition);\n            }\n            onTrue = from(onTrue);\n            onFalse = from(onFalse);\n            return _toExpr(check(Z3.mk_ite(contextPtr, condition.ptr, onTrue.ast, onFalse.ast)));\n        }\n        function Distinct(...exprs) {\n            (0, utils_1.assert)(exprs.length > 0, \"Can't make Distinct ouf of nothing\");\n            return new BoolImpl(check(Z3.mk_distinct(contextPtr, exprs.map(expr => {\n                expr = from(expr);\n                _assertContext(expr);\n                return expr.ast;\n            }))));\n        }\n        function Const(name, sort) {\n            _assertContext(sort);\n            return _toExpr(check(Z3.mk_const(contextPtr, _toSymbol(name), sort.ptr)));\n        }\n        function Consts(names, sort) {\n            _assertContext(sort);\n            if (typeof names === 'string') {\n                names = names.split(' ');\n            }\n            return names.map(name => Const(name, sort));\n        }\n        function FreshConst(sort, prefix = 'c') {\n            _assertContext(sort);\n            return _toExpr(Z3.mk_fresh_const(sort.ctx.ptr, prefix, sort.ptr));\n        }\n        function Var(idx, sort) {\n            _assertContext(sort);\n            return _toExpr(Z3.mk_bound(sort.ctx.ptr, idx, sort.ptr));\n        }\n        function Implies(a, b) {\n            a = from(a);\n            b = from(b);\n            _assertContext(a, b);\n            return new BoolImpl(check(Z3.mk_implies(contextPtr, a.ptr, b.ptr)));\n        }\n        function Iff(a, b) {\n            a = from(a);\n            b = from(b);\n            _assertContext(a, b);\n            return new BoolImpl(check(Z3.mk_iff(contextPtr, a.ptr, b.ptr)));\n        }\n        function Eq(a, b) {\n            a = from(a);\n            b = from(b);\n            _assertContext(a, b);\n            return a.eq(b);\n        }\n        function Xor(a, b) {\n            a = from(a);\n            b = from(b);\n            _assertContext(a, b);\n            return new BoolImpl(check(Z3.mk_xor(contextPtr, a.ptr, b.ptr)));\n        }\n        function Not(a) {\n            if (typeof a === 'boolean') {\n                a = from(a);\n            }\n            _assertContext(a);\n            if (isProbe(a)) {\n                return new ProbeImpl(check(Z3.probe_not(contextPtr, a.ptr)));\n            }\n            return new BoolImpl(check(Z3.mk_not(contextPtr, a.ptr)));\n        }\n        function And(...args) {\n            if (args.length == 1 && args[0] instanceof ctx.AstVector) {\n                args = [...args[0].values()];\n                (0, utils_1.assert)((0, utils_1.allSatisfy)(args, isBool) ?? true, 'AstVector containing not bools');\n            }\n            const allProbes = (0, utils_1.allSatisfy)(args, isProbe) ?? false;\n            if (allProbes) {\n                return _probeNary(Z3.probe_and, args);\n            }\n            else {\n                const castArgs = args.map(from);\n                _assertContext(...castArgs);\n                return new BoolImpl(check(Z3.mk_and(contextPtr, castArgs.map(arg => arg.ptr))));\n            }\n        }\n        function Or(...args) {\n            if (args.length == 1 && args[0] instanceof ctx.AstVector) {\n                args = [...args[0].values()];\n                (0, utils_1.assert)((0, utils_1.allSatisfy)(args, isBool) ?? true, 'AstVector containing not bools');\n            }\n            const allProbes = (0, utils_1.allSatisfy)(args, isProbe) ?? false;\n            if (allProbes) {\n                return _probeNary(Z3.probe_or, args);\n            }\n            else {\n                const castArgs = args.map(from);\n                _assertContext(...castArgs);\n                return new BoolImpl(check(Z3.mk_or(contextPtr, castArgs.map(arg => arg.ptr))));\n            }\n        }\n        function ForAll(quantifiers, body, weight = 1) {\n            // Verify all quantifiers are constants\n            if (!(0, utils_1.allSatisfy)(quantifiers, isConst)) {\n                throw new Error('Quantifier variables must be constants');\n            }\n            return new NonLambdaQuantifierImpl(check(Z3.mk_quantifier_const_ex(contextPtr, true, weight, _toSymbol(''), _toSymbol(''), quantifiers.map(q => q.ptr), // The earlier check verifies these are all apps\n            [], [], body.ptr)));\n        }\n        function Exists(quantifiers, body, weight = 1) {\n            // Verify all quantifiers are constants\n            if (!(0, utils_1.allSatisfy)(quantifiers, isConst)) {\n                throw new Error('Quantifier variables must be constants');\n            }\n            return new NonLambdaQuantifierImpl(check(Z3.mk_quantifier_const_ex(contextPtr, false, weight, _toSymbol(''), _toSymbol(''), quantifiers.map(q => q.ptr), // The earlier check verifies these are all apps\n            [], [], body.ptr)));\n        }\n        function Lambda(quantifiers, expr) {\n            // TODO(walden): For some reason LambdaImpl<DomainSort, RangeSort> leads to type issues\n            //    and Typescript won't build. I'm not sure why since the types seem to all match\n            //    up. For now, we just use any for the domain sort\n            // Verify all quantifiers are constants\n            if (!(0, utils_1.allSatisfy)(quantifiers, isConst)) {\n                throw new Error('Quantifier variables must be constants');\n            }\n            return new LambdaImpl(check(Z3.mk_lambda_const(contextPtr, quantifiers.map(q => q.ptr), expr.ptr)));\n        }\n        function ToReal(expr) {\n            expr = from(expr);\n            _assertContext(expr);\n            (0, utils_1.assert)(isInt(expr), 'Int expression expected');\n            return new ArithImpl(check(Z3.mk_int2real(contextPtr, expr.ast)));\n        }\n        function ToInt(expr) {\n            if (!isExpr(expr)) {\n                expr = Real.val(expr);\n            }\n            _assertContext(expr);\n            (0, utils_1.assert)(isReal(expr), 'Real expression expected');\n            return new ArithImpl(check(Z3.mk_real2int(contextPtr, expr.ast)));\n        }\n        function IsInt(expr) {\n            if (!isExpr(expr)) {\n                expr = Real.val(expr);\n            }\n            _assertContext(expr);\n            (0, utils_1.assert)(isReal(expr), 'Real expression expected');\n            return new BoolImpl(check(Z3.mk_is_int(contextPtr, expr.ast)));\n        }\n        function Sqrt(a) {\n            if (!isExpr(a)) {\n                a = Real.val(a);\n            }\n            return a.pow('1/2');\n        }\n        function Cbrt(a) {\n            if (!isExpr(a)) {\n                a = Real.val(a);\n            }\n            return a.pow('1/3');\n        }\n        function BV2Int(a, isSigned) {\n            _assertContext(a);\n            return new ArithImpl(check(Z3.mk_bv2int(contextPtr, a.ast, isSigned)));\n        }\n        function Int2BV(a, bits) {\n            if (isArith(a)) {\n                (0, utils_1.assert)(isInt(a), 'parameter must be an integer');\n            }\n            else {\n                (0, utils_1.assert)(typeof a !== 'number' || Number.isSafeInteger(a), 'parameter must not have decimal places');\n                a = Int.val(a);\n            }\n            return new BitVecImpl(check(Z3.mk_int2bv(contextPtr, bits, a.ast)));\n        }\n        function Concat(...bitvecs) {\n            _assertContext(...bitvecs);\n            return bitvecs.reduce((prev, curr) => new BitVecImpl(check(Z3.mk_concat(contextPtr, prev.ast, curr.ast))));\n        }\n        function Cond(probe, onTrue, onFalse) {\n            _assertContext(probe, onTrue, onFalse);\n            return new TacticImpl(check(Z3.tactic_cond(contextPtr, probe.ptr, onTrue.ptr, onFalse.ptr)));\n        }\n        function LT(a, b) {\n            return new BoolImpl(check(Z3.mk_lt(contextPtr, a.ast, a.sort.cast(b).ast)));\n        }\n        function GT(a, b) {\n            return new BoolImpl(check(Z3.mk_gt(contextPtr, a.ast, a.sort.cast(b).ast)));\n        }\n        function LE(a, b) {\n            return new BoolImpl(check(Z3.mk_le(contextPtr, a.ast, a.sort.cast(b).ast)));\n        }\n        function GE(a, b) {\n            return new BoolImpl(check(Z3.mk_ge(contextPtr, a.ast, a.sort.cast(b).ast)));\n        }\n        function ULT(a, b) {\n            return new BoolImpl(check(Z3.mk_bvult(contextPtr, a.ast, a.sort.cast(b).ast)));\n        }\n        function UGT(a, b) {\n            return new BoolImpl(check(Z3.mk_bvugt(contextPtr, a.ast, a.sort.cast(b).ast)));\n        }\n        function ULE(a, b) {\n            return new BoolImpl(check(Z3.mk_bvule(contextPtr, a.ast, a.sort.cast(b).ast)));\n        }\n        function UGE(a, b) {\n            return new BoolImpl(check(Z3.mk_bvuge(contextPtr, a.ast, a.sort.cast(b).ast)));\n        }\n        function SLT(a, b) {\n            return new BoolImpl(check(Z3.mk_bvslt(contextPtr, a.ast, a.sort.cast(b).ast)));\n        }\n        function SGT(a, b) {\n            return new BoolImpl(check(Z3.mk_bvsgt(contextPtr, a.ast, a.sort.cast(b).ast)));\n        }\n        function SLE(a, b) {\n            return new BoolImpl(check(Z3.mk_bvsle(contextPtr, a.ast, a.sort.cast(b).ast)));\n        }\n        function SGE(a, b) {\n            return new BoolImpl(check(Z3.mk_bvsge(contextPtr, a.ast, a.sort.cast(b).ast)));\n        }\n        function Extract(hi, lo, val) {\n            return new BitVecImpl(check(Z3.mk_extract(contextPtr, hi, lo, val.ast)));\n        }\n        function Select(array, ...indices) {\n            const args = indices.map((arg, i) => array.domain_n(i).cast(arg));\n            if (args.length === 1) {\n                return _toExpr(check(Z3.mk_select(contextPtr, array.ast, args[0].ast)));\n            }\n            const _args = args.map(arg => arg.ast);\n            return _toExpr(check(Z3.mk_select_n(contextPtr, array.ast, _args)));\n        }\n        function Store(array, ...indicesAndValue) {\n            const args = indicesAndValue.map((arg, i) => {\n                if (i === indicesAndValue.length - 1) {\n                    return array.range().cast(arg);\n                }\n                return array.domain_n(i).cast(arg);\n            });\n            if (args.length <= 1) {\n                throw new Error('Array store requires both index and value arguments');\n            }\n            if (args.length === 2) {\n                return _toExpr(check(Z3.mk_store(contextPtr, array.ast, args[0].ast, args[1].ast)));\n            }\n            const _idxs = args.slice(0, args.length - 1).map(arg => arg.ast);\n            return _toExpr(check(Z3.mk_store_n(contextPtr, array.ast, _idxs, args[args.length - 1].ast)));\n        }\n        class AstImpl {\n            constructor(ptr) {\n                this.ptr = ptr;\n                this.ctx = ctx;\n                const myAst = this.ast;\n                Z3.inc_ref(contextPtr, myAst);\n                cleanup.register(this, () => Z3.dec_ref(contextPtr, myAst));\n            }\n            get ast() {\n                return this.ptr;\n            }\n            id() {\n                return Z3.get_ast_id(contextPtr, this.ast);\n            }\n            eqIdentity(other) {\n                _assertContext(other);\n                return check(Z3.is_eq_ast(contextPtr, this.ast, other.ast));\n            }\n            neqIdentity(other) {\n                _assertContext(other);\n                return !this.eqIdentity(other);\n            }\n            sexpr() {\n                return Z3.ast_to_string(contextPtr, this.ast);\n            }\n            hash() {\n                return Z3.get_ast_hash(contextPtr, this.ast);\n            }\n            toString() {\n                return this.sexpr();\n            }\n        }\n        class SolverImpl {\n            constructor(ptr = Z3.mk_solver(contextPtr)) {\n                this.ctx = ctx;\n                let myPtr;\n                if (typeof ptr === 'string') {\n                    myPtr = check(Z3.mk_solver_for_logic(contextPtr, _toSymbol(ptr)));\n                }\n                else {\n                    myPtr = ptr;\n                }\n                this.ptr = myPtr;\n                Z3.solver_inc_ref(contextPtr, myPtr);\n                cleanup.register(this, () => Z3.solver_dec_ref(contextPtr, myPtr));\n            }\n            set(key, value) {\n                Z3.solver_set_params(contextPtr, this.ptr, _toParams(key, value));\n            }\n            push() {\n                Z3.solver_push(contextPtr, this.ptr);\n            }\n            pop(num = 1) {\n                Z3.solver_pop(contextPtr, this.ptr, num);\n            }\n            numScopes() {\n                return Z3.solver_get_num_scopes(contextPtr, this.ptr);\n            }\n            reset() {\n                Z3.solver_reset(contextPtr, this.ptr);\n            }\n            add(...exprs) {\n                _flattenArgs(exprs).forEach(expr => {\n                    _assertContext(expr);\n                    check(Z3.solver_assert(contextPtr, this.ptr, expr.ast));\n                });\n            }\n            addAndTrack(expr, constant) {\n                if (typeof constant === 'string') {\n                    constant = Bool.const(constant);\n                }\n                (0, utils_1.assert)(isConst(constant), 'Provided expression that is not a constant to addAndTrack');\n                check(Z3.solver_assert_and_track(contextPtr, this.ptr, expr.ast, constant.ast));\n            }\n            assertions() {\n                return new AstVectorImpl(check(Z3.solver_get_assertions(contextPtr, this.ptr)));\n            }\n            async check(...exprs) {\n                const assumptions = _flattenArgs(exprs).map(expr => {\n                    _assertContext(expr);\n                    return expr.ast;\n                });\n                const result = await asyncMutex.runExclusive(() => check(Z3.solver_check_assumptions(contextPtr, this.ptr, assumptions)));\n                switch (result) {\n                    case low_level_1.Z3_lbool.Z3_L_FALSE:\n                        return 'unsat';\n                    case low_level_1.Z3_lbool.Z3_L_TRUE:\n                        return 'sat';\n                    case low_level_1.Z3_lbool.Z3_L_UNDEF:\n                        return 'unknown';\n                    default:\n                        (0, utils_1.assertExhaustive)(result);\n                }\n            }\n            model() {\n                return new ModelImpl(check(Z3.solver_get_model(contextPtr, this.ptr)));\n            }\n            toString() {\n                return check(Z3.solver_to_string(contextPtr, this.ptr));\n            }\n            fromString(s) {\n                Z3.solver_from_string(contextPtr, this.ptr, s);\n                throwIfError();\n            }\n        }\n        class OptimizeImpl {\n            constructor(ptr = Z3.mk_optimize(contextPtr)) {\n                this.ctx = ctx;\n                let myPtr;\n                myPtr = ptr;\n                this.ptr = myPtr;\n                Z3.optimize_inc_ref(contextPtr, myPtr);\n                cleanup.register(this, () => Z3.optimize_dec_ref(contextPtr, myPtr));\n            }\n            set(key, value) {\n                Z3.optimize_set_params(contextPtr, this.ptr, _toParams(key, value));\n            }\n            push() {\n                Z3.optimize_push(contextPtr, this.ptr);\n            }\n            pop() {\n                Z3.optimize_pop(contextPtr, this.ptr);\n            }\n            add(...exprs) {\n                _flattenArgs(exprs).forEach(expr => {\n                    _assertContext(expr);\n                    check(Z3.optimize_assert(contextPtr, this.ptr, expr.ast));\n                });\n            }\n            addSoft(expr, weight, id = \"\") {\n                if (isCoercibleRational(weight)) {\n                    weight = `${weight.numerator}/${weight.denominator}`;\n                }\n                check(Z3.optimize_assert_soft(contextPtr, this.ptr, expr.ast, weight.toString(), _toSymbol(id)));\n            }\n            addAndTrack(expr, constant) {\n                if (typeof constant === 'string') {\n                    constant = Bool.const(constant);\n                }\n                (0, utils_1.assert)(isConst(constant), 'Provided expression that is not a constant to addAndTrack');\n                check(Z3.optimize_assert_and_track(contextPtr, this.ptr, expr.ast, constant.ast));\n            }\n            assertions() {\n                return new AstVectorImpl(check(Z3.optimize_get_assertions(contextPtr, this.ptr)));\n            }\n            maximize(expr) {\n                check(Z3.optimize_maximize(contextPtr, this.ptr, expr.ast));\n            }\n            minimize(expr) {\n                check(Z3.optimize_minimize(contextPtr, this.ptr, expr.ast));\n            }\n            async check(...exprs) {\n                const assumptions = _flattenArgs(exprs).map(expr => {\n                    _assertContext(expr);\n                    return expr.ast;\n                });\n                const result = await asyncMutex.runExclusive(() => check(Z3.optimize_check(contextPtr, this.ptr, assumptions)));\n                switch (result) {\n                    case low_level_1.Z3_lbool.Z3_L_FALSE:\n                        return 'unsat';\n                    case low_level_1.Z3_lbool.Z3_L_TRUE:\n                        return 'sat';\n                    case low_level_1.Z3_lbool.Z3_L_UNDEF:\n                        return 'unknown';\n                    default:\n                        (0, utils_1.assertExhaustive)(result);\n                }\n            }\n            model() {\n                return new ModelImpl(check(Z3.optimize_get_model(contextPtr, this.ptr)));\n            }\n            toString() {\n                return check(Z3.optimize_to_string(contextPtr, this.ptr));\n            }\n            fromString(s) {\n                Z3.optimize_from_string(contextPtr, this.ptr, s);\n                throwIfError();\n            }\n        }\n        class ModelImpl {\n            constructor(ptr = Z3.mk_model(contextPtr)) {\n                this.ptr = ptr;\n                this.ctx = ctx;\n                Z3.model_inc_ref(contextPtr, ptr);\n                cleanup.register(this, () => Z3.model_dec_ref(contextPtr, ptr));\n            }\n            length() {\n                return Z3.model_get_num_consts(contextPtr, this.ptr) + Z3.model_get_num_funcs(contextPtr, this.ptr);\n            }\n            [Symbol.iterator]() {\n                return this.values();\n            }\n            *entries() {\n                const length = this.length();\n                for (let i = 0; i < length; i++) {\n                    yield [i, this.get(i)];\n                }\n            }\n            *keys() {\n                for (const [key] of this.entries()) {\n                    yield key;\n                }\n            }\n            *values() {\n                for (const [, value] of this.entries()) {\n                    yield value;\n                }\n            }\n            decls() {\n                return [...this.values()];\n            }\n            sexpr() {\n                return check(Z3.model_to_string(contextPtr, this.ptr));\n            }\n            toString() {\n                return this.sexpr();\n            }\n            eval(expr, modelCompletion = false) {\n                _assertContext(expr);\n                const r = check(Z3.model_eval(contextPtr, this.ptr, expr.ast, modelCompletion));\n                if (r === null) {\n                    throw new types_1.Z3Error('Failed to evaluate expression in the model');\n                }\n                return _toExpr(r);\n            }\n            get(i, to) {\n                (0, utils_1.assert)(to === undefined || typeof i === 'number');\n                if (typeof i === 'number') {\n                    const length = this.length();\n                    if (i >= length) {\n                        throw new RangeError(`expected index ${i} to be less than length ${length}`);\n                    }\n                    if (to === undefined) {\n                        const numConsts = check(Z3.model_get_num_consts(contextPtr, this.ptr));\n                        if (i < numConsts) {\n                            return new FuncDeclImpl(check(Z3.model_get_const_decl(contextPtr, this.ptr, i)));\n                        }\n                        else {\n                            return new FuncDeclImpl(check(Z3.model_get_func_decl(contextPtr, this.ptr, i - numConsts)));\n                        }\n                    }\n                    if (to < 0) {\n                        to += length;\n                    }\n                    if (to >= length) {\n                        throw new RangeError(`expected index ${to} to be less than length ${length}`);\n                    }\n                    const result = [];\n                    for (let j = i; j < to; j++) {\n                        result.push(this.get(j));\n                    }\n                    return result;\n                }\n                else if (isFuncDecl(i) || (isExpr(i) && isConst(i))) {\n                    const result = this.getInterp(i);\n                    (0, utils_1.assert)(result !== null);\n                    return result;\n                }\n                else if (isSort(i)) {\n                    return this.getUniverse(i);\n                }\n                (0, utils_1.assert)(false, 'Number, declaration or constant expected');\n            }\n            updateValue(decl, a) {\n                _assertContext(decl);\n                _assertContext(a);\n                if (isExpr(decl)) {\n                    decl = decl.decl();\n                }\n                if (isFuncDecl(decl) && decl.arity() !== 0 && isFuncInterp(a)) {\n                    const funcInterp = this.addFuncInterp(decl, a.elseValue());\n                    for (let i = 0; i < a.numEntries(); i++) {\n                        const e = a.entry(i);\n                        const n = e.numArgs();\n                        const args = __webpack_require__.g.Array(n).map((_, i) => e.argValue(i));\n                        funcInterp.addEntry(args, e.value());\n                    }\n                    return;\n                }\n                if (!isFuncDecl(decl) || decl.arity() !== 0) {\n                    throw new types_1.Z3Error('Expecting 0-ary function or constant expression');\n                }\n                if (!isAst(a)) {\n                    throw new types_1.Z3Error('Only func declarations can be assigned to func interpretations');\n                }\n                check(Z3.add_const_interp(contextPtr, this.ptr, decl.ptr, a.ast));\n            }\n            addFuncInterp(decl, defaultValue) {\n                const fi = check(Z3.add_func_interp(contextPtr, this.ptr, decl.ptr, decl.range().cast(defaultValue).ptr));\n                return new FuncInterpImpl(fi);\n            }\n            getInterp(expr) {\n                (0, utils_1.assert)(isFuncDecl(expr) || isConst(expr), 'Declaration expected');\n                if (isConst(expr)) {\n                    (0, utils_1.assert)(isExpr(expr));\n                    expr = expr.decl();\n                }\n                (0, utils_1.assert)(isFuncDecl(expr));\n                if (expr.arity() === 0) {\n                    const result = check(Z3.model_get_const_interp(contextPtr, this.ptr, expr.ptr));\n                    if (result === null) {\n                        return null;\n                    }\n                    return _toExpr(result);\n                }\n                else {\n                    const interp = check(Z3.model_get_func_interp(contextPtr, this.ptr, expr.ptr));\n                    if (interp === null) {\n                        return null;\n                    }\n                    return new FuncInterpImpl(interp);\n                }\n            }\n            getUniverse(sort) {\n                _assertContext(sort);\n                return new AstVectorImpl(check(Z3.model_get_sort_universe(contextPtr, this.ptr, sort.ptr)));\n            }\n        }\n        class FuncEntryImpl {\n            constructor(ptr) {\n                this.ptr = ptr;\n                this.ctx = ctx;\n                Z3.func_entry_inc_ref(contextPtr, ptr);\n                cleanup.register(this, () => Z3.func_entry_dec_ref(contextPtr, ptr));\n            }\n            numArgs() {\n                return check(Z3.func_entry_get_num_args(contextPtr, this.ptr));\n            }\n            argValue(i) {\n                return _toExpr(check(Z3.func_entry_get_arg(contextPtr, this.ptr, i)));\n            }\n            value() {\n                return _toExpr(check(Z3.func_entry_get_value(contextPtr, this.ptr)));\n            }\n        }\n        class FuncInterpImpl {\n            constructor(ptr) {\n                this.ptr = ptr;\n                this.ctx = ctx;\n                Z3.func_interp_inc_ref(contextPtr, ptr);\n                cleanup.register(this, () => Z3.func_interp_dec_ref(contextPtr, ptr));\n            }\n            elseValue() {\n                return _toExpr(check(Z3.func_interp_get_else(contextPtr, this.ptr)));\n            }\n            numEntries() {\n                return check(Z3.func_interp_get_num_entries(contextPtr, this.ptr));\n            }\n            arity() {\n                return check(Z3.func_interp_get_arity(contextPtr, this.ptr));\n            }\n            entry(i) {\n                return new FuncEntryImpl(check(Z3.func_interp_get_entry(contextPtr, this.ptr, i)));\n            }\n            addEntry(args, value) {\n                const argsVec = new AstVectorImpl();\n                for (const arg of args) {\n                    argsVec.push(arg);\n                }\n                _assertContext(argsVec);\n                _assertContext(value);\n                (0, utils_1.assert)(this.arity() === argsVec.length(), \"Number of arguments in entry doesn't match function arity\");\n                check(Z3.func_interp_add_entry(contextPtr, this.ptr, argsVec.ptr, value.ptr));\n            }\n        }\n        class SortImpl extends AstImpl {\n            get ast() {\n                return Z3.sort_to_ast(contextPtr, this.ptr);\n            }\n            kind() {\n                return Z3.get_sort_kind(contextPtr, this.ptr);\n            }\n            subsort(other) {\n                _assertContext(other);\n                return false;\n            }\n            cast(expr) {\n                _assertContext(expr);\n                (0, utils_1.assert)(expr.sort.eqIdentity(expr.sort), 'Sort mismatch');\n                return expr;\n            }\n            name() {\n                return _fromSymbol(Z3.get_sort_name(contextPtr, this.ptr));\n            }\n            eqIdentity(other) {\n                _assertContext(other);\n                return check(Z3.is_eq_sort(contextPtr, this.ptr, other.ptr));\n            }\n            neqIdentity(other) {\n                return !this.eqIdentity(other);\n            }\n        }\n        class FuncDeclImpl extends AstImpl {\n            get ast() {\n                return Z3.func_decl_to_ast(contextPtr, this.ptr);\n            }\n            name() {\n                return _fromSymbol(Z3.get_decl_name(contextPtr, this.ptr));\n            }\n            arity() {\n                return Z3.get_arity(contextPtr, this.ptr);\n            }\n            domain(i) {\n                (0, utils_1.assert)(i < this.arity(), 'Index out of bounds');\n                return _toSort(Z3.get_domain(contextPtr, this.ptr, i));\n            }\n            range() {\n                return _toSort(Z3.get_range(contextPtr, this.ptr));\n            }\n            kind() {\n                return Z3.get_decl_kind(contextPtr, this.ptr);\n            }\n            params() {\n                const n = Z3.get_decl_num_parameters(contextPtr, this.ptr);\n                const result = [];\n                for (let i = 0; i < n; i++) {\n                    const kind = check(Z3.get_decl_parameter_kind(contextPtr, this.ptr, i));\n                    switch (kind) {\n                        case low_level_1.Z3_parameter_kind.Z3_PARAMETER_INT:\n                            result.push(check(Z3.get_decl_int_parameter(contextPtr, this.ptr, i)));\n                            break;\n                        case low_level_1.Z3_parameter_kind.Z3_PARAMETER_DOUBLE:\n                            result.push(check(Z3.get_decl_double_parameter(contextPtr, this.ptr, i)));\n                            break;\n                        case low_level_1.Z3_parameter_kind.Z3_PARAMETER_RATIONAL:\n                            result.push(check(Z3.get_decl_rational_parameter(contextPtr, this.ptr, i)));\n                            break;\n                        case low_level_1.Z3_parameter_kind.Z3_PARAMETER_SYMBOL:\n                            result.push(_fromSymbol(check(Z3.get_decl_symbol_parameter(contextPtr, this.ptr, i))));\n                            break;\n                        case low_level_1.Z3_parameter_kind.Z3_PARAMETER_SORT:\n                            result.push(new SortImpl(check(Z3.get_decl_sort_parameter(contextPtr, this.ptr, i))));\n                            break;\n                        case low_level_1.Z3_parameter_kind.Z3_PARAMETER_AST:\n                            result.push(new ExprImpl(check(Z3.get_decl_ast_parameter(contextPtr, this.ptr, i))));\n                            break;\n                        case low_level_1.Z3_parameter_kind.Z3_PARAMETER_FUNC_DECL:\n                            result.push(new FuncDeclImpl(check(Z3.get_decl_func_decl_parameter(contextPtr, this.ptr, i))));\n                            break;\n                        default:\n                            (0, utils_1.assertExhaustive)(kind);\n                    }\n                }\n                return result;\n            }\n            call(...args) {\n                (0, utils_1.assert)(args.length === this.arity(), `Incorrect number of arguments to ${this}`);\n                return _toExpr(check(Z3.mk_app(contextPtr, this.ptr, args.map((arg, i) => {\n                    return this.domain(i).cast(arg).ast;\n                }))));\n            }\n        }\n        class ExprImpl extends AstImpl {\n            get sort() {\n                return _toSort(Z3.get_sort(contextPtr, this.ast));\n            }\n            eq(other) {\n                return new BoolImpl(check(Z3.mk_eq(contextPtr, this.ast, from(other).ast)));\n            }\n            neq(other) {\n                return new BoolImpl(check(Z3.mk_distinct(contextPtr, [this, other].map(expr => from(expr).ast))));\n            }\n            name() {\n                return this.decl().name();\n            }\n            params() {\n                return this.decl().params();\n            }\n            decl() {\n                (0, utils_1.assert)(isApp(this), 'Z3 application expected');\n                return new FuncDeclImpl(check(Z3.get_app_decl(contextPtr, check(Z3.to_app(contextPtr, this.ast)))));\n            }\n            numArgs() {\n                (0, utils_1.assert)(isApp(this), 'Z3 applicaiton expected');\n                return check(Z3.get_app_num_args(contextPtr, check(Z3.to_app(contextPtr, this.ast))));\n            }\n            arg(i) {\n                (0, utils_1.assert)(isApp(this), 'Z3 applicaiton expected');\n                (0, utils_1.assert)(i < this.numArgs(), `Invalid argument index - expected ${i} to be less than ${this.numArgs()}`);\n                return _toExpr(check(Z3.get_app_arg(contextPtr, check(Z3.to_app(contextPtr, this.ast)), i)));\n            }\n            children() {\n                const num_args = this.numArgs();\n                if (isApp(this)) {\n                    const result = [];\n                    for (let i = 0; i < num_args; i++) {\n                        result.push(this.arg(i));\n                    }\n                    return result;\n                }\n                return [];\n            }\n        }\n        class PatternImpl {\n            constructor(ptr) {\n                this.ptr = ptr;\n                this.ctx = ctx;\n                // TODO: implement rest of Pattern\n            }\n        }\n        class BoolSortImpl extends SortImpl {\n            cast(other) {\n                if (typeof other === 'boolean') {\n                    other = Bool.val(other);\n                }\n                (0, utils_1.assert)(isExpr(other), 'true, false or Z3 Boolean expression expected.');\n                (0, utils_1.assert)(this.eqIdentity(other.sort), 'Value cannot be converted into a Z3 Boolean value');\n                return other;\n            }\n            subsort(other) {\n                _assertContext(other.ctx);\n                return other instanceof ArithSortImpl;\n            }\n        }\n        class BoolImpl extends ExprImpl {\n            not() {\n                return Not(this);\n            }\n            and(other) {\n                return And(this, other);\n            }\n            or(other) {\n                return Or(this, other);\n            }\n            xor(other) {\n                return Xor(this, other);\n            }\n            implies(other) {\n                return Implies(this, other);\n            }\n            iff(other) {\n                return Iff(this, other);\n            }\n        }\n        class ProbeImpl {\n            constructor(ptr) {\n                this.ptr = ptr;\n                this.ctx = ctx;\n            }\n        }\n        class TacticImpl {\n            constructor(tactic) {\n                this.ctx = ctx;\n                let myPtr;\n                if (typeof tactic === 'string') {\n                    myPtr = check(Z3.mk_tactic(contextPtr, tactic));\n                }\n                else {\n                    myPtr = tactic;\n                }\n                this.ptr = myPtr;\n                Z3.tactic_inc_ref(contextPtr, myPtr);\n                cleanup.register(this, () => Z3.tactic_dec_ref(contextPtr, myPtr));\n            }\n        }\n        class ArithSortImpl extends SortImpl {\n            cast(other) {\n                const sortTypeStr = isIntSort(this) ? 'IntSort' : 'RealSort';\n                if (isExpr(other)) {\n                    const otherS = other.sort;\n                    if (isArith(other)) {\n                        if (this.eqIdentity(otherS)) {\n                            return other;\n                        }\n                        else if (isIntSort(otherS) && isRealSort(this)) {\n                            return ToReal(other);\n                        }\n                        (0, utils_1.assert)(false, \"Can't cast Real to IntSort without loss\");\n                    }\n                    else if (isBool(other)) {\n                        if (isIntSort(this)) {\n                            return If(other, 1, 0);\n                        }\n                        else {\n                            return ToReal(If(other, 1, 0));\n                        }\n                    }\n                    (0, utils_1.assert)(false, `Can't cast expression to ${sortTypeStr}`);\n                }\n                else {\n                    if (typeof other !== 'boolean') {\n                        if (isIntSort(this)) {\n                            (0, utils_1.assert)(!isCoercibleRational(other), \"Can't cast fraction to IntSort\");\n                            return Int.val(other);\n                        }\n                        return Real.val(other);\n                    }\n                    (0, utils_1.assert)(false, `Can't cast primitive to ${sortTypeStr}`);\n                }\n            }\n        }\n        function Sum(arg0, ...args) {\n            if (arg0 instanceof BitVecImpl) {\n                // Assert only 2\n                if (args.length !== 1) {\n                    throw new Error('BitVec add only supports 2 arguments');\n                }\n                return new BitVecImpl(check(Z3.mk_bvadd(contextPtr, arg0.ast, arg0.sort.cast(args[0]).ast)));\n            }\n            else {\n                (0, utils_1.assert)(arg0 instanceof ArithImpl);\n                return new ArithImpl(check(Z3.mk_add(contextPtr, [arg0.ast].concat(args.map(arg => arg0.sort.cast(arg).ast)))));\n            }\n        }\n        function Sub(arg0, ...args) {\n            if (arg0 instanceof BitVecImpl) {\n                // Assert only 2\n                if (args.length !== 1) {\n                    throw new Error('BitVec sub only supports 2 arguments');\n                }\n                return new BitVecImpl(check(Z3.mk_bvsub(contextPtr, arg0.ast, arg0.sort.cast(args[0]).ast)));\n            }\n            else {\n                (0, utils_1.assert)(arg0 instanceof ArithImpl);\n                return new ArithImpl(check(Z3.mk_sub(contextPtr, [arg0.ast].concat(args.map(arg => arg0.sort.cast(arg).ast)))));\n            }\n        }\n        function Product(arg0, ...args) {\n            if (arg0 instanceof BitVecImpl) {\n                // Assert only 2\n                if (args.length !== 1) {\n                    throw new Error('BitVec mul only supports 2 arguments');\n                }\n                return new BitVecImpl(check(Z3.mk_bvmul(contextPtr, arg0.ast, arg0.sort.cast(args[0]).ast)));\n            }\n            else {\n                (0, utils_1.assert)(arg0 instanceof ArithImpl);\n                return new ArithImpl(check(Z3.mk_mul(contextPtr, [arg0.ast].concat(args.map(arg => arg0.sort.cast(arg).ast)))));\n            }\n        }\n        function Div(arg0, arg1) {\n            if (arg0 instanceof BitVecImpl) {\n                return new BitVecImpl(check(Z3.mk_bvsdiv(contextPtr, arg0.ast, arg0.sort.cast(arg1).ast)));\n            }\n            else {\n                (0, utils_1.assert)(arg0 instanceof ArithImpl);\n                return new ArithImpl(check(Z3.mk_div(contextPtr, arg0.ast, arg0.sort.cast(arg1).ast)));\n            }\n        }\n        function BUDiv(arg0, arg1) {\n            return new BitVecImpl(check(Z3.mk_bvudiv(contextPtr, arg0.ast, arg0.sort.cast(arg1).ast)));\n        }\n        function Neg(a) {\n            if (a instanceof BitVecImpl) {\n                return new BitVecImpl(check(Z3.mk_bvneg(contextPtr, a.ast)));\n            }\n            else {\n                (0, utils_1.assert)(a instanceof ArithImpl);\n                return new ArithImpl(check(Z3.mk_unary_minus(contextPtr, a.ast)));\n            }\n        }\n        function Mod(a, b) {\n            if (a instanceof BitVecImpl) {\n                return new BitVecImpl(check(Z3.mk_bvsrem(contextPtr, a.ast, a.sort.cast(b).ast)));\n            }\n            else {\n                (0, utils_1.assert)(a instanceof ArithImpl);\n                return new ArithImpl(check(Z3.mk_mod(contextPtr, a.ast, a.sort.cast(b).ast)));\n            }\n        }\n        class ArithImpl extends ExprImpl {\n            add(other) {\n                return Sum(this, other);\n            }\n            mul(other) {\n                return Product(this, other);\n            }\n            sub(other) {\n                return Sub(this, other);\n            }\n            pow(exponent) {\n                return new ArithImpl(check(Z3.mk_power(contextPtr, this.ast, this.sort.cast(exponent).ast)));\n            }\n            div(other) {\n                return Div(this, other);\n            }\n            mod(other) {\n                return Mod(this, other);\n            }\n            neg() {\n                return Neg(this);\n            }\n            le(other) {\n                return LE(this, other);\n            }\n            lt(other) {\n                return LT(this, other);\n            }\n            gt(other) {\n                return GT(this, other);\n            }\n            ge(other) {\n                return GE(this, other);\n            }\n        }\n        class IntNumImpl extends ArithImpl {\n            value() {\n                return BigInt(this.asString());\n            }\n            asString() {\n                return Z3.get_numeral_string(contextPtr, this.ast);\n            }\n            asBinary() {\n                return Z3.get_numeral_binary_string(contextPtr, this.ast);\n            }\n        }\n        class RatNumImpl extends ArithImpl {\n            value() {\n                return { numerator: this.numerator().value(), denominator: this.denominator().value() };\n            }\n            numerator() {\n                return new IntNumImpl(Z3.get_numerator(contextPtr, this.ast));\n            }\n            denominator() {\n                return new IntNumImpl(Z3.get_denominator(contextPtr, this.ast));\n            }\n            asNumber() {\n                const { numerator, denominator } = this.value();\n                const div = numerator / denominator;\n                return Number(div) + Number(numerator - div * denominator) / Number(denominator);\n            }\n            asDecimal(prec = Number.parseInt(getParam('precision') ?? FALLBACK_PRECISION.toString())) {\n                return Z3.get_numeral_decimal_string(contextPtr, this.ast, prec);\n            }\n            asString() {\n                return Z3.get_numeral_string(contextPtr, this.ast);\n            }\n        }\n        class BitVecSortImpl extends SortImpl {\n            size() {\n                return Z3.get_bv_sort_size(contextPtr, this.ptr);\n            }\n            subsort(other) {\n                return isBitVecSort(other) && this.size() < other.size();\n            }\n            cast(other) {\n                if (isExpr(other)) {\n                    _assertContext(other);\n                    return other;\n                }\n                (0, utils_1.assert)(!isCoercibleRational(other), \"Can't convert rational to BitVec\");\n                return BitVec.val(other, this.size());\n            }\n        }\n        class BitVecImpl extends ExprImpl {\n            size() {\n                return this.sort.size();\n            }\n            add(other) {\n                return Sum(this, other);\n            }\n            mul(other) {\n                return Product(this, other);\n            }\n            sub(other) {\n                return Sub(this, other);\n            }\n            sdiv(other) {\n                return Div(this, other);\n            }\n            udiv(other) {\n                return BUDiv(this, other);\n            }\n            smod(other) {\n                return Mod(this, other);\n            }\n            urem(other) {\n                return new BitVecImpl(check(Z3.mk_bvurem(contextPtr, this.ast, this.sort.cast(other).ast)));\n            }\n            srem(other) {\n                return new BitVecImpl(check(Z3.mk_bvsrem(contextPtr, this.ast, this.sort.cast(other).ast)));\n            }\n            neg() {\n                return Neg(this);\n            }\n            or(other) {\n                return new BitVecImpl(check(Z3.mk_bvor(contextPtr, this.ast, this.sort.cast(other).ast)));\n            }\n            and(other) {\n                return new BitVecImpl(check(Z3.mk_bvand(contextPtr, this.ast, this.sort.cast(other).ast)));\n            }\n            nand(other) {\n                return new BitVecImpl(check(Z3.mk_bvnand(contextPtr, this.ast, this.sort.cast(other).ast)));\n            }\n            xor(other) {\n                return new BitVecImpl(check(Z3.mk_bvxor(contextPtr, this.ast, this.sort.cast(other).ast)));\n            }\n            xnor(other) {\n                return new BitVecImpl(check(Z3.mk_bvxnor(contextPtr, this.ast, this.sort.cast(other).ast)));\n            }\n            shr(count) {\n                return new BitVecImpl(check(Z3.mk_bvashr(contextPtr, this.ast, this.sort.cast(count).ast)));\n            }\n            lshr(count) {\n                return new BitVecImpl(check(Z3.mk_bvlshr(contextPtr, this.ast, this.sort.cast(count).ast)));\n            }\n            shl(count) {\n                return new BitVecImpl(check(Z3.mk_bvshl(contextPtr, this.ast, this.sort.cast(count).ast)));\n            }\n            rotateRight(count) {\n                return new BitVecImpl(check(Z3.mk_ext_rotate_right(contextPtr, this.ast, this.sort.cast(count).ast)));\n            }\n            rotateLeft(count) {\n                return new BitVecImpl(check(Z3.mk_ext_rotate_left(contextPtr, this.ast, this.sort.cast(count).ast)));\n            }\n            not() {\n                return new BitVecImpl(check(Z3.mk_bvnot(contextPtr, this.ast)));\n            }\n            extract(high, low) {\n                return Extract(high, low, this);\n            }\n            signExt(count) {\n                return new BitVecImpl(check(Z3.mk_sign_ext(contextPtr, count, this.ast)));\n            }\n            zeroExt(count) {\n                return new BitVecImpl(check(Z3.mk_zero_ext(contextPtr, count, this.ast)));\n            }\n            repeat(count) {\n                return new BitVecImpl(check(Z3.mk_repeat(contextPtr, count, this.ast)));\n            }\n            sle(other) {\n                return SLE(this, other);\n            }\n            ule(other) {\n                return ULE(this, other);\n            }\n            slt(other) {\n                return SLT(this, other);\n            }\n            ult(other) {\n                return ULT(this, other);\n            }\n            sge(other) {\n                return SGE(this, other);\n            }\n            uge(other) {\n                return UGE(this, other);\n            }\n            sgt(other) {\n                return SGT(this, other);\n            }\n            ugt(other) {\n                return UGT(this, other);\n            }\n            redAnd() {\n                return new BitVecImpl(check(Z3.mk_bvredand(contextPtr, this.ast)));\n            }\n            redOr() {\n                return new BitVecImpl(check(Z3.mk_bvredor(contextPtr, this.ast)));\n            }\n            addNoOverflow(other, isSigned) {\n                return new BoolImpl(check(Z3.mk_bvadd_no_overflow(contextPtr, this.ast, this.sort.cast(other).ast, isSigned)));\n            }\n            addNoUnderflow(other) {\n                return new BoolImpl(check(Z3.mk_bvadd_no_underflow(contextPtr, this.ast, this.sort.cast(other).ast)));\n            }\n            subNoOverflow(other) {\n                return new BoolImpl(check(Z3.mk_bvsub_no_overflow(contextPtr, this.ast, this.sort.cast(other).ast)));\n            }\n            subNoUndeflow(other, isSigned) {\n                return new BoolImpl(check(Z3.mk_bvsub_no_underflow(contextPtr, this.ast, this.sort.cast(other).ast, isSigned)));\n            }\n            sdivNoOverflow(other) {\n                return new BoolImpl(check(Z3.mk_bvsdiv_no_overflow(contextPtr, this.ast, this.sort.cast(other).ast)));\n            }\n            mulNoOverflow(other, isSigned) {\n                return new BoolImpl(check(Z3.mk_bvmul_no_overflow(contextPtr, this.ast, this.sort.cast(other).ast, isSigned)));\n            }\n            mulNoUndeflow(other) {\n                return new BoolImpl(check(Z3.mk_bvmul_no_underflow(contextPtr, this.ast, this.sort.cast(other).ast)));\n            }\n            negNoOverflow() {\n                return new BoolImpl(check(Z3.mk_bvneg_no_overflow(contextPtr, this.ast)));\n            }\n        }\n        class BitVecNumImpl extends BitVecImpl {\n            value() {\n                return BigInt(this.asString());\n            }\n            asSignedValue() {\n                let val = this.value();\n                const size = BigInt(this.size());\n                if (val >= 2n ** (size - 1n)) {\n                    val = val - 2n ** size;\n                }\n                if (val < (-2n) ** (size - 1n)) {\n                    val = val + 2n ** size;\n                }\n                return val;\n            }\n            asString() {\n                return Z3.get_numeral_string(contextPtr, this.ast);\n            }\n            asBinaryString() {\n                return Z3.get_numeral_binary_string(contextPtr, this.ast);\n            }\n        }\n        class ArraySortImpl extends SortImpl {\n            domain() {\n                return _toSort(check(Z3.get_array_sort_domain(contextPtr, this.ptr)));\n            }\n            domain_n(i) {\n                return _toSort(check(Z3.get_array_sort_domain_n(contextPtr, this.ptr, i)));\n            }\n            range() {\n                return _toSort(check(Z3.get_array_sort_range(contextPtr, this.ptr)));\n            }\n        }\n        class ArrayImpl extends ExprImpl {\n            domain() {\n                return this.sort.domain();\n            }\n            domain_n(i) {\n                return this.sort.domain_n(i);\n            }\n            range() {\n                return this.sort.range();\n            }\n            select(...indices) {\n                return Select(this, ...indices);\n            }\n            store(...indicesAndValue) {\n                return Store(this, ...indicesAndValue);\n            }\n        }\n        class QuantifierImpl extends ExprImpl {\n            is_forall() {\n                return Z3.is_quantifier_forall(contextPtr, this.ast);\n            }\n            is_exists() {\n                return Z3.is_quantifier_exists(contextPtr, this.ast);\n            }\n            is_lambda() {\n                return Z3.is_lambda(contextPtr, this.ast);\n            }\n            weight() {\n                return Z3.get_quantifier_weight(contextPtr, this.ast);\n            }\n            num_patterns() {\n                return Z3.get_quantifier_num_patterns(contextPtr, this.ast);\n            }\n            pattern(i) {\n                return new PatternImpl(check(Z3.get_quantifier_pattern_ast(contextPtr, this.ast, i)));\n            }\n            num_no_patterns() {\n                return Z3.get_quantifier_num_no_patterns(contextPtr, this.ast);\n            }\n            no_pattern(i) {\n                return _toExpr(check(Z3.get_quantifier_no_pattern_ast(contextPtr, this.ast, i)));\n            }\n            body() {\n                return _toExpr(check(Z3.get_quantifier_body(contextPtr, this.ast)));\n            }\n            num_vars() {\n                return Z3.get_quantifier_num_bound(contextPtr, this.ast);\n            }\n            var_name(i) {\n                return _fromSymbol(Z3.get_quantifier_bound_name(contextPtr, this.ast, i));\n            }\n            var_sort(i) {\n                return _toSort(check(Z3.get_quantifier_bound_sort(contextPtr, this.ast, i)));\n            }\n            children() {\n                return [this.body()];\n            }\n        }\n        class NonLambdaQuantifierImpl extends QuantifierImpl {\n            not() {\n                return Not(this);\n            }\n            and(other) {\n                return And(this, other);\n            }\n            or(other) {\n                return Or(this, other);\n            }\n            xor(other) {\n                return Xor(this, other);\n            }\n            implies(other) {\n                return Implies(this, other);\n            }\n            iff(other) {\n                return Iff(this, other);\n            }\n        }\n        // isBool will return false which is unlike the python API (but like the C API)\n        class LambdaImpl extends QuantifierImpl {\n            domain() {\n                return this.sort.domain();\n            }\n            domain_n(i) {\n                return this.sort.domain_n(i);\n            }\n            range() {\n                return this.sort.range();\n            }\n            select(...indices) {\n                return Select(this, ...indices);\n            }\n            store(...indicesAndValue) {\n                return Store(this, ...indicesAndValue);\n            }\n        }\n        class AstVectorImpl {\n            constructor(ptr = Z3.mk_ast_vector(contextPtr)) {\n                this.ptr = ptr;\n                this.ctx = ctx;\n                Z3.ast_vector_inc_ref(contextPtr, ptr);\n                cleanup.register(this, () => Z3.ast_vector_dec_ref(contextPtr, ptr));\n            }\n            length() {\n                return Z3.ast_vector_size(contextPtr, this.ptr);\n            }\n            [Symbol.iterator]() {\n                return this.values();\n            }\n            *entries() {\n                const length = this.length();\n                for (let i = 0; i < length; i++) {\n                    yield [i, this.get(i)];\n                }\n            }\n            *keys() {\n                for (let [key] of this.entries()) {\n                    yield key;\n                }\n            }\n            *values() {\n                for (let [, value] of this.entries()) {\n                    yield value;\n                }\n            }\n            get(from, to) {\n                const length = this.length();\n                if (from < 0) {\n                    from += length;\n                }\n                if (from >= length) {\n                    throw new RangeError(`expected from index ${from} to be less than length ${length}`);\n                }\n                if (to === undefined) {\n                    return _toAst(check(Z3.ast_vector_get(contextPtr, this.ptr, from)));\n                }\n                if (to < 0) {\n                    to += length;\n                }\n                if (to >= length) {\n                    throw new RangeError(`expected to index ${to} to be less than length ${length}`);\n                }\n                const result = [];\n                for (let i = from; i < to; i++) {\n                    result.push(_toAst(check(Z3.ast_vector_get(contextPtr, this.ptr, i))));\n                }\n                return result;\n            }\n            set(i, v) {\n                _assertContext(v);\n                if (i >= this.length()) {\n                    throw new RangeError(`expected index ${i} to be less than length ${this.length()}`);\n                }\n                check(Z3.ast_vector_set(contextPtr, this.ptr, i, v.ast));\n            }\n            push(v) {\n                _assertContext(v);\n                check(Z3.ast_vector_push(contextPtr, this.ptr, v.ast));\n            }\n            resize(size) {\n                check(Z3.ast_vector_resize(contextPtr, this.ptr, size));\n            }\n            has(v) {\n                _assertContext(v);\n                for (const item of this.values()) {\n                    if (item.eqIdentity(v)) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n            sexpr() {\n                return check(Z3.ast_vector_to_string(contextPtr, this.ptr));\n            }\n        }\n        class AstMapImpl {\n            constructor(ptr = Z3.mk_ast_map(contextPtr)) {\n                this.ptr = ptr;\n                this.ctx = ctx;\n                Z3.ast_map_inc_ref(contextPtr, ptr);\n                cleanup.register(this, () => Z3.ast_map_dec_ref(contextPtr, ptr));\n            }\n            [Symbol.iterator]() {\n                return this.entries();\n            }\n            get size() {\n                return Z3.ast_map_size(contextPtr, this.ptr);\n            }\n            *entries() {\n                for (const key of this.keys()) {\n                    yield [key, this.get(key)];\n                }\n            }\n            keys() {\n                return new AstVectorImpl(Z3.ast_map_keys(contextPtr, this.ptr));\n            }\n            *values() {\n                for (const [_, value] of this.entries()) {\n                    yield value;\n                }\n            }\n            get(key) {\n                return _toAst(check(Z3.ast_map_find(contextPtr, this.ptr, key.ast)));\n            }\n            set(key, value) {\n                check(Z3.ast_map_insert(contextPtr, this.ptr, key.ast, value.ast));\n            }\n            delete(key) {\n                check(Z3.ast_map_erase(contextPtr, this.ptr, key.ast));\n            }\n            clear() {\n                check(Z3.ast_map_reset(contextPtr, this.ptr));\n            }\n            has(key) {\n                return check(Z3.ast_map_contains(contextPtr, this.ptr, key.ast));\n            }\n            sexpr() {\n                return check(Z3.ast_map_to_string(contextPtr, this.ptr));\n            }\n        }\n        function substitute(t, ...substitutions) {\n            _assertContext(t);\n            const from = [];\n            const to = [];\n            for (const [f, t] of substitutions) {\n                _assertContext(f);\n                _assertContext(t);\n                from.push(f.ast);\n                to.push(t.ast);\n            }\n            return _toExpr(check(Z3.substitute(contextPtr, t.ast, from, to)));\n        }\n        function ast_from_string(s) {\n            const sort_names = [];\n            const sorts = [];\n            const decl_names = [];\n            const decls = [];\n            const v = new AstVectorImpl(check(Z3.parse_smtlib2_string(contextPtr, s, sort_names, sorts, decl_names, decls)));\n            if (v.length() !== 1) {\n                throw new Error('Expected exactly one AST. Instead got ' + v.length() + ': ' + v.sexpr());\n            }\n            return v.get(0);\n        }\n        const ctx = {\n            ptr: contextPtr,\n            name,\n            /////////////\n            // Classes //\n            /////////////\n            Solver: SolverImpl,\n            Optimize: OptimizeImpl,\n            Model: ModelImpl,\n            Tactic: TacticImpl,\n            AstVector: AstVectorImpl,\n            AstMap: AstMapImpl,\n            ///////////////\n            // Functions //\n            ///////////////\n            interrupt,\n            isModel,\n            isAst,\n            isSort,\n            isFuncDecl,\n            isFuncInterp,\n            isApp,\n            isConst,\n            isExpr,\n            isVar,\n            isAppOf,\n            isBool,\n            isTrue,\n            isFalse,\n            isAnd,\n            isOr,\n            isImplies,\n            isNot,\n            isEq,\n            isDistinct,\n            isQuantifier,\n            isArith,\n            isArithSort,\n            isInt,\n            isIntVal,\n            isIntSort,\n            isReal,\n            isRealVal,\n            isRealSort,\n            isBitVecSort,\n            isBitVec,\n            isBitVecVal,\n            isArraySort,\n            isArray,\n            isConstArray,\n            isProbe,\n            isTactic,\n            isAstVector,\n            eqIdentity,\n            getVarIndex,\n            from,\n            solve,\n            /////////////\n            // Objects //\n            /////////////\n            Sort,\n            Function,\n            RecFunc,\n            Bool,\n            Int,\n            Real,\n            BitVec,\n            Array,\n            ////////////////\n            // Operations //\n            ////////////////\n            If,\n            Distinct,\n            Const,\n            Consts,\n            FreshConst,\n            Var,\n            Implies,\n            Iff,\n            Eq,\n            Xor,\n            Not,\n            And,\n            Or,\n            ForAll,\n            Exists,\n            Lambda,\n            ToReal,\n            ToInt,\n            IsInt,\n            Sqrt,\n            Cbrt,\n            BV2Int,\n            Int2BV,\n            Concat,\n            Cond,\n            LT,\n            GT,\n            LE,\n            GE,\n            ULT,\n            UGT,\n            ULE,\n            UGE,\n            SLT,\n            SGT,\n            SLE,\n            SGE,\n            Sum,\n            Sub,\n            Product,\n            Div,\n            BUDiv,\n            Neg,\n            Mod,\n            Select,\n            Store,\n            Extract,\n            substitute,\n            simplify,\n            /////////////\n            // Loading //\n            /////////////\n            ast_from_string,\n        };\n        cleanup.register(ctx, () => Z3.del_context(contextPtr));\n        return ctx;\n    }\n    return {\n        enableTrace,\n        disableTrace,\n        getVersion,\n        getVersionString,\n        getFullVersion,\n        openLog,\n        appendLog,\n        getParam,\n        setParam,\n        resetParams,\n        Context: createContext,\n    };\n}\nexports.createApi = createApi;\n\n\n//# sourceURL=webpack://EntryPoint/./node_modules/z3-solver/build/high-level/high-level.js?");

/***/ }),

/***/ "./node_modules/z3-solver/build/high-level/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/z3-solver/build/high-level/index.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./high-level */ \"./node_modules/z3-solver/build/high-level/high-level.js\"), exports);\n__exportStar(__webpack_require__(/*! ./types */ \"./node_modules/z3-solver/build/high-level/types.js\"), exports);\n\n\n//# sourceURL=webpack://EntryPoint/./node_modules/z3-solver/build/high-level/index.js?");

/***/ }),

/***/ "./node_modules/z3-solver/build/high-level/types.js":
/*!**********************************************************!*\
  !*** ./node_modules/z3-solver/build/high-level/types.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Z3AssertionError = exports.Z3Error = void 0;\n/**\n * Used to create a Real constant\n *\n * ```typescript\n * const x = from({ numerator: 1, denominator: 3 })\n *\n * x\n * // 1/3\n * isReal(x)\n * // true\n * isRealVal(x)\n * // true\n * x.asNumber()\n * // 0.3333333333333333\n * ```\n * @see {@link Context.from}\n * @category Global\n */\nclass Z3Error extends Error {\n}\nexports.Z3Error = Z3Error;\nclass Z3AssertionError extends Z3Error {\n}\nexports.Z3AssertionError = Z3AssertionError;\n\n\n//# sourceURL=webpack://EntryPoint/./node_modules/z3-solver/build/high-level/types.js?");

/***/ }),

/***/ "./node_modules/z3-solver/build/high-level/utils.js":
/*!**********************************************************!*\
  !*** ./node_modules/z3-solver/build/high-level/utils.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.allSatisfy = exports.assert = exports.assertExhaustive = void 0;\nconst types_1 = __webpack_require__(/*! ./types */ \"./node_modules/z3-solver/build/high-level/types.js\");\nfunction getAllProperties(obj) {\n    const properties = new Set();\n    do {\n        for (const key of Reflect.ownKeys(obj)) {\n            properties.add([obj, key]);\n        }\n    } while ((obj = Reflect.getPrototypeOf(obj)) && obj !== Object.prototype);\n    return properties;\n}\n/**\n * Use to ensure that switches are checked to be exhaustive at compile time\n *\n * @example Basic usage\n * ```typescript\n * enum Something {\n *  left,\n *  right,\n * };\n * const something = getSomething();\n * switch (something) {\n *  case Something.left:\n *    ...\n *  case Something.right:\n *    ...\n *  default:\n *    assertExhaustive(something);\n * }\n * ```\n *\n * @param x - The param on which the switch operates\n */\nfunction assertExhaustive(x) {\n    throw new Error('Unexpected code execution detected, should be caught at compile time');\n}\nexports.assertExhaustive = assertExhaustive;\nfunction assert(condition, reason) {\n    if (!condition) {\n        throw new types_1.Z3AssertionError(reason ?? 'Assertion failed');\n    }\n}\nexports.assert = assert;\n/**\n * Check the all elements of a `collection` satisfy the `premise`.\n * If any of the items fail the `premise`, returns false;\n * @returns null if the `collection` is empty, boolean otherwise\n */\nfunction allSatisfy(collection, premise) {\n    let hasItems = false;\n    for (const arg of collection) {\n        hasItems = true;\n        if (!premise(arg)) {\n            return false;\n        }\n    }\n    return hasItems === true ? true : null;\n}\nexports.allSatisfy = allSatisfy;\n\n\n//# sourceURL=webpack://EntryPoint/./node_modules/z3-solver/build/high-level/utils.js?");

/***/ }),

/***/ "./node_modules/z3-solver/build/low-level/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/z3-solver/build/low-level/index.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./types.__GENERATED__ */ \"./node_modules/z3-solver/build/low-level/types.__GENERATED__.js\"), exports);\n__exportStar(__webpack_require__(/*! ./wrapper.__GENERATED__ */ \"./node_modules/z3-solver/build/low-level/wrapper.__GENERATED__.js\"), exports);\n\n\n//# sourceURL=webpack://EntryPoint/./node_modules/z3-solver/build/low-level/index.js?");

/***/ }),

/***/ "./node_modules/z3-solver/build/low-level/types.__GENERATED__.js":
/*!***********************************************************************!*\
  !*** ./node_modules/z3-solver/build/low-level/types.__GENERATED__.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n// THIS FILE IS AUTOMATICALLY GENERATED BY make-ts-wrapper.ts\n// DO NOT EDIT IT BY HAND\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Z3_goal_prec = exports.Z3_error_code = exports.Z3_ast_print_mode = exports.Z3_param_kind = exports.Z3_decl_kind = exports.Z3_ast_kind = exports.Z3_sort_kind = exports.Z3_parameter_kind = exports.Z3_symbol_kind = exports.Z3_lbool = void 0;\nvar Z3_lbool;\n(function (Z3_lbool) {\n    Z3_lbool[Z3_lbool[\"Z3_L_FALSE\"] = -1] = \"Z3_L_FALSE\";\n    Z3_lbool[Z3_lbool[\"Z3_L_UNDEF\"] = 0] = \"Z3_L_UNDEF\";\n    Z3_lbool[Z3_lbool[\"Z3_L_TRUE\"] = 1] = \"Z3_L_TRUE\";\n})(Z3_lbool = exports.Z3_lbool || (exports.Z3_lbool = {}));\nvar Z3_symbol_kind;\n(function (Z3_symbol_kind) {\n    Z3_symbol_kind[Z3_symbol_kind[\"Z3_INT_SYMBOL\"] = 0] = \"Z3_INT_SYMBOL\";\n    Z3_symbol_kind[Z3_symbol_kind[\"Z3_STRING_SYMBOL\"] = 1] = \"Z3_STRING_SYMBOL\";\n})(Z3_symbol_kind = exports.Z3_symbol_kind || (exports.Z3_symbol_kind = {}));\nvar Z3_parameter_kind;\n(function (Z3_parameter_kind) {\n    Z3_parameter_kind[Z3_parameter_kind[\"Z3_PARAMETER_INT\"] = 0] = \"Z3_PARAMETER_INT\";\n    Z3_parameter_kind[Z3_parameter_kind[\"Z3_PARAMETER_DOUBLE\"] = 1] = \"Z3_PARAMETER_DOUBLE\";\n    Z3_parameter_kind[Z3_parameter_kind[\"Z3_PARAMETER_RATIONAL\"] = 2] = \"Z3_PARAMETER_RATIONAL\";\n    Z3_parameter_kind[Z3_parameter_kind[\"Z3_PARAMETER_SYMBOL\"] = 3] = \"Z3_PARAMETER_SYMBOL\";\n    Z3_parameter_kind[Z3_parameter_kind[\"Z3_PARAMETER_SORT\"] = 4] = \"Z3_PARAMETER_SORT\";\n    Z3_parameter_kind[Z3_parameter_kind[\"Z3_PARAMETER_AST\"] = 5] = \"Z3_PARAMETER_AST\";\n    Z3_parameter_kind[Z3_parameter_kind[\"Z3_PARAMETER_FUNC_DECL\"] = 6] = \"Z3_PARAMETER_FUNC_DECL\";\n})(Z3_parameter_kind = exports.Z3_parameter_kind || (exports.Z3_parameter_kind = {}));\nvar Z3_sort_kind;\n(function (Z3_sort_kind) {\n    Z3_sort_kind[Z3_sort_kind[\"Z3_UNINTERPRETED_SORT\"] = 0] = \"Z3_UNINTERPRETED_SORT\";\n    Z3_sort_kind[Z3_sort_kind[\"Z3_BOOL_SORT\"] = 1] = \"Z3_BOOL_SORT\";\n    Z3_sort_kind[Z3_sort_kind[\"Z3_INT_SORT\"] = 2] = \"Z3_INT_SORT\";\n    Z3_sort_kind[Z3_sort_kind[\"Z3_REAL_SORT\"] = 3] = \"Z3_REAL_SORT\";\n    Z3_sort_kind[Z3_sort_kind[\"Z3_BV_SORT\"] = 4] = \"Z3_BV_SORT\";\n    Z3_sort_kind[Z3_sort_kind[\"Z3_ARRAY_SORT\"] = 5] = \"Z3_ARRAY_SORT\";\n    Z3_sort_kind[Z3_sort_kind[\"Z3_DATATYPE_SORT\"] = 6] = \"Z3_DATATYPE_SORT\";\n    Z3_sort_kind[Z3_sort_kind[\"Z3_RELATION_SORT\"] = 7] = \"Z3_RELATION_SORT\";\n    Z3_sort_kind[Z3_sort_kind[\"Z3_FINITE_DOMAIN_SORT\"] = 8] = \"Z3_FINITE_DOMAIN_SORT\";\n    Z3_sort_kind[Z3_sort_kind[\"Z3_FLOATING_POINT_SORT\"] = 9] = \"Z3_FLOATING_POINT_SORT\";\n    Z3_sort_kind[Z3_sort_kind[\"Z3_ROUNDING_MODE_SORT\"] = 10] = \"Z3_ROUNDING_MODE_SORT\";\n    Z3_sort_kind[Z3_sort_kind[\"Z3_SEQ_SORT\"] = 11] = \"Z3_SEQ_SORT\";\n    Z3_sort_kind[Z3_sort_kind[\"Z3_RE_SORT\"] = 12] = \"Z3_RE_SORT\";\n    Z3_sort_kind[Z3_sort_kind[\"Z3_CHAR_SORT\"] = 13] = \"Z3_CHAR_SORT\";\n    Z3_sort_kind[Z3_sort_kind[\"Z3_TYPE_VAR\"] = 14] = \"Z3_TYPE_VAR\";\n    Z3_sort_kind[Z3_sort_kind[\"Z3_UNKNOWN_SORT\"] = 1000] = \"Z3_UNKNOWN_SORT\";\n})(Z3_sort_kind = exports.Z3_sort_kind || (exports.Z3_sort_kind = {}));\nvar Z3_ast_kind;\n(function (Z3_ast_kind) {\n    Z3_ast_kind[Z3_ast_kind[\"Z3_NUMERAL_AST\"] = 0] = \"Z3_NUMERAL_AST\";\n    Z3_ast_kind[Z3_ast_kind[\"Z3_APP_AST\"] = 1] = \"Z3_APP_AST\";\n    Z3_ast_kind[Z3_ast_kind[\"Z3_VAR_AST\"] = 2] = \"Z3_VAR_AST\";\n    Z3_ast_kind[Z3_ast_kind[\"Z3_QUANTIFIER_AST\"] = 3] = \"Z3_QUANTIFIER_AST\";\n    Z3_ast_kind[Z3_ast_kind[\"Z3_SORT_AST\"] = 4] = \"Z3_SORT_AST\";\n    Z3_ast_kind[Z3_ast_kind[\"Z3_FUNC_DECL_AST\"] = 5] = \"Z3_FUNC_DECL_AST\";\n    Z3_ast_kind[Z3_ast_kind[\"Z3_UNKNOWN_AST\"] = 1000] = \"Z3_UNKNOWN_AST\";\n})(Z3_ast_kind = exports.Z3_ast_kind || (exports.Z3_ast_kind = {}));\nvar Z3_decl_kind;\n(function (Z3_decl_kind) {\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_TRUE\"] = 256] = \"Z3_OP_TRUE\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FALSE\"] = 257] = \"Z3_OP_FALSE\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_EQ\"] = 258] = \"Z3_OP_EQ\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_DISTINCT\"] = 259] = \"Z3_OP_DISTINCT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_ITE\"] = 260] = \"Z3_OP_ITE\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_AND\"] = 261] = \"Z3_OP_AND\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_OR\"] = 262] = \"Z3_OP_OR\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_IFF\"] = 263] = \"Z3_OP_IFF\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_XOR\"] = 264] = \"Z3_OP_XOR\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_NOT\"] = 265] = \"Z3_OP_NOT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_IMPLIES\"] = 266] = \"Z3_OP_IMPLIES\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_OEQ\"] = 267] = \"Z3_OP_OEQ\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_ANUM\"] = 512] = \"Z3_OP_ANUM\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_AGNUM\"] = 513] = \"Z3_OP_AGNUM\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_LE\"] = 514] = \"Z3_OP_LE\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_GE\"] = 515] = \"Z3_OP_GE\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_LT\"] = 516] = \"Z3_OP_LT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_GT\"] = 517] = \"Z3_OP_GT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_ADD\"] = 518] = \"Z3_OP_ADD\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SUB\"] = 519] = \"Z3_OP_SUB\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_UMINUS\"] = 520] = \"Z3_OP_UMINUS\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_MUL\"] = 521] = \"Z3_OP_MUL\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_DIV\"] = 522] = \"Z3_OP_DIV\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_IDIV\"] = 523] = \"Z3_OP_IDIV\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_REM\"] = 524] = \"Z3_OP_REM\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_MOD\"] = 525] = \"Z3_OP_MOD\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_TO_REAL\"] = 526] = \"Z3_OP_TO_REAL\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_TO_INT\"] = 527] = \"Z3_OP_TO_INT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_IS_INT\"] = 528] = \"Z3_OP_IS_INT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_POWER\"] = 529] = \"Z3_OP_POWER\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_STORE\"] = 768] = \"Z3_OP_STORE\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SELECT\"] = 769] = \"Z3_OP_SELECT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_CONST_ARRAY\"] = 770] = \"Z3_OP_CONST_ARRAY\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_ARRAY_MAP\"] = 771] = \"Z3_OP_ARRAY_MAP\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_ARRAY_DEFAULT\"] = 772] = \"Z3_OP_ARRAY_DEFAULT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SET_UNION\"] = 773] = \"Z3_OP_SET_UNION\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SET_INTERSECT\"] = 774] = \"Z3_OP_SET_INTERSECT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SET_DIFFERENCE\"] = 775] = \"Z3_OP_SET_DIFFERENCE\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SET_COMPLEMENT\"] = 776] = \"Z3_OP_SET_COMPLEMENT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SET_SUBSET\"] = 777] = \"Z3_OP_SET_SUBSET\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_AS_ARRAY\"] = 778] = \"Z3_OP_AS_ARRAY\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_ARRAY_EXT\"] = 779] = \"Z3_OP_ARRAY_EXT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SET_HAS_SIZE\"] = 780] = \"Z3_OP_SET_HAS_SIZE\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SET_CARD\"] = 781] = \"Z3_OP_SET_CARD\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BNUM\"] = 1024] = \"Z3_OP_BNUM\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BIT1\"] = 1025] = \"Z3_OP_BIT1\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BIT0\"] = 1026] = \"Z3_OP_BIT0\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BNEG\"] = 1027] = \"Z3_OP_BNEG\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BADD\"] = 1028] = \"Z3_OP_BADD\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BSUB\"] = 1029] = \"Z3_OP_BSUB\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BMUL\"] = 1030] = \"Z3_OP_BMUL\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BSDIV\"] = 1031] = \"Z3_OP_BSDIV\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BUDIV\"] = 1032] = \"Z3_OP_BUDIV\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BSREM\"] = 1033] = \"Z3_OP_BSREM\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BUREM\"] = 1034] = \"Z3_OP_BUREM\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BSMOD\"] = 1035] = \"Z3_OP_BSMOD\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BSDIV0\"] = 1036] = \"Z3_OP_BSDIV0\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BUDIV0\"] = 1037] = \"Z3_OP_BUDIV0\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BSREM0\"] = 1038] = \"Z3_OP_BSREM0\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BUREM0\"] = 1039] = \"Z3_OP_BUREM0\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BSMOD0\"] = 1040] = \"Z3_OP_BSMOD0\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_ULEQ\"] = 1041] = \"Z3_OP_ULEQ\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SLEQ\"] = 1042] = \"Z3_OP_SLEQ\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_UGEQ\"] = 1043] = \"Z3_OP_UGEQ\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SGEQ\"] = 1044] = \"Z3_OP_SGEQ\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_ULT\"] = 1045] = \"Z3_OP_ULT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SLT\"] = 1046] = \"Z3_OP_SLT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_UGT\"] = 1047] = \"Z3_OP_UGT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SGT\"] = 1048] = \"Z3_OP_SGT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BAND\"] = 1049] = \"Z3_OP_BAND\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BOR\"] = 1050] = \"Z3_OP_BOR\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BNOT\"] = 1051] = \"Z3_OP_BNOT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BXOR\"] = 1052] = \"Z3_OP_BXOR\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BNAND\"] = 1053] = \"Z3_OP_BNAND\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BNOR\"] = 1054] = \"Z3_OP_BNOR\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BXNOR\"] = 1055] = \"Z3_OP_BXNOR\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_CONCAT\"] = 1056] = \"Z3_OP_CONCAT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SIGN_EXT\"] = 1057] = \"Z3_OP_SIGN_EXT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_ZERO_EXT\"] = 1058] = \"Z3_OP_ZERO_EXT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_EXTRACT\"] = 1059] = \"Z3_OP_EXTRACT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_REPEAT\"] = 1060] = \"Z3_OP_REPEAT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BREDOR\"] = 1061] = \"Z3_OP_BREDOR\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BREDAND\"] = 1062] = \"Z3_OP_BREDAND\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BCOMP\"] = 1063] = \"Z3_OP_BCOMP\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BSHL\"] = 1064] = \"Z3_OP_BSHL\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BLSHR\"] = 1065] = \"Z3_OP_BLSHR\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BASHR\"] = 1066] = \"Z3_OP_BASHR\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_ROTATE_LEFT\"] = 1067] = \"Z3_OP_ROTATE_LEFT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_ROTATE_RIGHT\"] = 1068] = \"Z3_OP_ROTATE_RIGHT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_EXT_ROTATE_LEFT\"] = 1069] = \"Z3_OP_EXT_ROTATE_LEFT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_EXT_ROTATE_RIGHT\"] = 1070] = \"Z3_OP_EXT_ROTATE_RIGHT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BIT2BOOL\"] = 1071] = \"Z3_OP_BIT2BOOL\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_INT2BV\"] = 1072] = \"Z3_OP_INT2BV\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BV2INT\"] = 1073] = \"Z3_OP_BV2INT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_CARRY\"] = 1074] = \"Z3_OP_CARRY\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_XOR3\"] = 1075] = \"Z3_OP_XOR3\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BSMUL_NO_OVFL\"] = 1076] = \"Z3_OP_BSMUL_NO_OVFL\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BUMUL_NO_OVFL\"] = 1077] = \"Z3_OP_BUMUL_NO_OVFL\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BSMUL_NO_UDFL\"] = 1078] = \"Z3_OP_BSMUL_NO_UDFL\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BSDIV_I\"] = 1079] = \"Z3_OP_BSDIV_I\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BUDIV_I\"] = 1080] = \"Z3_OP_BUDIV_I\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BSREM_I\"] = 1081] = \"Z3_OP_BSREM_I\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BUREM_I\"] = 1082] = \"Z3_OP_BUREM_I\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_BSMOD_I\"] = 1083] = \"Z3_OP_BSMOD_I\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_UNDEF\"] = 1280] = \"Z3_OP_PR_UNDEF\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_TRUE\"] = 1281] = \"Z3_OP_PR_TRUE\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_ASSERTED\"] = 1282] = \"Z3_OP_PR_ASSERTED\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_GOAL\"] = 1283] = \"Z3_OP_PR_GOAL\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_MODUS_PONENS\"] = 1284] = \"Z3_OP_PR_MODUS_PONENS\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_REFLEXIVITY\"] = 1285] = \"Z3_OP_PR_REFLEXIVITY\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_SYMMETRY\"] = 1286] = \"Z3_OP_PR_SYMMETRY\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_TRANSITIVITY\"] = 1287] = \"Z3_OP_PR_TRANSITIVITY\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_TRANSITIVITY_STAR\"] = 1288] = \"Z3_OP_PR_TRANSITIVITY_STAR\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_MONOTONICITY\"] = 1289] = \"Z3_OP_PR_MONOTONICITY\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_QUANT_INTRO\"] = 1290] = \"Z3_OP_PR_QUANT_INTRO\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_BIND\"] = 1291] = \"Z3_OP_PR_BIND\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_DISTRIBUTIVITY\"] = 1292] = \"Z3_OP_PR_DISTRIBUTIVITY\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_AND_ELIM\"] = 1293] = \"Z3_OP_PR_AND_ELIM\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_NOT_OR_ELIM\"] = 1294] = \"Z3_OP_PR_NOT_OR_ELIM\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_REWRITE\"] = 1295] = \"Z3_OP_PR_REWRITE\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_REWRITE_STAR\"] = 1296] = \"Z3_OP_PR_REWRITE_STAR\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_PULL_QUANT\"] = 1297] = \"Z3_OP_PR_PULL_QUANT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_PUSH_QUANT\"] = 1298] = \"Z3_OP_PR_PUSH_QUANT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_ELIM_UNUSED_VARS\"] = 1299] = \"Z3_OP_PR_ELIM_UNUSED_VARS\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_DER\"] = 1300] = \"Z3_OP_PR_DER\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_QUANT_INST\"] = 1301] = \"Z3_OP_PR_QUANT_INST\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_HYPOTHESIS\"] = 1302] = \"Z3_OP_PR_HYPOTHESIS\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_LEMMA\"] = 1303] = \"Z3_OP_PR_LEMMA\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_UNIT_RESOLUTION\"] = 1304] = \"Z3_OP_PR_UNIT_RESOLUTION\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_IFF_TRUE\"] = 1305] = \"Z3_OP_PR_IFF_TRUE\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_IFF_FALSE\"] = 1306] = \"Z3_OP_PR_IFF_FALSE\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_COMMUTATIVITY\"] = 1307] = \"Z3_OP_PR_COMMUTATIVITY\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_DEF_AXIOM\"] = 1308] = \"Z3_OP_PR_DEF_AXIOM\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_ASSUMPTION_ADD\"] = 1309] = \"Z3_OP_PR_ASSUMPTION_ADD\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_LEMMA_ADD\"] = 1310] = \"Z3_OP_PR_LEMMA_ADD\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_REDUNDANT_DEL\"] = 1311] = \"Z3_OP_PR_REDUNDANT_DEL\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_CLAUSE_TRAIL\"] = 1312] = \"Z3_OP_PR_CLAUSE_TRAIL\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_DEF_INTRO\"] = 1313] = \"Z3_OP_PR_DEF_INTRO\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_APPLY_DEF\"] = 1314] = \"Z3_OP_PR_APPLY_DEF\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_IFF_OEQ\"] = 1315] = \"Z3_OP_PR_IFF_OEQ\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_NNF_POS\"] = 1316] = \"Z3_OP_PR_NNF_POS\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_NNF_NEG\"] = 1317] = \"Z3_OP_PR_NNF_NEG\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_SKOLEMIZE\"] = 1318] = \"Z3_OP_PR_SKOLEMIZE\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_MODUS_PONENS_OEQ\"] = 1319] = \"Z3_OP_PR_MODUS_PONENS_OEQ\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_TH_LEMMA\"] = 1320] = \"Z3_OP_PR_TH_LEMMA\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PR_HYPER_RESOLVE\"] = 1321] = \"Z3_OP_PR_HYPER_RESOLVE\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_RA_STORE\"] = 1536] = \"Z3_OP_RA_STORE\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_RA_EMPTY\"] = 1537] = \"Z3_OP_RA_EMPTY\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_RA_IS_EMPTY\"] = 1538] = \"Z3_OP_RA_IS_EMPTY\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_RA_JOIN\"] = 1539] = \"Z3_OP_RA_JOIN\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_RA_UNION\"] = 1540] = \"Z3_OP_RA_UNION\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_RA_WIDEN\"] = 1541] = \"Z3_OP_RA_WIDEN\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_RA_PROJECT\"] = 1542] = \"Z3_OP_RA_PROJECT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_RA_FILTER\"] = 1543] = \"Z3_OP_RA_FILTER\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_RA_NEGATION_FILTER\"] = 1544] = \"Z3_OP_RA_NEGATION_FILTER\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_RA_RENAME\"] = 1545] = \"Z3_OP_RA_RENAME\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_RA_COMPLEMENT\"] = 1546] = \"Z3_OP_RA_COMPLEMENT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_RA_SELECT\"] = 1547] = \"Z3_OP_RA_SELECT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_RA_CLONE\"] = 1548] = \"Z3_OP_RA_CLONE\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FD_CONSTANT\"] = 1549] = \"Z3_OP_FD_CONSTANT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FD_LT\"] = 1550] = \"Z3_OP_FD_LT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SEQ_UNIT\"] = 1551] = \"Z3_OP_SEQ_UNIT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SEQ_EMPTY\"] = 1552] = \"Z3_OP_SEQ_EMPTY\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SEQ_CONCAT\"] = 1553] = \"Z3_OP_SEQ_CONCAT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SEQ_PREFIX\"] = 1554] = \"Z3_OP_SEQ_PREFIX\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SEQ_SUFFIX\"] = 1555] = \"Z3_OP_SEQ_SUFFIX\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SEQ_CONTAINS\"] = 1556] = \"Z3_OP_SEQ_CONTAINS\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SEQ_EXTRACT\"] = 1557] = \"Z3_OP_SEQ_EXTRACT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SEQ_REPLACE\"] = 1558] = \"Z3_OP_SEQ_REPLACE\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SEQ_REPLACE_RE\"] = 1559] = \"Z3_OP_SEQ_REPLACE_RE\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SEQ_REPLACE_RE_ALL\"] = 1560] = \"Z3_OP_SEQ_REPLACE_RE_ALL\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SEQ_REPLACE_ALL\"] = 1561] = \"Z3_OP_SEQ_REPLACE_ALL\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SEQ_AT\"] = 1562] = \"Z3_OP_SEQ_AT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SEQ_NTH\"] = 1563] = \"Z3_OP_SEQ_NTH\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SEQ_LENGTH\"] = 1564] = \"Z3_OP_SEQ_LENGTH\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SEQ_INDEX\"] = 1565] = \"Z3_OP_SEQ_INDEX\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SEQ_LAST_INDEX\"] = 1566] = \"Z3_OP_SEQ_LAST_INDEX\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SEQ_TO_RE\"] = 1567] = \"Z3_OP_SEQ_TO_RE\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SEQ_IN_RE\"] = 1568] = \"Z3_OP_SEQ_IN_RE\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_STR_TO_INT\"] = 1569] = \"Z3_OP_STR_TO_INT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_INT_TO_STR\"] = 1570] = \"Z3_OP_INT_TO_STR\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_UBV_TO_STR\"] = 1571] = \"Z3_OP_UBV_TO_STR\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SBV_TO_STR\"] = 1572] = \"Z3_OP_SBV_TO_STR\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_STR_TO_CODE\"] = 1573] = \"Z3_OP_STR_TO_CODE\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_STR_FROM_CODE\"] = 1574] = \"Z3_OP_STR_FROM_CODE\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_STRING_LT\"] = 1575] = \"Z3_OP_STRING_LT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_STRING_LE\"] = 1576] = \"Z3_OP_STRING_LE\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_RE_PLUS\"] = 1577] = \"Z3_OP_RE_PLUS\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_RE_STAR\"] = 1578] = \"Z3_OP_RE_STAR\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_RE_OPTION\"] = 1579] = \"Z3_OP_RE_OPTION\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_RE_CONCAT\"] = 1580] = \"Z3_OP_RE_CONCAT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_RE_UNION\"] = 1581] = \"Z3_OP_RE_UNION\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_RE_RANGE\"] = 1582] = \"Z3_OP_RE_RANGE\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_RE_DIFF\"] = 1583] = \"Z3_OP_RE_DIFF\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_RE_INTERSECT\"] = 1584] = \"Z3_OP_RE_INTERSECT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_RE_LOOP\"] = 1585] = \"Z3_OP_RE_LOOP\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_RE_POWER\"] = 1586] = \"Z3_OP_RE_POWER\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_RE_COMPLEMENT\"] = 1587] = \"Z3_OP_RE_COMPLEMENT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_RE_EMPTY_SET\"] = 1588] = \"Z3_OP_RE_EMPTY_SET\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_RE_FULL_SET\"] = 1589] = \"Z3_OP_RE_FULL_SET\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_RE_FULL_CHAR_SET\"] = 1590] = \"Z3_OP_RE_FULL_CHAR_SET\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_RE_OF_PRED\"] = 1591] = \"Z3_OP_RE_OF_PRED\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_RE_REVERSE\"] = 1592] = \"Z3_OP_RE_REVERSE\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_RE_DERIVATIVE\"] = 1593] = \"Z3_OP_RE_DERIVATIVE\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_CHAR_CONST\"] = 1594] = \"Z3_OP_CHAR_CONST\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_CHAR_LE\"] = 1595] = \"Z3_OP_CHAR_LE\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_CHAR_TO_INT\"] = 1596] = \"Z3_OP_CHAR_TO_INT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_CHAR_TO_BV\"] = 1597] = \"Z3_OP_CHAR_TO_BV\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_CHAR_FROM_BV\"] = 1598] = \"Z3_OP_CHAR_FROM_BV\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_CHAR_IS_DIGIT\"] = 1599] = \"Z3_OP_CHAR_IS_DIGIT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_LABEL\"] = 1792] = \"Z3_OP_LABEL\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_LABEL_LIT\"] = 1793] = \"Z3_OP_LABEL_LIT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_DT_CONSTRUCTOR\"] = 2048] = \"Z3_OP_DT_CONSTRUCTOR\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_DT_RECOGNISER\"] = 2049] = \"Z3_OP_DT_RECOGNISER\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_DT_IS\"] = 2050] = \"Z3_OP_DT_IS\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_DT_ACCESSOR\"] = 2051] = \"Z3_OP_DT_ACCESSOR\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_DT_UPDATE_FIELD\"] = 2052] = \"Z3_OP_DT_UPDATE_FIELD\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PB_AT_MOST\"] = 2304] = \"Z3_OP_PB_AT_MOST\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PB_AT_LEAST\"] = 2305] = \"Z3_OP_PB_AT_LEAST\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PB_LE\"] = 2306] = \"Z3_OP_PB_LE\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PB_GE\"] = 2307] = \"Z3_OP_PB_GE\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_PB_EQ\"] = 2308] = \"Z3_OP_PB_EQ\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SPECIAL_RELATION_LO\"] = 40960] = \"Z3_OP_SPECIAL_RELATION_LO\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SPECIAL_RELATION_PO\"] = 40961] = \"Z3_OP_SPECIAL_RELATION_PO\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SPECIAL_RELATION_PLO\"] = 40962] = \"Z3_OP_SPECIAL_RELATION_PLO\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SPECIAL_RELATION_TO\"] = 40963] = \"Z3_OP_SPECIAL_RELATION_TO\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SPECIAL_RELATION_TC\"] = 40964] = \"Z3_OP_SPECIAL_RELATION_TC\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_SPECIAL_RELATION_TRC\"] = 40965] = \"Z3_OP_SPECIAL_RELATION_TRC\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_RM_NEAREST_TIES_TO_EVEN\"] = 45056] = \"Z3_OP_FPA_RM_NEAREST_TIES_TO_EVEN\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_RM_NEAREST_TIES_TO_AWAY\"] = 45057] = \"Z3_OP_FPA_RM_NEAREST_TIES_TO_AWAY\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_RM_TOWARD_POSITIVE\"] = 45058] = \"Z3_OP_FPA_RM_TOWARD_POSITIVE\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_RM_TOWARD_NEGATIVE\"] = 45059] = \"Z3_OP_FPA_RM_TOWARD_NEGATIVE\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_RM_TOWARD_ZERO\"] = 45060] = \"Z3_OP_FPA_RM_TOWARD_ZERO\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_NUM\"] = 45061] = \"Z3_OP_FPA_NUM\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_PLUS_INF\"] = 45062] = \"Z3_OP_FPA_PLUS_INF\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_MINUS_INF\"] = 45063] = \"Z3_OP_FPA_MINUS_INF\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_NAN\"] = 45064] = \"Z3_OP_FPA_NAN\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_PLUS_ZERO\"] = 45065] = \"Z3_OP_FPA_PLUS_ZERO\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_MINUS_ZERO\"] = 45066] = \"Z3_OP_FPA_MINUS_ZERO\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_ADD\"] = 45067] = \"Z3_OP_FPA_ADD\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_SUB\"] = 45068] = \"Z3_OP_FPA_SUB\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_NEG\"] = 45069] = \"Z3_OP_FPA_NEG\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_MUL\"] = 45070] = \"Z3_OP_FPA_MUL\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_DIV\"] = 45071] = \"Z3_OP_FPA_DIV\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_REM\"] = 45072] = \"Z3_OP_FPA_REM\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_ABS\"] = 45073] = \"Z3_OP_FPA_ABS\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_MIN\"] = 45074] = \"Z3_OP_FPA_MIN\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_MAX\"] = 45075] = \"Z3_OP_FPA_MAX\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_FMA\"] = 45076] = \"Z3_OP_FPA_FMA\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_SQRT\"] = 45077] = \"Z3_OP_FPA_SQRT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_ROUND_TO_INTEGRAL\"] = 45078] = \"Z3_OP_FPA_ROUND_TO_INTEGRAL\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_EQ\"] = 45079] = \"Z3_OP_FPA_EQ\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_LT\"] = 45080] = \"Z3_OP_FPA_LT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_GT\"] = 45081] = \"Z3_OP_FPA_GT\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_LE\"] = 45082] = \"Z3_OP_FPA_LE\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_GE\"] = 45083] = \"Z3_OP_FPA_GE\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_IS_NAN\"] = 45084] = \"Z3_OP_FPA_IS_NAN\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_IS_INF\"] = 45085] = \"Z3_OP_FPA_IS_INF\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_IS_ZERO\"] = 45086] = \"Z3_OP_FPA_IS_ZERO\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_IS_NORMAL\"] = 45087] = \"Z3_OP_FPA_IS_NORMAL\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_IS_SUBNORMAL\"] = 45088] = \"Z3_OP_FPA_IS_SUBNORMAL\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_IS_NEGATIVE\"] = 45089] = \"Z3_OP_FPA_IS_NEGATIVE\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_IS_POSITIVE\"] = 45090] = \"Z3_OP_FPA_IS_POSITIVE\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_FP\"] = 45091] = \"Z3_OP_FPA_FP\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_TO_FP\"] = 45092] = \"Z3_OP_FPA_TO_FP\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_TO_FP_UNSIGNED\"] = 45093] = \"Z3_OP_FPA_TO_FP_UNSIGNED\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_TO_UBV\"] = 45094] = \"Z3_OP_FPA_TO_UBV\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_TO_SBV\"] = 45095] = \"Z3_OP_FPA_TO_SBV\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_TO_REAL\"] = 45096] = \"Z3_OP_FPA_TO_REAL\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_TO_IEEE_BV\"] = 45097] = \"Z3_OP_FPA_TO_IEEE_BV\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_BVWRAP\"] = 45098] = \"Z3_OP_FPA_BVWRAP\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_FPA_BV2RM\"] = 45099] = \"Z3_OP_FPA_BV2RM\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_INTERNAL\"] = 45100] = \"Z3_OP_INTERNAL\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_RECURSIVE\"] = 45101] = \"Z3_OP_RECURSIVE\";\n    Z3_decl_kind[Z3_decl_kind[\"Z3_OP_UNINTERPRETED\"] = 45102] = \"Z3_OP_UNINTERPRETED\";\n})(Z3_decl_kind = exports.Z3_decl_kind || (exports.Z3_decl_kind = {}));\nvar Z3_param_kind;\n(function (Z3_param_kind) {\n    Z3_param_kind[Z3_param_kind[\"Z3_PK_UINT\"] = 0] = \"Z3_PK_UINT\";\n    Z3_param_kind[Z3_param_kind[\"Z3_PK_BOOL\"] = 1] = \"Z3_PK_BOOL\";\n    Z3_param_kind[Z3_param_kind[\"Z3_PK_DOUBLE\"] = 2] = \"Z3_PK_DOUBLE\";\n    Z3_param_kind[Z3_param_kind[\"Z3_PK_SYMBOL\"] = 3] = \"Z3_PK_SYMBOL\";\n    Z3_param_kind[Z3_param_kind[\"Z3_PK_STRING\"] = 4] = \"Z3_PK_STRING\";\n    Z3_param_kind[Z3_param_kind[\"Z3_PK_OTHER\"] = 5] = \"Z3_PK_OTHER\";\n    Z3_param_kind[Z3_param_kind[\"Z3_PK_INVALID\"] = 6] = \"Z3_PK_INVALID\";\n})(Z3_param_kind = exports.Z3_param_kind || (exports.Z3_param_kind = {}));\nvar Z3_ast_print_mode;\n(function (Z3_ast_print_mode) {\n    Z3_ast_print_mode[Z3_ast_print_mode[\"Z3_PRINT_SMTLIB_FULL\"] = 0] = \"Z3_PRINT_SMTLIB_FULL\";\n    Z3_ast_print_mode[Z3_ast_print_mode[\"Z3_PRINT_LOW_LEVEL\"] = 1] = \"Z3_PRINT_LOW_LEVEL\";\n    Z3_ast_print_mode[Z3_ast_print_mode[\"Z3_PRINT_SMTLIB2_COMPLIANT\"] = 2] = \"Z3_PRINT_SMTLIB2_COMPLIANT\";\n})(Z3_ast_print_mode = exports.Z3_ast_print_mode || (exports.Z3_ast_print_mode = {}));\nvar Z3_error_code;\n(function (Z3_error_code) {\n    Z3_error_code[Z3_error_code[\"Z3_OK\"] = 0] = \"Z3_OK\";\n    Z3_error_code[Z3_error_code[\"Z3_SORT_ERROR\"] = 1] = \"Z3_SORT_ERROR\";\n    Z3_error_code[Z3_error_code[\"Z3_IOB\"] = 2] = \"Z3_IOB\";\n    Z3_error_code[Z3_error_code[\"Z3_INVALID_ARG\"] = 3] = \"Z3_INVALID_ARG\";\n    Z3_error_code[Z3_error_code[\"Z3_PARSER_ERROR\"] = 4] = \"Z3_PARSER_ERROR\";\n    Z3_error_code[Z3_error_code[\"Z3_NO_PARSER\"] = 5] = \"Z3_NO_PARSER\";\n    Z3_error_code[Z3_error_code[\"Z3_INVALID_PATTERN\"] = 6] = \"Z3_INVALID_PATTERN\";\n    Z3_error_code[Z3_error_code[\"Z3_MEMOUT_FAIL\"] = 7] = \"Z3_MEMOUT_FAIL\";\n    Z3_error_code[Z3_error_code[\"Z3_FILE_ACCESS_ERROR\"] = 8] = \"Z3_FILE_ACCESS_ERROR\";\n    Z3_error_code[Z3_error_code[\"Z3_INTERNAL_FATAL\"] = 9] = \"Z3_INTERNAL_FATAL\";\n    Z3_error_code[Z3_error_code[\"Z3_INVALID_USAGE\"] = 10] = \"Z3_INVALID_USAGE\";\n    Z3_error_code[Z3_error_code[\"Z3_DEC_REF_ERROR\"] = 11] = \"Z3_DEC_REF_ERROR\";\n    Z3_error_code[Z3_error_code[\"Z3_EXCEPTION\"] = 12] = \"Z3_EXCEPTION\";\n})(Z3_error_code = exports.Z3_error_code || (exports.Z3_error_code = {}));\nvar Z3_goal_prec;\n(function (Z3_goal_prec) {\n    Z3_goal_prec[Z3_goal_prec[\"Z3_GOAL_PRECISE\"] = 0] = \"Z3_GOAL_PRECISE\";\n    Z3_goal_prec[Z3_goal_prec[\"Z3_GOAL_UNDER\"] = 1] = \"Z3_GOAL_UNDER\";\n    Z3_goal_prec[Z3_goal_prec[\"Z3_GOAL_OVER\"] = 2] = \"Z3_GOAL_OVER\";\n    Z3_goal_prec[Z3_goal_prec[\"Z3_GOAL_UNDER_OVER\"] = 3] = \"Z3_GOAL_UNDER_OVER\";\n})(Z3_goal_prec = exports.Z3_goal_prec || (exports.Z3_goal_prec = {}));\n\n\n//# sourceURL=webpack://EntryPoint/./node_modules/z3-solver/build/low-level/types.__GENERATED__.js?");

/***/ }),

/***/ "./node_modules/z3-solver/build/low-level/wrapper.__GENERATED__.js":
/*!*************************************************************************!*\
  !*** ./node_modules/z3-solver/build/low-level/wrapper.__GENERATED__.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n// THIS FILE IS AUTOMATICALLY GENERATED BY make-ts-wrapper.ts\n// DO NOT EDIT IT BY HAND\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.init = void 0;\nasync function init(initModule) {\n    let Mod = await initModule();\n    // this works for both signed and unsigned, because JS will wrap for you when constructing the Uint32Array\n    function intArrayToByteArr(ints) {\n        return new Uint8Array(new Uint32Array(ints).buffer);\n    }\n    function boolArrayToByteArr(bools) {\n        return bools.map((b) => (b ? 1 : 0));\n    }\n    function readUintArray(address, count) {\n        return Array.from(new Uint32Array(Mod.HEAPU32.buffer, address, count));\n    }\n    let outAddress = Mod._malloc(24);\n    let outUintArray = new Uint32Array(Mod.HEAPU32.buffer, outAddress, 4);\n    let getOutUint = (i) => outUintArray[i];\n    let outIntArray = new Int32Array(Mod.HEAPU32.buffer, outAddress, 4);\n    let getOutInt = (i) => outIntArray[i];\n    let outUint64Array = new BigUint64Array(Mod.HEAPU32.buffer, outAddress, 2);\n    let getOutUint64 = (i) => outUint64Array[i];\n    let outInt64Array = new BigInt64Array(Mod.HEAPU32.buffer, outAddress, 2);\n    let getOutInt64 = (i) => outInt64Array[i];\n    return {\n        em: Mod,\n        Z3: {\n            mk_context: function (c) {\n                let ctx = Mod._Z3_mk_context(c);\n                Mod._set_noop_error_handler(ctx);\n                return ctx;\n            },\n            mk_context_rc: function (c) {\n                let ctx = Mod._Z3_mk_context_rc(c);\n                Mod._set_noop_error_handler(ctx);\n                return ctx;\n            },\n            global_param_set: function (param_id, param_value) {\n                return Mod.ccall('Z3_global_param_set', 'void', ['string', 'string'], [param_id, param_value]);\n            },\n            global_param_reset_all: Mod._Z3_global_param_reset_all,\n            global_param_get: function (param_id) {\n                let ret = Mod.ccall('Z3_global_param_get', 'boolean', ['string', 'number'], [param_id, outAddress]);\n                if (!ret) {\n                    return null;\n                }\n                return Mod.UTF8ToString(getOutUint(0));\n            },\n            mk_config: Mod._Z3_mk_config,\n            del_config: Mod._Z3_del_config,\n            set_param_value: function (c, param_id, param_value) {\n                return Mod.ccall('Z3_set_param_value', 'void', ['number', 'string', 'string'], [c, param_id, param_value]);\n            },\n            del_context: Mod._Z3_del_context,\n            inc_ref: Mod._Z3_inc_ref,\n            dec_ref: Mod._Z3_dec_ref,\n            update_param_value: function (c, param_id, param_value) {\n                return Mod.ccall('Z3_update_param_value', 'void', ['number', 'string', 'string'], [c, param_id, param_value]);\n            },\n            get_global_param_descrs: Mod._Z3_get_global_param_descrs,\n            interrupt: Mod._Z3_interrupt,\n            enable_concurrent_dec_ref: Mod._Z3_enable_concurrent_dec_ref,\n            mk_params: Mod._Z3_mk_params,\n            params_inc_ref: Mod._Z3_params_inc_ref,\n            params_dec_ref: Mod._Z3_params_dec_ref,\n            params_set_bool: Mod._Z3_params_set_bool,\n            params_set_uint: Mod._Z3_params_set_uint,\n            params_set_double: Mod._Z3_params_set_double,\n            params_set_symbol: Mod._Z3_params_set_symbol,\n            params_to_string: function (c, p) {\n                return Mod.ccall('Z3_params_to_string', 'string', ['number', 'number'], [c, p]);\n            },\n            params_validate: Mod._Z3_params_validate,\n            param_descrs_inc_ref: Mod._Z3_param_descrs_inc_ref,\n            param_descrs_dec_ref: Mod._Z3_param_descrs_dec_ref,\n            param_descrs_get_kind: Mod._Z3_param_descrs_get_kind,\n            param_descrs_size: function (c, p) {\n                let ret = Mod.ccall('Z3_param_descrs_size', 'number', ['number', 'number'], [c, p]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            param_descrs_get_name: Mod._Z3_param_descrs_get_name,\n            param_descrs_get_documentation: function (c, p, s) {\n                return Mod.ccall('Z3_param_descrs_get_documentation', 'string', ['number', 'number', 'number'], [c, p, s]);\n            },\n            param_descrs_to_string: function (c, p) {\n                return Mod.ccall('Z3_param_descrs_to_string', 'string', ['number', 'number'], [c, p]);\n            },\n            mk_int_symbol: Mod._Z3_mk_int_symbol,\n            mk_string_symbol: function (c, s) {\n                return Mod.ccall('Z3_mk_string_symbol', 'number', ['number', 'string'], [c, s]);\n            },\n            mk_uninterpreted_sort: Mod._Z3_mk_uninterpreted_sort,\n            mk_type_variable: Mod._Z3_mk_type_variable,\n            mk_bool_sort: Mod._Z3_mk_bool_sort,\n            mk_int_sort: Mod._Z3_mk_int_sort,\n            mk_real_sort: Mod._Z3_mk_real_sort,\n            mk_bv_sort: Mod._Z3_mk_bv_sort,\n            mk_finite_domain_sort: Mod._Z3_mk_finite_domain_sort,\n            mk_array_sort: Mod._Z3_mk_array_sort,\n            mk_array_sort_n: function (c, domain, range) {\n                return Mod.ccall('Z3_mk_array_sort_n', 'number', ['number', 'number', 'array', 'number'], [\n                    c,\n                    domain.length,\n                    intArrayToByteArr(domain),\n                    range,\n                ]);\n            },\n            mk_tuple_sort: function (c, mk_tuple_name, field_names, field_sorts) {\n                if (field_names.length !== field_sorts.length) {\n                    throw new TypeError(`field_names and field_sorts must be the same length (got ${field_names.length} and {field_sorts.length})`);\n                }\n                let outArray_proj_decl = Mod._malloc(4 * field_names.length);\n                try {\n                    let ret = Mod.ccall('Z3_mk_tuple_sort', 'number', [\n                        'number',\n                        'number',\n                        'number',\n                        'array',\n                        'array',\n                        'number',\n                        'number',\n                    ], [\n                        c,\n                        mk_tuple_name,\n                        field_names.length,\n                        intArrayToByteArr(field_names),\n                        intArrayToByteArr(field_sorts),\n                        outAddress,\n                        outArray_proj_decl,\n                    ]);\n                    return {\n                        rv: ret,\n                        mk_tuple_decl: getOutUint(0),\n                        proj_decl: readUintArray(outArray_proj_decl, field_names.length),\n                    };\n                }\n                finally {\n                    Mod._free(outArray_proj_decl);\n                }\n            },\n            mk_enumeration_sort: function (c, name, enum_names) {\n                let outArray_enum_consts = Mod._malloc(4 * enum_names.length);\n                try {\n                    let outArray_enum_testers = Mod._malloc(4 * enum_names.length);\n                    try {\n                        let ret = Mod.ccall('Z3_mk_enumeration_sort', 'number', ['number', 'number', 'number', 'array', 'number', 'number'], [\n                            c,\n                            name,\n                            enum_names.length,\n                            intArrayToByteArr(enum_names),\n                            outArray_enum_consts,\n                            outArray_enum_testers,\n                        ]);\n                        return {\n                            rv: ret,\n                            enum_consts: readUintArray(outArray_enum_consts, enum_names.length),\n                            enum_testers: readUintArray(outArray_enum_testers, enum_names.length),\n                        };\n                    }\n                    finally {\n                        Mod._free(outArray_enum_testers);\n                    }\n                }\n                finally {\n                    Mod._free(outArray_enum_consts);\n                }\n            },\n            mk_list_sort: function (c, name, elem_sort) {\n                let ret = Mod.ccall('Z3_mk_list_sort', 'number', [\n                    'number',\n                    'number',\n                    'number',\n                    'number',\n                    'number',\n                    'number',\n                    'number',\n                    'number',\n                    'number',\n                ], [\n                    c,\n                    name,\n                    elem_sort,\n                    outAddress,\n                    outAddress + 4,\n                    outAddress + 8,\n                    outAddress + 12,\n                    outAddress + 16,\n                    outAddress + 20,\n                ]);\n                return {\n                    rv: ret,\n                    nil_decl: getOutUint(0),\n                    is_nil_decl: getOutUint(1),\n                    cons_decl: getOutUint(2),\n                    is_cons_decl: getOutUint(3),\n                    head_decl: getOutUint(4),\n                    tail_decl: getOutUint(5),\n                };\n            },\n            mk_constructor: function (c, name, recognizer, field_names, sorts, sort_refs) {\n                if (field_names.length !== sorts.length) {\n                    throw new TypeError(`field_names and sorts must be the same length (got ${field_names.length} and {sorts.length})`);\n                }\n                if (field_names.length !== sort_refs.length) {\n                    throw new TypeError(`field_names and sort_refs must be the same length (got ${field_names.length} and {sort_refs.length})`);\n                }\n                return Mod.ccall('Z3_mk_constructor', 'number', ['number', 'number', 'number', 'number', 'array', 'array', 'array'], [\n                    c,\n                    name,\n                    recognizer,\n                    field_names.length,\n                    intArrayToByteArr(field_names),\n                    intArrayToByteArr(sorts),\n                    intArrayToByteArr(sort_refs),\n                ]);\n            },\n            constructor_num_fields: function (c, constr) {\n                let ret = Mod.ccall('Z3_constructor_num_fields', 'number', ['number', 'number'], [c, constr]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            del_constructor: Mod._Z3_del_constructor,\n            mk_datatype: function (c, name, constructors) {\n                return Mod.ccall('Z3_mk_datatype', 'number', ['number', 'number', 'number', 'array'], [\n                    c,\n                    name,\n                    constructors.length,\n                    intArrayToByteArr(constructors),\n                ]);\n            },\n            mk_datatype_sort: Mod._Z3_mk_datatype_sort,\n            mk_constructor_list: function (c, constructors) {\n                return Mod.ccall('Z3_mk_constructor_list', 'number', ['number', 'number', 'array'], [\n                    c,\n                    constructors.length,\n                    intArrayToByteArr(constructors),\n                ]);\n            },\n            del_constructor_list: Mod._Z3_del_constructor_list,\n            mk_datatypes: function (c, sort_names, constructor_lists) {\n                if (sort_names.length !== constructor_lists.length) {\n                    throw new TypeError(`sort_names and constructor_lists must be the same length (got ${sort_names.length} and {constructor_lists.length})`);\n                }\n                let outArray_sorts = Mod._malloc(4 * sort_names.length);\n                try {\n                    let ret = Mod.ccall('Z3_mk_datatypes', 'void', ['number', 'number', 'array', 'number', 'array'], [\n                        c,\n                        sort_names.length,\n                        intArrayToByteArr(sort_names),\n                        outArray_sorts,\n                        intArrayToByteArr(constructor_lists),\n                    ]);\n                    return readUintArray(outArray_sorts, sort_names.length);\n                }\n                finally {\n                    Mod._free(outArray_sorts);\n                }\n            },\n            query_constructor: function (c, constr, num_fields) {\n                let outArray_accessors = Mod._malloc(4 * num_fields);\n                try {\n                    let ret = Mod.ccall('Z3_query_constructor', 'void', ['number', 'number', 'number', 'number', 'number', 'number'], [\n                        c,\n                        constr,\n                        num_fields,\n                        outAddress,\n                        outAddress + 4,\n                        outArray_accessors,\n                    ]);\n                    return {\n                        constructor: getOutUint(0),\n                        tester: getOutUint(1),\n                        accessors: readUintArray(outArray_accessors, num_fields),\n                    };\n                }\n                finally {\n                    Mod._free(outArray_accessors);\n                }\n            },\n            mk_func_decl: function (c, s, domain, range) {\n                return Mod.ccall('Z3_mk_func_decl', 'number', ['number', 'number', 'number', 'array', 'number'], [\n                    c,\n                    s,\n                    domain.length,\n                    intArrayToByteArr(domain),\n                    range,\n                ]);\n            },\n            mk_app: function (c, d, args) {\n                return Mod.ccall('Z3_mk_app', 'number', ['number', 'number', 'number', 'array'], [c, d, args.length, intArrayToByteArr(args)]);\n            },\n            mk_const: Mod._Z3_mk_const,\n            mk_fresh_func_decl: function (c, prefix, domain, range) {\n                return Mod.ccall('Z3_mk_fresh_func_decl', 'number', ['number', 'string', 'number', 'array', 'number'], [\n                    c,\n                    prefix,\n                    domain.length,\n                    intArrayToByteArr(domain),\n                    range,\n                ]);\n            },\n            mk_fresh_const: function (c, prefix, ty) {\n                return Mod.ccall('Z3_mk_fresh_const', 'number', ['number', 'string', 'number'], [c, prefix, ty]);\n            },\n            mk_rec_func_decl: function (c, s, domain, range) {\n                return Mod.ccall('Z3_mk_rec_func_decl', 'number', ['number', 'number', 'number', 'array', 'number'], [\n                    c,\n                    s,\n                    domain.length,\n                    intArrayToByteArr(domain),\n                    range,\n                ]);\n            },\n            add_rec_def: function (c, f, args, body) {\n                return Mod.ccall('Z3_add_rec_def', 'void', ['number', 'number', 'number', 'array', 'number'], [\n                    c,\n                    f,\n                    args.length,\n                    intArrayToByteArr(args),\n                    body,\n                ]);\n            },\n            mk_true: Mod._Z3_mk_true,\n            mk_false: Mod._Z3_mk_false,\n            mk_eq: Mod._Z3_mk_eq,\n            mk_distinct: function (c, args) {\n                return Mod.ccall('Z3_mk_distinct', 'number', ['number', 'number', 'array'], [c, args.length, intArrayToByteArr(args)]);\n            },\n            mk_not: Mod._Z3_mk_not,\n            mk_ite: Mod._Z3_mk_ite,\n            mk_iff: Mod._Z3_mk_iff,\n            mk_implies: Mod._Z3_mk_implies,\n            mk_xor: Mod._Z3_mk_xor,\n            mk_and: function (c, args) {\n                return Mod.ccall('Z3_mk_and', 'number', ['number', 'number', 'array'], [c, args.length, intArrayToByteArr(args)]);\n            },\n            mk_or: function (c, args) {\n                return Mod.ccall('Z3_mk_or', 'number', ['number', 'number', 'array'], [c, args.length, intArrayToByteArr(args)]);\n            },\n            mk_add: function (c, args) {\n                return Mod.ccall('Z3_mk_add', 'number', ['number', 'number', 'array'], [c, args.length, intArrayToByteArr(args)]);\n            },\n            mk_mul: function (c, args) {\n                return Mod.ccall('Z3_mk_mul', 'number', ['number', 'number', 'array'], [c, args.length, intArrayToByteArr(args)]);\n            },\n            mk_sub: function (c, args) {\n                return Mod.ccall('Z3_mk_sub', 'number', ['number', 'number', 'array'], [c, args.length, intArrayToByteArr(args)]);\n            },\n            mk_unary_minus: Mod._Z3_mk_unary_minus,\n            mk_div: Mod._Z3_mk_div,\n            mk_mod: Mod._Z3_mk_mod,\n            mk_rem: Mod._Z3_mk_rem,\n            mk_power: Mod._Z3_mk_power,\n            mk_lt: Mod._Z3_mk_lt,\n            mk_le: Mod._Z3_mk_le,\n            mk_gt: Mod._Z3_mk_gt,\n            mk_ge: Mod._Z3_mk_ge,\n            mk_divides: Mod._Z3_mk_divides,\n            mk_int2real: Mod._Z3_mk_int2real,\n            mk_real2int: Mod._Z3_mk_real2int,\n            mk_is_int: Mod._Z3_mk_is_int,\n            mk_bvnot: Mod._Z3_mk_bvnot,\n            mk_bvredand: Mod._Z3_mk_bvredand,\n            mk_bvredor: Mod._Z3_mk_bvredor,\n            mk_bvand: Mod._Z3_mk_bvand,\n            mk_bvor: Mod._Z3_mk_bvor,\n            mk_bvxor: Mod._Z3_mk_bvxor,\n            mk_bvnand: Mod._Z3_mk_bvnand,\n            mk_bvnor: Mod._Z3_mk_bvnor,\n            mk_bvxnor: Mod._Z3_mk_bvxnor,\n            mk_bvneg: Mod._Z3_mk_bvneg,\n            mk_bvadd: Mod._Z3_mk_bvadd,\n            mk_bvsub: Mod._Z3_mk_bvsub,\n            mk_bvmul: Mod._Z3_mk_bvmul,\n            mk_bvudiv: Mod._Z3_mk_bvudiv,\n            mk_bvsdiv: Mod._Z3_mk_bvsdiv,\n            mk_bvurem: Mod._Z3_mk_bvurem,\n            mk_bvsrem: Mod._Z3_mk_bvsrem,\n            mk_bvsmod: Mod._Z3_mk_bvsmod,\n            mk_bvult: Mod._Z3_mk_bvult,\n            mk_bvslt: Mod._Z3_mk_bvslt,\n            mk_bvule: Mod._Z3_mk_bvule,\n            mk_bvsle: Mod._Z3_mk_bvsle,\n            mk_bvuge: Mod._Z3_mk_bvuge,\n            mk_bvsge: Mod._Z3_mk_bvsge,\n            mk_bvugt: Mod._Z3_mk_bvugt,\n            mk_bvsgt: Mod._Z3_mk_bvsgt,\n            mk_concat: Mod._Z3_mk_concat,\n            mk_extract: Mod._Z3_mk_extract,\n            mk_sign_ext: Mod._Z3_mk_sign_ext,\n            mk_zero_ext: Mod._Z3_mk_zero_ext,\n            mk_repeat: Mod._Z3_mk_repeat,\n            mk_bit2bool: Mod._Z3_mk_bit2bool,\n            mk_bvshl: Mod._Z3_mk_bvshl,\n            mk_bvlshr: Mod._Z3_mk_bvlshr,\n            mk_bvashr: Mod._Z3_mk_bvashr,\n            mk_rotate_left: Mod._Z3_mk_rotate_left,\n            mk_rotate_right: Mod._Z3_mk_rotate_right,\n            mk_ext_rotate_left: Mod._Z3_mk_ext_rotate_left,\n            mk_ext_rotate_right: Mod._Z3_mk_ext_rotate_right,\n            mk_int2bv: Mod._Z3_mk_int2bv,\n            mk_bv2int: Mod._Z3_mk_bv2int,\n            mk_bvadd_no_overflow: Mod._Z3_mk_bvadd_no_overflow,\n            mk_bvadd_no_underflow: Mod._Z3_mk_bvadd_no_underflow,\n            mk_bvsub_no_overflow: Mod._Z3_mk_bvsub_no_overflow,\n            mk_bvsub_no_underflow: Mod._Z3_mk_bvsub_no_underflow,\n            mk_bvsdiv_no_overflow: Mod._Z3_mk_bvsdiv_no_overflow,\n            mk_bvneg_no_overflow: Mod._Z3_mk_bvneg_no_overflow,\n            mk_bvmul_no_overflow: Mod._Z3_mk_bvmul_no_overflow,\n            mk_bvmul_no_underflow: Mod._Z3_mk_bvmul_no_underflow,\n            mk_select: Mod._Z3_mk_select,\n            mk_select_n: function (c, a, idxs) {\n                return Mod.ccall('Z3_mk_select_n', 'number', ['number', 'number', 'number', 'array'], [c, a, idxs.length, intArrayToByteArr(idxs)]);\n            },\n            mk_store: Mod._Z3_mk_store,\n            mk_store_n: function (c, a, idxs, v) {\n                return Mod.ccall('Z3_mk_store_n', 'number', ['number', 'number', 'number', 'array', 'number'], [c, a, idxs.length, intArrayToByteArr(idxs), v]);\n            },\n            mk_const_array: Mod._Z3_mk_const_array,\n            mk_map: function (c, f, args) {\n                return Mod.ccall('Z3_mk_map', 'number', ['number', 'number', 'number', 'array'], [c, f, args.length, intArrayToByteArr(args)]);\n            },\n            mk_array_default: Mod._Z3_mk_array_default,\n            mk_as_array: Mod._Z3_mk_as_array,\n            mk_set_has_size: Mod._Z3_mk_set_has_size,\n            mk_set_sort: Mod._Z3_mk_set_sort,\n            mk_empty_set: Mod._Z3_mk_empty_set,\n            mk_full_set: Mod._Z3_mk_full_set,\n            mk_set_add: Mod._Z3_mk_set_add,\n            mk_set_del: Mod._Z3_mk_set_del,\n            mk_set_union: function (c, args) {\n                return Mod.ccall('Z3_mk_set_union', 'number', ['number', 'number', 'array'], [c, args.length, intArrayToByteArr(args)]);\n            },\n            mk_set_intersect: function (c, args) {\n                return Mod.ccall('Z3_mk_set_intersect', 'number', ['number', 'number', 'array'], [c, args.length, intArrayToByteArr(args)]);\n            },\n            mk_set_difference: Mod._Z3_mk_set_difference,\n            mk_set_complement: Mod._Z3_mk_set_complement,\n            mk_set_member: Mod._Z3_mk_set_member,\n            mk_set_subset: Mod._Z3_mk_set_subset,\n            mk_array_ext: Mod._Z3_mk_array_ext,\n            mk_numeral: function (c, numeral, ty) {\n                return Mod.ccall('Z3_mk_numeral', 'number', ['number', 'string', 'number'], [c, numeral, ty]);\n            },\n            mk_real: Mod._Z3_mk_real,\n            mk_real_int64: Mod._Z3_mk_real_int64,\n            mk_int: Mod._Z3_mk_int,\n            mk_unsigned_int: Mod._Z3_mk_unsigned_int,\n            mk_int64: Mod._Z3_mk_int64,\n            mk_unsigned_int64: Mod._Z3_mk_unsigned_int64,\n            mk_bv_numeral: function (c, bits) {\n                return Mod.ccall('Z3_mk_bv_numeral', 'number', ['number', 'number', 'array'], [c, bits.length, boolArrayToByteArr(bits)]);\n            },\n            mk_seq_sort: Mod._Z3_mk_seq_sort,\n            is_seq_sort: function (c, s) {\n                return Mod.ccall('Z3_is_seq_sort', 'boolean', ['number', 'number'], [c, s]);\n            },\n            get_seq_sort_basis: Mod._Z3_get_seq_sort_basis,\n            mk_re_sort: Mod._Z3_mk_re_sort,\n            is_re_sort: function (c, s) {\n                return Mod.ccall('Z3_is_re_sort', 'boolean', ['number', 'number'], [c, s]);\n            },\n            get_re_sort_basis: Mod._Z3_get_re_sort_basis,\n            mk_string_sort: Mod._Z3_mk_string_sort,\n            mk_char_sort: Mod._Z3_mk_char_sort,\n            is_string_sort: function (c, s) {\n                return Mod.ccall('Z3_is_string_sort', 'boolean', ['number', 'number'], [c, s]);\n            },\n            is_char_sort: function (c, s) {\n                return Mod.ccall('Z3_is_char_sort', 'boolean', ['number', 'number'], [c, s]);\n            },\n            mk_string: function (c, s) {\n                return Mod.ccall('Z3_mk_string', 'number', ['number', 'string'], [c, s]);\n            },\n            mk_lstring: function (c, len, s) {\n                return Mod.ccall('Z3_mk_lstring', 'number', ['number', 'number', 'string'], [c, len, s]);\n            },\n            mk_u32string: function (c, chars) {\n                return Mod.ccall('Z3_mk_u32string', 'number', ['number', 'number', 'array'], [c, chars.length, intArrayToByteArr(chars)]);\n            },\n            is_string: function (c, s) {\n                return Mod.ccall('Z3_is_string', 'boolean', ['number', 'number'], [c, s]);\n            },\n            get_string: function (c, s) {\n                return Mod.ccall('Z3_get_string', 'string', ['number', 'number'], [c, s]);\n            },\n            get_string_length: function (c, s) {\n                let ret = Mod.ccall('Z3_get_string_length', 'number', ['number', 'number'], [c, s]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            get_string_contents: function (c, s, length) {\n                let outArray_contents = Mod._malloc(4 * length);\n                try {\n                    let ret = Mod.ccall('Z3_get_string_contents', 'void', ['number', 'number', 'number', 'number'], [c, s, length, outArray_contents]);\n                    return readUintArray(outArray_contents, length);\n                }\n                finally {\n                    Mod._free(outArray_contents);\n                }\n            },\n            mk_seq_empty: Mod._Z3_mk_seq_empty,\n            mk_seq_unit: Mod._Z3_mk_seq_unit,\n            mk_seq_concat: function (c, args) {\n                return Mod.ccall('Z3_mk_seq_concat', 'number', ['number', 'number', 'array'], [c, args.length, intArrayToByteArr(args)]);\n            },\n            mk_seq_prefix: Mod._Z3_mk_seq_prefix,\n            mk_seq_suffix: Mod._Z3_mk_seq_suffix,\n            mk_seq_contains: Mod._Z3_mk_seq_contains,\n            mk_str_lt: Mod._Z3_mk_str_lt,\n            mk_str_le: Mod._Z3_mk_str_le,\n            mk_seq_extract: Mod._Z3_mk_seq_extract,\n            mk_seq_replace: Mod._Z3_mk_seq_replace,\n            mk_seq_at: Mod._Z3_mk_seq_at,\n            mk_seq_nth: Mod._Z3_mk_seq_nth,\n            mk_seq_length: Mod._Z3_mk_seq_length,\n            mk_seq_index: Mod._Z3_mk_seq_index,\n            mk_seq_last_index: Mod._Z3_mk_seq_last_index,\n            mk_str_to_int: Mod._Z3_mk_str_to_int,\n            mk_int_to_str: Mod._Z3_mk_int_to_str,\n            mk_string_to_code: Mod._Z3_mk_string_to_code,\n            mk_string_from_code: Mod._Z3_mk_string_from_code,\n            mk_ubv_to_str: Mod._Z3_mk_ubv_to_str,\n            mk_sbv_to_str: Mod._Z3_mk_sbv_to_str,\n            mk_seq_to_re: Mod._Z3_mk_seq_to_re,\n            mk_seq_in_re: Mod._Z3_mk_seq_in_re,\n            mk_re_plus: Mod._Z3_mk_re_plus,\n            mk_re_star: Mod._Z3_mk_re_star,\n            mk_re_option: Mod._Z3_mk_re_option,\n            mk_re_union: function (c, args) {\n                return Mod.ccall('Z3_mk_re_union', 'number', ['number', 'number', 'array'], [c, args.length, intArrayToByteArr(args)]);\n            },\n            mk_re_concat: function (c, args) {\n                return Mod.ccall('Z3_mk_re_concat', 'number', ['number', 'number', 'array'], [c, args.length, intArrayToByteArr(args)]);\n            },\n            mk_re_range: Mod._Z3_mk_re_range,\n            mk_re_allchar: Mod._Z3_mk_re_allchar,\n            mk_re_loop: Mod._Z3_mk_re_loop,\n            mk_re_power: Mod._Z3_mk_re_power,\n            mk_re_intersect: function (c, args) {\n                return Mod.ccall('Z3_mk_re_intersect', 'number', ['number', 'number', 'array'], [c, args.length, intArrayToByteArr(args)]);\n            },\n            mk_re_complement: Mod._Z3_mk_re_complement,\n            mk_re_diff: Mod._Z3_mk_re_diff,\n            mk_re_empty: Mod._Z3_mk_re_empty,\n            mk_re_full: Mod._Z3_mk_re_full,\n            mk_char: Mod._Z3_mk_char,\n            mk_char_le: Mod._Z3_mk_char_le,\n            mk_char_to_int: Mod._Z3_mk_char_to_int,\n            mk_char_to_bv: Mod._Z3_mk_char_to_bv,\n            mk_char_from_bv: Mod._Z3_mk_char_from_bv,\n            mk_char_is_digit: Mod._Z3_mk_char_is_digit,\n            mk_linear_order: Mod._Z3_mk_linear_order,\n            mk_partial_order: Mod._Z3_mk_partial_order,\n            mk_piecewise_linear_order: Mod._Z3_mk_piecewise_linear_order,\n            mk_tree_order: Mod._Z3_mk_tree_order,\n            mk_transitive_closure: Mod._Z3_mk_transitive_closure,\n            mk_pattern: function (c, terms) {\n                return Mod.ccall('Z3_mk_pattern', 'number', ['number', 'number', 'array'], [c, terms.length, intArrayToByteArr(terms)]);\n            },\n            mk_bound: Mod._Z3_mk_bound,\n            mk_forall: function (c, weight, patterns, sorts, decl_names, body) {\n                if (sorts.length !== decl_names.length) {\n                    throw new TypeError(`sorts and decl_names must be the same length (got ${sorts.length} and {decl_names.length})`);\n                }\n                return Mod.ccall('Z3_mk_forall', 'number', [\n                    'number',\n                    'number',\n                    'number',\n                    'array',\n                    'number',\n                    'array',\n                    'array',\n                    'number',\n                ], [\n                    c,\n                    weight,\n                    patterns.length,\n                    intArrayToByteArr(patterns),\n                    sorts.length,\n                    intArrayToByteArr(sorts),\n                    intArrayToByteArr(decl_names),\n                    body,\n                ]);\n            },\n            mk_exists: function (c, weight, patterns, sorts, decl_names, body) {\n                if (sorts.length !== decl_names.length) {\n                    throw new TypeError(`sorts and decl_names must be the same length (got ${sorts.length} and {decl_names.length})`);\n                }\n                return Mod.ccall('Z3_mk_exists', 'number', [\n                    'number',\n                    'number',\n                    'number',\n                    'array',\n                    'number',\n                    'array',\n                    'array',\n                    'number',\n                ], [\n                    c,\n                    weight,\n                    patterns.length,\n                    intArrayToByteArr(patterns),\n                    sorts.length,\n                    intArrayToByteArr(sorts),\n                    intArrayToByteArr(decl_names),\n                    body,\n                ]);\n            },\n            mk_quantifier: function (c, is_forall, weight, patterns, sorts, decl_names, body) {\n                if (sorts.length !== decl_names.length) {\n                    throw new TypeError(`sorts and decl_names must be the same length (got ${sorts.length} and {decl_names.length})`);\n                }\n                return Mod.ccall('Z3_mk_quantifier', 'number', [\n                    'number',\n                    'boolean',\n                    'number',\n                    'number',\n                    'array',\n                    'number',\n                    'array',\n                    'array',\n                    'number',\n                ], [\n                    c,\n                    is_forall,\n                    weight,\n                    patterns.length,\n                    intArrayToByteArr(patterns),\n                    sorts.length,\n                    intArrayToByteArr(sorts),\n                    intArrayToByteArr(decl_names),\n                    body,\n                ]);\n            },\n            mk_quantifier_ex: function (c, is_forall, weight, quantifier_id, skolem_id, patterns, no_patterns, sorts, decl_names, body) {\n                if (sorts.length !== decl_names.length) {\n                    throw new TypeError(`sorts and decl_names must be the same length (got ${sorts.length} and {decl_names.length})`);\n                }\n                return Mod.ccall('Z3_mk_quantifier_ex', 'number', [\n                    'number',\n                    'boolean',\n                    'number',\n                    'number',\n                    'number',\n                    'number',\n                    'array',\n                    'number',\n                    'array',\n                    'number',\n                    'array',\n                    'array',\n                    'number',\n                ], [\n                    c,\n                    is_forall,\n                    weight,\n                    quantifier_id,\n                    skolem_id,\n                    patterns.length,\n                    intArrayToByteArr(patterns),\n                    no_patterns.length,\n                    intArrayToByteArr(no_patterns),\n                    sorts.length,\n                    intArrayToByteArr(sorts),\n                    intArrayToByteArr(decl_names),\n                    body,\n                ]);\n            },\n            mk_forall_const: function (c, weight, bound, patterns, body) {\n                return Mod.ccall('Z3_mk_forall_const', 'number', ['number', 'number', 'number', 'array', 'number', 'array', 'number'], [\n                    c,\n                    weight,\n                    bound.length,\n                    intArrayToByteArr(bound),\n                    patterns.length,\n                    intArrayToByteArr(patterns),\n                    body,\n                ]);\n            },\n            mk_exists_const: function (c, weight, bound, patterns, body) {\n                return Mod.ccall('Z3_mk_exists_const', 'number', ['number', 'number', 'number', 'array', 'number', 'array', 'number'], [\n                    c,\n                    weight,\n                    bound.length,\n                    intArrayToByteArr(bound),\n                    patterns.length,\n                    intArrayToByteArr(patterns),\n                    body,\n                ]);\n            },\n            mk_quantifier_const: function (c, is_forall, weight, bound, patterns, body) {\n                return Mod.ccall('Z3_mk_quantifier_const', 'number', [\n                    'number',\n                    'boolean',\n                    'number',\n                    'number',\n                    'array',\n                    'number',\n                    'array',\n                    'number',\n                ], [\n                    c,\n                    is_forall,\n                    weight,\n                    bound.length,\n                    intArrayToByteArr(bound),\n                    patterns.length,\n                    intArrayToByteArr(patterns),\n                    body,\n                ]);\n            },\n            mk_quantifier_const_ex: function (c, is_forall, weight, quantifier_id, skolem_id, bound, patterns, no_patterns, body) {\n                return Mod.ccall('Z3_mk_quantifier_const_ex', 'number', [\n                    'number',\n                    'boolean',\n                    'number',\n                    'number',\n                    'number',\n                    'number',\n                    'array',\n                    'number',\n                    'array',\n                    'number',\n                    'array',\n                    'number',\n                ], [\n                    c,\n                    is_forall,\n                    weight,\n                    quantifier_id,\n                    skolem_id,\n                    bound.length,\n                    intArrayToByteArr(bound),\n                    patterns.length,\n                    intArrayToByteArr(patterns),\n                    no_patterns.length,\n                    intArrayToByteArr(no_patterns),\n                    body,\n                ]);\n            },\n            mk_lambda: function (c, sorts, decl_names, body) {\n                if (sorts.length !== decl_names.length) {\n                    throw new TypeError(`sorts and decl_names must be the same length (got ${sorts.length} and {decl_names.length})`);\n                }\n                return Mod.ccall('Z3_mk_lambda', 'number', ['number', 'number', 'array', 'array', 'number'], [\n                    c,\n                    sorts.length,\n                    intArrayToByteArr(sorts),\n                    intArrayToByteArr(decl_names),\n                    body,\n                ]);\n            },\n            mk_lambda_const: function (c, bound, body) {\n                return Mod.ccall('Z3_mk_lambda_const', 'number', ['number', 'number', 'array', 'number'], [\n                    c,\n                    bound.length,\n                    intArrayToByteArr(bound),\n                    body,\n                ]);\n            },\n            get_symbol_kind: Mod._Z3_get_symbol_kind,\n            get_symbol_int: Mod._Z3_get_symbol_int,\n            get_symbol_string: function (c, s) {\n                return Mod.ccall('Z3_get_symbol_string', 'string', ['number', 'number'], [c, s]);\n            },\n            get_sort_name: Mod._Z3_get_sort_name,\n            get_sort_id: function (c, s) {\n                let ret = Mod.ccall('Z3_get_sort_id', 'number', ['number', 'number'], [c, s]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            sort_to_ast: Mod._Z3_sort_to_ast,\n            is_eq_sort: function (c, s1, s2) {\n                return Mod.ccall('Z3_is_eq_sort', 'boolean', ['number', 'number', 'number'], [c, s1, s2]);\n            },\n            get_sort_kind: Mod._Z3_get_sort_kind,\n            get_bv_sort_size: function (c, t) {\n                let ret = Mod.ccall('Z3_get_bv_sort_size', 'number', ['number', 'number'], [c, t]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            get_finite_domain_sort_size: function (c, s) {\n                let ret = Mod.ccall('Z3_get_finite_domain_sort_size', 'boolean', ['number', 'number', 'number'], [c, s, outAddress]);\n                if (!ret) {\n                    return null;\n                }\n                return getOutUint64(0);\n            },\n            get_array_sort_domain: Mod._Z3_get_array_sort_domain,\n            get_array_sort_domain_n: Mod._Z3_get_array_sort_domain_n,\n            get_array_sort_range: Mod._Z3_get_array_sort_range,\n            get_tuple_sort_mk_decl: Mod._Z3_get_tuple_sort_mk_decl,\n            get_tuple_sort_num_fields: function (c, t) {\n                let ret = Mod.ccall('Z3_get_tuple_sort_num_fields', 'number', ['number', 'number'], [c, t]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            get_tuple_sort_field_decl: Mod._Z3_get_tuple_sort_field_decl,\n            get_datatype_sort_num_constructors: function (c, t) {\n                let ret = Mod.ccall('Z3_get_datatype_sort_num_constructors', 'number', ['number', 'number'], [c, t]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            get_datatype_sort_constructor: Mod._Z3_get_datatype_sort_constructor,\n            get_datatype_sort_recognizer: Mod._Z3_get_datatype_sort_recognizer,\n            get_datatype_sort_constructor_accessor: Mod._Z3_get_datatype_sort_constructor_accessor,\n            datatype_update_field: Mod._Z3_datatype_update_field,\n            get_relation_arity: function (c, s) {\n                let ret = Mod.ccall('Z3_get_relation_arity', 'number', ['number', 'number'], [c, s]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            get_relation_column: Mod._Z3_get_relation_column,\n            mk_atmost: function (c, args, k) {\n                return Mod.ccall('Z3_mk_atmost', 'number', ['number', 'number', 'array', 'number'], [c, args.length, intArrayToByteArr(args), k]);\n            },\n            mk_atleast: function (c, args, k) {\n                return Mod.ccall('Z3_mk_atleast', 'number', ['number', 'number', 'array', 'number'], [c, args.length, intArrayToByteArr(args), k]);\n            },\n            mk_pble: function (c, args, coeffs, k) {\n                if (args.length !== coeffs.length) {\n                    throw new TypeError(`args and coeffs must be the same length (got ${args.length} and {coeffs.length})`);\n                }\n                return Mod.ccall('Z3_mk_pble', 'number', ['number', 'number', 'array', 'array', 'number'], [\n                    c,\n                    args.length,\n                    intArrayToByteArr(args),\n                    intArrayToByteArr(coeffs),\n                    k,\n                ]);\n            },\n            mk_pbge: function (c, args, coeffs, k) {\n                if (args.length !== coeffs.length) {\n                    throw new TypeError(`args and coeffs must be the same length (got ${args.length} and {coeffs.length})`);\n                }\n                return Mod.ccall('Z3_mk_pbge', 'number', ['number', 'number', 'array', 'array', 'number'], [\n                    c,\n                    args.length,\n                    intArrayToByteArr(args),\n                    intArrayToByteArr(coeffs),\n                    k,\n                ]);\n            },\n            mk_pbeq: function (c, args, coeffs, k) {\n                if (args.length !== coeffs.length) {\n                    throw new TypeError(`args and coeffs must be the same length (got ${args.length} and {coeffs.length})`);\n                }\n                return Mod.ccall('Z3_mk_pbeq', 'number', ['number', 'number', 'array', 'array', 'number'], [\n                    c,\n                    args.length,\n                    intArrayToByteArr(args),\n                    intArrayToByteArr(coeffs),\n                    k,\n                ]);\n            },\n            func_decl_to_ast: Mod._Z3_func_decl_to_ast,\n            is_eq_func_decl: function (c, f1, f2) {\n                return Mod.ccall('Z3_is_eq_func_decl', 'boolean', ['number', 'number', 'number'], [c, f1, f2]);\n            },\n            get_func_decl_id: function (c, f) {\n                let ret = Mod.ccall('Z3_get_func_decl_id', 'number', ['number', 'number'], [c, f]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            get_decl_name: Mod._Z3_get_decl_name,\n            get_decl_kind: Mod._Z3_get_decl_kind,\n            get_domain_size: function (c, d) {\n                let ret = Mod.ccall('Z3_get_domain_size', 'number', ['number', 'number'], [c, d]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            get_arity: function (c, d) {\n                let ret = Mod.ccall('Z3_get_arity', 'number', ['number', 'number'], [c, d]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            get_domain: Mod._Z3_get_domain,\n            get_range: Mod._Z3_get_range,\n            get_decl_num_parameters: function (c, d) {\n                let ret = Mod.ccall('Z3_get_decl_num_parameters', 'number', ['number', 'number'], [c, d]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            get_decl_parameter_kind: Mod._Z3_get_decl_parameter_kind,\n            get_decl_int_parameter: Mod._Z3_get_decl_int_parameter,\n            get_decl_double_parameter: Mod._Z3_get_decl_double_parameter,\n            get_decl_symbol_parameter: Mod._Z3_get_decl_symbol_parameter,\n            get_decl_sort_parameter: Mod._Z3_get_decl_sort_parameter,\n            get_decl_ast_parameter: Mod._Z3_get_decl_ast_parameter,\n            get_decl_func_decl_parameter: Mod._Z3_get_decl_func_decl_parameter,\n            get_decl_rational_parameter: function (c, d, idx) {\n                return Mod.ccall('Z3_get_decl_rational_parameter', 'string', ['number', 'number', 'number'], [c, d, idx]);\n            },\n            app_to_ast: Mod._Z3_app_to_ast,\n            get_app_decl: Mod._Z3_get_app_decl,\n            get_app_num_args: function (c, a) {\n                let ret = Mod.ccall('Z3_get_app_num_args', 'number', ['number', 'number'], [c, a]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            get_app_arg: Mod._Z3_get_app_arg,\n            is_eq_ast: function (c, t1, t2) {\n                return Mod.ccall('Z3_is_eq_ast', 'boolean', ['number', 'number', 'number'], [c, t1, t2]);\n            },\n            get_ast_id: function (c, t) {\n                let ret = Mod.ccall('Z3_get_ast_id', 'number', ['number', 'number'], [c, t]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            get_ast_hash: function (c, a) {\n                let ret = Mod.ccall('Z3_get_ast_hash', 'number', ['number', 'number'], [c, a]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            get_sort: Mod._Z3_get_sort,\n            is_well_sorted: function (c, t) {\n                return Mod.ccall('Z3_is_well_sorted', 'boolean', ['number', 'number'], [c, t]);\n            },\n            get_bool_value: Mod._Z3_get_bool_value,\n            get_ast_kind: Mod._Z3_get_ast_kind,\n            is_app: function (c, a) {\n                return Mod.ccall('Z3_is_app', 'boolean', ['number', 'number'], [c, a]);\n            },\n            is_numeral_ast: function (c, a) {\n                return Mod.ccall('Z3_is_numeral_ast', 'boolean', ['number', 'number'], [c, a]);\n            },\n            is_algebraic_number: function (c, a) {\n                return Mod.ccall('Z3_is_algebraic_number', 'boolean', ['number', 'number'], [c, a]);\n            },\n            to_app: Mod._Z3_to_app,\n            to_func_decl: Mod._Z3_to_func_decl,\n            get_numeral_string: function (c, a) {\n                return Mod.ccall('Z3_get_numeral_string', 'string', ['number', 'number'], [c, a]);\n            },\n            get_numeral_binary_string: function (c, a) {\n                return Mod.ccall('Z3_get_numeral_binary_string', 'string', ['number', 'number'], [c, a]);\n            },\n            get_numeral_decimal_string: function (c, a, precision) {\n                return Mod.ccall('Z3_get_numeral_decimal_string', 'string', ['number', 'number', 'number'], [c, a, precision]);\n            },\n            get_numeral_double: Mod._Z3_get_numeral_double,\n            get_numerator: Mod._Z3_get_numerator,\n            get_denominator: Mod._Z3_get_denominator,\n            get_numeral_small: function (c, a) {\n                let ret = Mod.ccall('Z3_get_numeral_small', 'boolean', ['number', 'number', 'number', 'number'], [c, a, outAddress, outAddress + 8]);\n                if (!ret) {\n                    return null;\n                }\n                return { num: getOutInt64(0), den: getOutInt64(1) };\n            },\n            get_numeral_int: function (c, v) {\n                let ret = Mod.ccall('Z3_get_numeral_int', 'boolean', ['number', 'number', 'number'], [c, v, outAddress]);\n                if (!ret) {\n                    return null;\n                }\n                return getOutInt(0);\n            },\n            get_numeral_uint: function (c, v) {\n                let ret = Mod.ccall('Z3_get_numeral_uint', 'boolean', ['number', 'number', 'number'], [c, v, outAddress]);\n                if (!ret) {\n                    return null;\n                }\n                return getOutUint(0);\n            },\n            get_numeral_uint64: function (c, v) {\n                let ret = Mod.ccall('Z3_get_numeral_uint64', 'boolean', ['number', 'number', 'number'], [c, v, outAddress]);\n                if (!ret) {\n                    return null;\n                }\n                return getOutUint64(0);\n            },\n            get_numeral_int64: function (c, v) {\n                let ret = Mod.ccall('Z3_get_numeral_int64', 'boolean', ['number', 'number', 'number'], [c, v, outAddress]);\n                if (!ret) {\n                    return null;\n                }\n                return getOutInt64(0);\n            },\n            get_numeral_rational_int64: function (c, v) {\n                let ret = Mod.ccall('Z3_get_numeral_rational_int64', 'boolean', ['number', 'number', 'number', 'number'], [c, v, outAddress, outAddress + 8]);\n                if (!ret) {\n                    return null;\n                }\n                return { num: getOutInt64(0), den: getOutInt64(1) };\n            },\n            get_algebraic_number_lower: Mod._Z3_get_algebraic_number_lower,\n            get_algebraic_number_upper: Mod._Z3_get_algebraic_number_upper,\n            pattern_to_ast: Mod._Z3_pattern_to_ast,\n            get_pattern_num_terms: function (c, p) {\n                let ret = Mod.ccall('Z3_get_pattern_num_terms', 'number', ['number', 'number'], [c, p]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            get_pattern: Mod._Z3_get_pattern,\n            get_index_value: function (c, a) {\n                let ret = Mod.ccall('Z3_get_index_value', 'number', ['number', 'number'], [c, a]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            is_quantifier_forall: function (c, a) {\n                return Mod.ccall('Z3_is_quantifier_forall', 'boolean', ['number', 'number'], [c, a]);\n            },\n            is_quantifier_exists: function (c, a) {\n                return Mod.ccall('Z3_is_quantifier_exists', 'boolean', ['number', 'number'], [c, a]);\n            },\n            is_lambda: function (c, a) {\n                return Mod.ccall('Z3_is_lambda', 'boolean', ['number', 'number'], [c, a]);\n            },\n            get_quantifier_weight: function (c, a) {\n                let ret = Mod.ccall('Z3_get_quantifier_weight', 'number', ['number', 'number'], [c, a]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            get_quantifier_skolem_id: Mod._Z3_get_quantifier_skolem_id,\n            get_quantifier_id: Mod._Z3_get_quantifier_id,\n            get_quantifier_num_patterns: function (c, a) {\n                let ret = Mod.ccall('Z3_get_quantifier_num_patterns', 'number', ['number', 'number'], [c, a]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            get_quantifier_pattern_ast: Mod._Z3_get_quantifier_pattern_ast,\n            get_quantifier_num_no_patterns: function (c, a) {\n                let ret = Mod.ccall('Z3_get_quantifier_num_no_patterns', 'number', ['number', 'number'], [c, a]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            get_quantifier_no_pattern_ast: Mod._Z3_get_quantifier_no_pattern_ast,\n            get_quantifier_num_bound: function (c, a) {\n                let ret = Mod.ccall('Z3_get_quantifier_num_bound', 'number', ['number', 'number'], [c, a]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            get_quantifier_bound_name: Mod._Z3_get_quantifier_bound_name,\n            get_quantifier_bound_sort: Mod._Z3_get_quantifier_bound_sort,\n            get_quantifier_body: Mod._Z3_get_quantifier_body,\n            simplify: function (c, a) {\n                return Mod.async_call(Mod._async_Z3_simplify, c, a);\n            },\n            simplify_ex: function (c, a, p) {\n                return Mod.async_call(Mod._async_Z3_simplify_ex, c, a, p);\n            },\n            simplify_get_help: function (c) {\n                return Mod.ccall('Z3_simplify_get_help', 'string', ['number'], [c]);\n            },\n            simplify_get_param_descrs: Mod._Z3_simplify_get_param_descrs,\n            update_term: function (c, a, args) {\n                return Mod.ccall('Z3_update_term', 'number', ['number', 'number', 'number', 'array'], [c, a, args.length, intArrayToByteArr(args)]);\n            },\n            substitute: function (c, a, from, to) {\n                if (from.length !== to.length) {\n                    throw new TypeError(`from and to must be the same length (got ${from.length} and {to.length})`);\n                }\n                return Mod.ccall('Z3_substitute', 'number', ['number', 'number', 'number', 'array', 'array'], [\n                    c,\n                    a,\n                    from.length,\n                    intArrayToByteArr(from),\n                    intArrayToByteArr(to),\n                ]);\n            },\n            substitute_vars: function (c, a, to) {\n                return Mod.ccall('Z3_substitute_vars', 'number', ['number', 'number', 'number', 'array'], [c, a, to.length, intArrayToByteArr(to)]);\n            },\n            substitute_funs: function (c, a, from, to) {\n                if (from.length !== to.length) {\n                    throw new TypeError(`from and to must be the same length (got ${from.length} and {to.length})`);\n                }\n                return Mod.ccall('Z3_substitute_funs', 'number', ['number', 'number', 'number', 'array', 'array'], [\n                    c,\n                    a,\n                    from.length,\n                    intArrayToByteArr(from),\n                    intArrayToByteArr(to),\n                ]);\n            },\n            translate: Mod._Z3_translate,\n            mk_model: Mod._Z3_mk_model,\n            model_inc_ref: Mod._Z3_model_inc_ref,\n            model_dec_ref: Mod._Z3_model_dec_ref,\n            model_eval: function (c, m, t, model_completion) {\n                let ret = Mod.ccall('Z3_model_eval', 'boolean', ['number', 'number', 'number', 'boolean', 'number'], [c, m, t, model_completion, outAddress]);\n                if (!ret) {\n                    return null;\n                }\n                return getOutUint(0);\n            },\n            model_get_const_interp: function (c, m, a) {\n                let ret = Mod.ccall('Z3_model_get_const_interp', 'number', ['number', 'number', 'number'], [c, m, a]);\n                if (ret === 0) {\n                    return null;\n                }\n                return ret;\n            },\n            model_has_interp: function (c, m, a) {\n                return Mod.ccall('Z3_model_has_interp', 'boolean', ['number', 'number', 'number'], [c, m, a]);\n            },\n            model_get_func_interp: function (c, m, f) {\n                let ret = Mod.ccall('Z3_model_get_func_interp', 'number', ['number', 'number', 'number'], [c, m, f]);\n                if (ret === 0) {\n                    return null;\n                }\n                return ret;\n            },\n            model_get_num_consts: function (c, m) {\n                let ret = Mod.ccall('Z3_model_get_num_consts', 'number', ['number', 'number'], [c, m]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            model_get_const_decl: Mod._Z3_model_get_const_decl,\n            model_get_num_funcs: function (c, m) {\n                let ret = Mod.ccall('Z3_model_get_num_funcs', 'number', ['number', 'number'], [c, m]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            model_get_func_decl: Mod._Z3_model_get_func_decl,\n            model_get_num_sorts: function (c, m) {\n                let ret = Mod.ccall('Z3_model_get_num_sorts', 'number', ['number', 'number'], [c, m]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            model_get_sort: Mod._Z3_model_get_sort,\n            model_get_sort_universe: Mod._Z3_model_get_sort_universe,\n            model_translate: Mod._Z3_model_translate,\n            is_as_array: function (c, a) {\n                return Mod.ccall('Z3_is_as_array', 'boolean', ['number', 'number'], [c, a]);\n            },\n            get_as_array_func_decl: Mod._Z3_get_as_array_func_decl,\n            add_func_interp: Mod._Z3_add_func_interp,\n            add_const_interp: Mod._Z3_add_const_interp,\n            func_interp_inc_ref: Mod._Z3_func_interp_inc_ref,\n            func_interp_dec_ref: Mod._Z3_func_interp_dec_ref,\n            func_interp_get_num_entries: function (c, f) {\n                let ret = Mod.ccall('Z3_func_interp_get_num_entries', 'number', ['number', 'number'], [c, f]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            func_interp_get_entry: Mod._Z3_func_interp_get_entry,\n            func_interp_get_else: Mod._Z3_func_interp_get_else,\n            func_interp_set_else: Mod._Z3_func_interp_set_else,\n            func_interp_get_arity: function (c, f) {\n                let ret = Mod.ccall('Z3_func_interp_get_arity', 'number', ['number', 'number'], [c, f]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            func_interp_add_entry: Mod._Z3_func_interp_add_entry,\n            func_entry_inc_ref: Mod._Z3_func_entry_inc_ref,\n            func_entry_dec_ref: Mod._Z3_func_entry_dec_ref,\n            func_entry_get_value: Mod._Z3_func_entry_get_value,\n            func_entry_get_num_args: function (c, e) {\n                let ret = Mod.ccall('Z3_func_entry_get_num_args', 'number', ['number', 'number'], [c, e]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            func_entry_get_arg: Mod._Z3_func_entry_get_arg,\n            open_log: function (filename) {\n                return Mod.ccall('Z3_open_log', 'boolean', ['string'], [filename]);\n            },\n            append_log: function (string) {\n                return Mod.ccall('Z3_append_log', 'void', ['string'], [string]);\n            },\n            close_log: Mod._Z3_close_log,\n            toggle_warning_messages: Mod._Z3_toggle_warning_messages,\n            set_ast_print_mode: Mod._Z3_set_ast_print_mode,\n            ast_to_string: function (c, a) {\n                return Mod.ccall('Z3_ast_to_string', 'string', ['number', 'number'], [c, a]);\n            },\n            pattern_to_string: function (c, p) {\n                return Mod.ccall('Z3_pattern_to_string', 'string', ['number', 'number'], [c, p]);\n            },\n            sort_to_string: function (c, s) {\n                return Mod.ccall('Z3_sort_to_string', 'string', ['number', 'number'], [c, s]);\n            },\n            func_decl_to_string: function (c, d) {\n                return Mod.ccall('Z3_func_decl_to_string', 'string', ['number', 'number'], [c, d]);\n            },\n            model_to_string: function (c, m) {\n                return Mod.ccall('Z3_model_to_string', 'string', ['number', 'number'], [c, m]);\n            },\n            benchmark_to_smtlib_string: function (c, name, logic, status, attributes, assumptions, formula) {\n                return Mod.ccall('Z3_benchmark_to_smtlib_string', 'string', [\n                    'number',\n                    'string',\n                    'string',\n                    'string',\n                    'string',\n                    'number',\n                    'array',\n                    'number',\n                ], [\n                    c,\n                    name,\n                    logic,\n                    status,\n                    attributes,\n                    assumptions.length,\n                    intArrayToByteArr(assumptions),\n                    formula,\n                ]);\n            },\n            parse_smtlib2_string: function (c, str, sort_names, sorts, decl_names, decls) {\n                if (sort_names.length !== sorts.length) {\n                    throw new TypeError(`sort_names and sorts must be the same length (got ${sort_names.length} and {sorts.length})`);\n                }\n                if (decl_names.length !== decls.length) {\n                    throw new TypeError(`decl_names and decls must be the same length (got ${decl_names.length} and {decls.length})`);\n                }\n                return Mod.ccall('Z3_parse_smtlib2_string', 'number', [\n                    'number',\n                    'string',\n                    'number',\n                    'array',\n                    'array',\n                    'number',\n                    'array',\n                    'array',\n                ], [\n                    c,\n                    str,\n                    sort_names.length,\n                    intArrayToByteArr(sort_names),\n                    intArrayToByteArr(sorts),\n                    decl_names.length,\n                    intArrayToByteArr(decl_names),\n                    intArrayToByteArr(decls),\n                ]);\n            },\n            parse_smtlib2_file: function (c, file_name, sort_names, sorts, decl_names, decls) {\n                if (sort_names.length !== sorts.length) {\n                    throw new TypeError(`sort_names and sorts must be the same length (got ${sort_names.length} and {sorts.length})`);\n                }\n                if (decl_names.length !== decls.length) {\n                    throw new TypeError(`decl_names and decls must be the same length (got ${decl_names.length} and {decls.length})`);\n                }\n                return Mod.ccall('Z3_parse_smtlib2_file', 'number', [\n                    'number',\n                    'string',\n                    'number',\n                    'array',\n                    'array',\n                    'number',\n                    'array',\n                    'array',\n                ], [\n                    c,\n                    file_name,\n                    sort_names.length,\n                    intArrayToByteArr(sort_names),\n                    intArrayToByteArr(sorts),\n                    decl_names.length,\n                    intArrayToByteArr(decl_names),\n                    intArrayToByteArr(decls),\n                ]);\n            },\n            eval_smtlib2_string: async function (c, str) {\n                return await Mod.async_call(() => Mod.ccall('async_Z3_eval_smtlib2_string', 'string', ['number', 'string'], [c, str]));\n            },\n            mk_parser_context: Mod._Z3_mk_parser_context,\n            parser_context_inc_ref: Mod._Z3_parser_context_inc_ref,\n            parser_context_dec_ref: Mod._Z3_parser_context_dec_ref,\n            parser_context_add_sort: Mod._Z3_parser_context_add_sort,\n            parser_context_add_decl: Mod._Z3_parser_context_add_decl,\n            parser_context_from_string: function (c, pc, s) {\n                return Mod.ccall('Z3_parser_context_from_string', 'number', ['number', 'number', 'string'], [c, pc, s]);\n            },\n            get_error_code: Mod._Z3_get_error_code,\n            set_error: Mod._Z3_set_error,\n            get_error_msg: function (c, err) {\n                return Mod.ccall('Z3_get_error_msg', 'string', ['number', 'number'], [c, err]);\n            },\n            get_version: function () {\n                let ret = Mod.ccall('Z3_get_version', 'void', ['number', 'number', 'number', 'number'], [outAddress, outAddress + 4, outAddress + 8, outAddress + 12]);\n                return {\n                    major: getOutUint(0),\n                    minor: getOutUint(1),\n                    build_number: getOutUint(2),\n                    revision_number: getOutUint(3),\n                };\n            },\n            get_full_version: function () {\n                return Mod.ccall('Z3_get_full_version', 'string', [], []);\n            },\n            enable_trace: function (tag) {\n                return Mod.ccall('Z3_enable_trace', 'void', ['string'], [tag]);\n            },\n            disable_trace: function (tag) {\n                return Mod.ccall('Z3_disable_trace', 'void', ['string'], [tag]);\n            },\n            reset_memory: Mod._Z3_reset_memory,\n            finalize_memory: Mod._Z3_finalize_memory,\n            mk_goal: Mod._Z3_mk_goal,\n            goal_inc_ref: Mod._Z3_goal_inc_ref,\n            goal_dec_ref: Mod._Z3_goal_dec_ref,\n            goal_precision: Mod._Z3_goal_precision,\n            goal_assert: Mod._Z3_goal_assert,\n            goal_inconsistent: function (c, g) {\n                return Mod.ccall('Z3_goal_inconsistent', 'boolean', ['number', 'number'], [c, g]);\n            },\n            goal_depth: function (c, g) {\n                let ret = Mod.ccall('Z3_goal_depth', 'number', ['number', 'number'], [c, g]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            goal_reset: Mod._Z3_goal_reset,\n            goal_size: function (c, g) {\n                let ret = Mod.ccall('Z3_goal_size', 'number', ['number', 'number'], [c, g]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            goal_formula: Mod._Z3_goal_formula,\n            goal_num_exprs: function (c, g) {\n                let ret = Mod.ccall('Z3_goal_num_exprs', 'number', ['number', 'number'], [c, g]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            goal_is_decided_sat: function (c, g) {\n                return Mod.ccall('Z3_goal_is_decided_sat', 'boolean', ['number', 'number'], [c, g]);\n            },\n            goal_is_decided_unsat: function (c, g) {\n                return Mod.ccall('Z3_goal_is_decided_unsat', 'boolean', ['number', 'number'], [c, g]);\n            },\n            goal_translate: Mod._Z3_goal_translate,\n            goal_convert_model: Mod._Z3_goal_convert_model,\n            goal_to_string: function (c, g) {\n                return Mod.ccall('Z3_goal_to_string', 'string', ['number', 'number'], [c, g]);\n            },\n            goal_to_dimacs_string: function (c, g, include_names) {\n                return Mod.ccall('Z3_goal_to_dimacs_string', 'string', ['number', 'number', 'boolean'], [c, g, include_names]);\n            },\n            mk_tactic: function (c, name) {\n                return Mod.ccall('Z3_mk_tactic', 'number', ['number', 'string'], [c, name]);\n            },\n            tactic_inc_ref: Mod._Z3_tactic_inc_ref,\n            tactic_dec_ref: Mod._Z3_tactic_dec_ref,\n            mk_probe: function (c, name) {\n                return Mod.ccall('Z3_mk_probe', 'number', ['number', 'string'], [c, name]);\n            },\n            probe_inc_ref: Mod._Z3_probe_inc_ref,\n            probe_dec_ref: Mod._Z3_probe_dec_ref,\n            tactic_and_then: Mod._Z3_tactic_and_then,\n            tactic_or_else: Mod._Z3_tactic_or_else,\n            tactic_par_or: function (c, ts) {\n                return Mod.ccall('Z3_tactic_par_or', 'number', ['number', 'number', 'array'], [c, ts.length, intArrayToByteArr(ts)]);\n            },\n            tactic_par_and_then: Mod._Z3_tactic_par_and_then,\n            tactic_try_for: Mod._Z3_tactic_try_for,\n            tactic_when: Mod._Z3_tactic_when,\n            tactic_cond: Mod._Z3_tactic_cond,\n            tactic_repeat: Mod._Z3_tactic_repeat,\n            tactic_skip: Mod._Z3_tactic_skip,\n            tactic_fail: Mod._Z3_tactic_fail,\n            tactic_fail_if: Mod._Z3_tactic_fail_if,\n            tactic_fail_if_not_decided: Mod._Z3_tactic_fail_if_not_decided,\n            tactic_using_params: Mod._Z3_tactic_using_params,\n            mk_simplifier: function (c, name) {\n                return Mod.ccall('Z3_mk_simplifier', 'number', ['number', 'string'], [c, name]);\n            },\n            simplifier_inc_ref: Mod._Z3_simplifier_inc_ref,\n            simplifier_dec_ref: Mod._Z3_simplifier_dec_ref,\n            solver_add_simplifier: Mod._Z3_solver_add_simplifier,\n            simplifier_and_then: Mod._Z3_simplifier_and_then,\n            simplifier_using_params: Mod._Z3_simplifier_using_params,\n            get_num_simplifiers: function (c) {\n                let ret = Mod.ccall('Z3_get_num_simplifiers', 'number', ['number'], [c]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            get_simplifier_name: function (c, i) {\n                return Mod.ccall('Z3_get_simplifier_name', 'string', ['number', 'number'], [c, i]);\n            },\n            simplifier_get_help: function (c, t) {\n                return Mod.ccall('Z3_simplifier_get_help', 'string', ['number', 'number'], [c, t]);\n            },\n            simplifier_get_param_descrs: Mod._Z3_simplifier_get_param_descrs,\n            simplifier_get_descr: function (c, name) {\n                return Mod.ccall('Z3_simplifier_get_descr', 'string', ['number', 'string'], [c, name]);\n            },\n            probe_const: Mod._Z3_probe_const,\n            probe_lt: Mod._Z3_probe_lt,\n            probe_gt: Mod._Z3_probe_gt,\n            probe_le: Mod._Z3_probe_le,\n            probe_ge: Mod._Z3_probe_ge,\n            probe_eq: Mod._Z3_probe_eq,\n            probe_and: Mod._Z3_probe_and,\n            probe_or: Mod._Z3_probe_or,\n            probe_not: Mod._Z3_probe_not,\n            get_num_tactics: function (c) {\n                let ret = Mod.ccall('Z3_get_num_tactics', 'number', ['number'], [c]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            get_tactic_name: function (c, i) {\n                return Mod.ccall('Z3_get_tactic_name', 'string', ['number', 'number'], [c, i]);\n            },\n            get_num_probes: function (c) {\n                let ret = Mod.ccall('Z3_get_num_probes', 'number', ['number'], [c]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            get_probe_name: function (c, i) {\n                return Mod.ccall('Z3_get_probe_name', 'string', ['number', 'number'], [c, i]);\n            },\n            tactic_get_help: function (c, t) {\n                return Mod.ccall('Z3_tactic_get_help', 'string', ['number', 'number'], [c, t]);\n            },\n            tactic_get_param_descrs: Mod._Z3_tactic_get_param_descrs,\n            tactic_get_descr: function (c, name) {\n                return Mod.ccall('Z3_tactic_get_descr', 'string', ['number', 'string'], [c, name]);\n            },\n            probe_get_descr: function (c, name) {\n                return Mod.ccall('Z3_probe_get_descr', 'string', ['number', 'string'], [c, name]);\n            },\n            probe_apply: Mod._Z3_probe_apply,\n            tactic_apply: function (c, t, g) {\n                return Mod.async_call(Mod._async_Z3_tactic_apply, c, t, g);\n            },\n            tactic_apply_ex: function (c, t, g, p) {\n                return Mod.async_call(Mod._async_Z3_tactic_apply_ex, c, t, g, p);\n            },\n            apply_result_inc_ref: Mod._Z3_apply_result_inc_ref,\n            apply_result_dec_ref: Mod._Z3_apply_result_dec_ref,\n            apply_result_to_string: function (c, r) {\n                return Mod.ccall('Z3_apply_result_to_string', 'string', ['number', 'number'], [c, r]);\n            },\n            apply_result_get_num_subgoals: function (c, r) {\n                let ret = Mod.ccall('Z3_apply_result_get_num_subgoals', 'number', ['number', 'number'], [c, r]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            apply_result_get_subgoal: Mod._Z3_apply_result_get_subgoal,\n            mk_solver: Mod._Z3_mk_solver,\n            mk_simple_solver: Mod._Z3_mk_simple_solver,\n            mk_solver_for_logic: Mod._Z3_mk_solver_for_logic,\n            mk_solver_from_tactic: Mod._Z3_mk_solver_from_tactic,\n            solver_translate: Mod._Z3_solver_translate,\n            solver_import_model_converter: Mod._Z3_solver_import_model_converter,\n            solver_get_help: function (c, s) {\n                return Mod.ccall('Z3_solver_get_help', 'string', ['number', 'number'], [c, s]);\n            },\n            solver_get_param_descrs: Mod._Z3_solver_get_param_descrs,\n            solver_set_params: Mod._Z3_solver_set_params,\n            solver_inc_ref: Mod._Z3_solver_inc_ref,\n            solver_dec_ref: Mod._Z3_solver_dec_ref,\n            solver_interrupt: Mod._Z3_solver_interrupt,\n            solver_push: Mod._Z3_solver_push,\n            solver_pop: Mod._Z3_solver_pop,\n            solver_reset: Mod._Z3_solver_reset,\n            solver_get_num_scopes: function (c, s) {\n                let ret = Mod.ccall('Z3_solver_get_num_scopes', 'number', ['number', 'number'], [c, s]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            solver_assert: Mod._Z3_solver_assert,\n            solver_assert_and_track: Mod._Z3_solver_assert_and_track,\n            solver_from_file: function (c, s, file_name) {\n                return Mod.ccall('Z3_solver_from_file', 'void', ['number', 'number', 'string'], [c, s, file_name]);\n            },\n            solver_from_string: function (c, s, file_name) {\n                return Mod.ccall('Z3_solver_from_string', 'void', ['number', 'number', 'string'], [c, s, file_name]);\n            },\n            solver_get_assertions: Mod._Z3_solver_get_assertions,\n            solver_get_units: Mod._Z3_solver_get_units,\n            solver_get_trail: Mod._Z3_solver_get_trail,\n            solver_get_non_units: Mod._Z3_solver_get_non_units,\n            solver_get_levels: function (c, s, literals, levels) {\n                return Mod.ccall('Z3_solver_get_levels', 'void', ['number', 'number', 'number', 'number', 'array'], [\n                    c,\n                    s,\n                    literals,\n                    levels.length,\n                    intArrayToByteArr(levels),\n                ]);\n            },\n            solver_congruence_root: Mod._Z3_solver_congruence_root,\n            solver_congruence_next: Mod._Z3_solver_congruence_next,\n            solver_next_split: function (c, cb, t, idx, phase) {\n                return Mod.ccall('Z3_solver_next_split', 'boolean', ['number', 'number', 'number', 'number', 'number'], [c, cb, t, idx, phase]);\n            },\n            solver_propagate_declare: function (c, name, domain, range) {\n                return Mod.ccall('Z3_solver_propagate_declare', 'number', ['number', 'number', 'number', 'array', 'number'], [\n                    c,\n                    name,\n                    domain.length,\n                    intArrayToByteArr(domain),\n                    range,\n                ]);\n            },\n            solver_propagate_register: Mod._Z3_solver_propagate_register,\n            solver_propagate_register_cb: Mod._Z3_solver_propagate_register_cb,\n            solver_propagate_consequence: function (c, cb, fixed, eq_lhs, eq_rhs, conseq) {\n                if (eq_lhs.length !== eq_rhs.length) {\n                    throw new TypeError(`eq_lhs and eq_rhs must be the same length (got ${eq_lhs.length} and {eq_rhs.length})`);\n                }\n                return Mod.ccall('Z3_solver_propagate_consequence', 'boolean', [\n                    'number',\n                    'number',\n                    'number',\n                    'array',\n                    'number',\n                    'array',\n                    'array',\n                    'number',\n                ], [\n                    c,\n                    cb,\n                    fixed.length,\n                    intArrayToByteArr(fixed),\n                    eq_lhs.length,\n                    intArrayToByteArr(eq_lhs),\n                    intArrayToByteArr(eq_rhs),\n                    conseq,\n                ]);\n            },\n            solver_check: function (c, s) {\n                return Mod.async_call(Mod._async_Z3_solver_check, c, s);\n            },\n            solver_check_assumptions: async function (c, s, assumptions) {\n                return await Mod.async_call(() => Mod.ccall('async_Z3_solver_check_assumptions', 'number', ['number', 'number', 'number', 'array'], [\n                    c,\n                    s,\n                    assumptions.length,\n                    intArrayToByteArr(assumptions),\n                ]));\n            },\n            get_implied_equalities: function (c, s, terms) {\n                let outArray_class_ids = Mod._malloc(4 * terms.length);\n                try {\n                    let ret = Mod.ccall('Z3_get_implied_equalities', 'number', ['number', 'number', 'number', 'array', 'number'], [\n                        c,\n                        s,\n                        terms.length,\n                        intArrayToByteArr(terms),\n                        outArray_class_ids,\n                    ]);\n                    return {\n                        rv: ret,\n                        class_ids: readUintArray(outArray_class_ids, terms.length),\n                    };\n                }\n                finally {\n                    Mod._free(outArray_class_ids);\n                }\n            },\n            solver_get_consequences: function (c, s, assumptions, variables, consequences) {\n                return Mod.async_call(Mod._async_Z3_solver_get_consequences, c, s, assumptions, variables, consequences);\n            },\n            solver_cube: function (c, s, vars, backtrack_level) {\n                return Mod.async_call(Mod._async_Z3_solver_cube, c, s, vars, backtrack_level);\n            },\n            solver_get_model: Mod._Z3_solver_get_model,\n            solver_get_proof: Mod._Z3_solver_get_proof,\n            solver_get_unsat_core: Mod._Z3_solver_get_unsat_core,\n            solver_get_reason_unknown: function (c, s) {\n                return Mod.ccall('Z3_solver_get_reason_unknown', 'string', ['number', 'number'], [c, s]);\n            },\n            solver_get_statistics: Mod._Z3_solver_get_statistics,\n            solver_to_string: function (c, s) {\n                return Mod.ccall('Z3_solver_to_string', 'string', ['number', 'number'], [c, s]);\n            },\n            solver_to_dimacs_string: function (c, s, include_names) {\n                return Mod.ccall('Z3_solver_to_dimacs_string', 'string', ['number', 'number', 'boolean'], [c, s, include_names]);\n            },\n            stats_to_string: function (c, s) {\n                return Mod.ccall('Z3_stats_to_string', 'string', ['number', 'number'], [c, s]);\n            },\n            stats_inc_ref: Mod._Z3_stats_inc_ref,\n            stats_dec_ref: Mod._Z3_stats_dec_ref,\n            stats_size: function (c, s) {\n                let ret = Mod.ccall('Z3_stats_size', 'number', ['number', 'number'], [c, s]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            stats_get_key: function (c, s, idx) {\n                return Mod.ccall('Z3_stats_get_key', 'string', ['number', 'number', 'number'], [c, s, idx]);\n            },\n            stats_is_uint: function (c, s, idx) {\n                return Mod.ccall('Z3_stats_is_uint', 'boolean', ['number', 'number', 'number'], [c, s, idx]);\n            },\n            stats_is_double: function (c, s, idx) {\n                return Mod.ccall('Z3_stats_is_double', 'boolean', ['number', 'number', 'number'], [c, s, idx]);\n            },\n            stats_get_uint_value: function (c, s, idx) {\n                let ret = Mod.ccall('Z3_stats_get_uint_value', 'number', ['number', 'number', 'number'], [c, s, idx]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            stats_get_double_value: Mod._Z3_stats_get_double_value,\n            get_estimated_alloc_size: Mod._Z3_get_estimated_alloc_size,\n            algebraic_is_value: function (c, a) {\n                return Mod.ccall('Z3_algebraic_is_value', 'boolean', ['number', 'number'], [c, a]);\n            },\n            algebraic_is_pos: function (c, a) {\n                return Mod.ccall('Z3_algebraic_is_pos', 'boolean', ['number', 'number'], [c, a]);\n            },\n            algebraic_is_neg: function (c, a) {\n                return Mod.ccall('Z3_algebraic_is_neg', 'boolean', ['number', 'number'], [c, a]);\n            },\n            algebraic_is_zero: function (c, a) {\n                return Mod.ccall('Z3_algebraic_is_zero', 'boolean', ['number', 'number'], [c, a]);\n            },\n            algebraic_sign: Mod._Z3_algebraic_sign,\n            algebraic_add: Mod._Z3_algebraic_add,\n            algebraic_sub: Mod._Z3_algebraic_sub,\n            algebraic_mul: Mod._Z3_algebraic_mul,\n            algebraic_div: Mod._Z3_algebraic_div,\n            algebraic_root: Mod._Z3_algebraic_root,\n            algebraic_power: Mod._Z3_algebraic_power,\n            algebraic_lt: function (c, a, b) {\n                return Mod.ccall('Z3_algebraic_lt', 'boolean', ['number', 'number', 'number'], [c, a, b]);\n            },\n            algebraic_gt: function (c, a, b) {\n                return Mod.ccall('Z3_algebraic_gt', 'boolean', ['number', 'number', 'number'], [c, a, b]);\n            },\n            algebraic_le: function (c, a, b) {\n                return Mod.ccall('Z3_algebraic_le', 'boolean', ['number', 'number', 'number'], [c, a, b]);\n            },\n            algebraic_ge: function (c, a, b) {\n                return Mod.ccall('Z3_algebraic_ge', 'boolean', ['number', 'number', 'number'], [c, a, b]);\n            },\n            algebraic_eq: function (c, a, b) {\n                return Mod.ccall('Z3_algebraic_eq', 'boolean', ['number', 'number', 'number'], [c, a, b]);\n            },\n            algebraic_neq: function (c, a, b) {\n                return Mod.ccall('Z3_algebraic_neq', 'boolean', ['number', 'number', 'number'], [c, a, b]);\n            },\n            algebraic_roots: async function (c, p, a) {\n                return await Mod.async_call(() => Mod.ccall('async_Z3_algebraic_roots', 'number', ['number', 'number', 'number', 'array'], [c, p, a.length, intArrayToByteArr(a)]));\n            },\n            algebraic_eval: async function (c, p, a) {\n                return await Mod.async_call(() => Mod.ccall('async_Z3_algebraic_eval', 'number', ['number', 'number', 'number', 'array'], [c, p, a.length, intArrayToByteArr(a)]));\n            },\n            algebraic_get_poly: Mod._Z3_algebraic_get_poly,\n            algebraic_get_i: function (c, a) {\n                let ret = Mod.ccall('Z3_algebraic_get_i', 'number', ['number', 'number'], [c, a]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            mk_ast_vector: Mod._Z3_mk_ast_vector,\n            ast_vector_inc_ref: Mod._Z3_ast_vector_inc_ref,\n            ast_vector_dec_ref: Mod._Z3_ast_vector_dec_ref,\n            ast_vector_size: function (c, v) {\n                let ret = Mod.ccall('Z3_ast_vector_size', 'number', ['number', 'number'], [c, v]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            ast_vector_get: Mod._Z3_ast_vector_get,\n            ast_vector_set: Mod._Z3_ast_vector_set,\n            ast_vector_resize: Mod._Z3_ast_vector_resize,\n            ast_vector_push: Mod._Z3_ast_vector_push,\n            ast_vector_translate: Mod._Z3_ast_vector_translate,\n            ast_vector_to_string: function (c, v) {\n                return Mod.ccall('Z3_ast_vector_to_string', 'string', ['number', 'number'], [c, v]);\n            },\n            mk_ast_map: Mod._Z3_mk_ast_map,\n            ast_map_inc_ref: Mod._Z3_ast_map_inc_ref,\n            ast_map_dec_ref: Mod._Z3_ast_map_dec_ref,\n            ast_map_contains: function (c, m, k) {\n                return Mod.ccall('Z3_ast_map_contains', 'boolean', ['number', 'number', 'number'], [c, m, k]);\n            },\n            ast_map_find: Mod._Z3_ast_map_find,\n            ast_map_insert: Mod._Z3_ast_map_insert,\n            ast_map_erase: Mod._Z3_ast_map_erase,\n            ast_map_reset: Mod._Z3_ast_map_reset,\n            ast_map_size: function (c, m) {\n                let ret = Mod.ccall('Z3_ast_map_size', 'number', ['number', 'number'], [c, m]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            ast_map_keys: Mod._Z3_ast_map_keys,\n            ast_map_to_string: function (c, m) {\n                return Mod.ccall('Z3_ast_map_to_string', 'string', ['number', 'number'], [c, m]);\n            },\n            mk_fixedpoint: Mod._Z3_mk_fixedpoint,\n            fixedpoint_inc_ref: Mod._Z3_fixedpoint_inc_ref,\n            fixedpoint_dec_ref: Mod._Z3_fixedpoint_dec_ref,\n            fixedpoint_add_rule: Mod._Z3_fixedpoint_add_rule,\n            fixedpoint_add_fact: function (c, d, r, args) {\n                return Mod.ccall('Z3_fixedpoint_add_fact', 'void', ['number', 'number', 'number', 'number', 'array'], [c, d, r, args.length, intArrayToByteArr(args)]);\n            },\n            fixedpoint_assert: Mod._Z3_fixedpoint_assert,\n            fixedpoint_query: function (c, d, query) {\n                return Mod.async_call(Mod._async_Z3_fixedpoint_query, c, d, query);\n            },\n            fixedpoint_query_relations: async function (c, d, relations) {\n                return await Mod.async_call(() => Mod.ccall('async_Z3_fixedpoint_query_relations', 'number', ['number', 'number', 'number', 'array'], [\n                    c,\n                    d,\n                    relations.length,\n                    intArrayToByteArr(relations),\n                ]));\n            },\n            fixedpoint_get_answer: Mod._Z3_fixedpoint_get_answer,\n            fixedpoint_get_reason_unknown: function (c, d) {\n                return Mod.ccall('Z3_fixedpoint_get_reason_unknown', 'string', ['number', 'number'], [c, d]);\n            },\n            fixedpoint_update_rule: Mod._Z3_fixedpoint_update_rule,\n            fixedpoint_get_num_levels: function (c, d, pred) {\n                let ret = Mod.ccall('Z3_fixedpoint_get_num_levels', 'number', ['number', 'number', 'number'], [c, d, pred]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            fixedpoint_get_cover_delta: Mod._Z3_fixedpoint_get_cover_delta,\n            fixedpoint_add_cover: Mod._Z3_fixedpoint_add_cover,\n            fixedpoint_get_statistics: Mod._Z3_fixedpoint_get_statistics,\n            fixedpoint_register_relation: Mod._Z3_fixedpoint_register_relation,\n            fixedpoint_set_predicate_representation: function (c, d, f, relation_kinds) {\n                return Mod.ccall('Z3_fixedpoint_set_predicate_representation', 'void', ['number', 'number', 'number', 'number', 'array'], [\n                    c,\n                    d,\n                    f,\n                    relation_kinds.length,\n                    intArrayToByteArr(relation_kinds),\n                ]);\n            },\n            fixedpoint_get_rules: Mod._Z3_fixedpoint_get_rules,\n            fixedpoint_get_assertions: Mod._Z3_fixedpoint_get_assertions,\n            fixedpoint_set_params: Mod._Z3_fixedpoint_set_params,\n            fixedpoint_get_help: function (c, f) {\n                return Mod.ccall('Z3_fixedpoint_get_help', 'string', ['number', 'number'], [c, f]);\n            },\n            fixedpoint_get_param_descrs: Mod._Z3_fixedpoint_get_param_descrs,\n            fixedpoint_to_string: function (c, f, queries) {\n                return Mod.ccall('Z3_fixedpoint_to_string', 'string', ['number', 'number', 'number', 'array'], [\n                    c,\n                    f,\n                    queries.length,\n                    intArrayToByteArr(queries),\n                ]);\n            },\n            fixedpoint_from_string: function (c, f, s) {\n                return Mod.ccall('Z3_fixedpoint_from_string', 'number', ['number', 'number', 'string'], [c, f, s]);\n            },\n            fixedpoint_from_file: function (c, f, s) {\n                return Mod.ccall('Z3_fixedpoint_from_file', 'number', ['number', 'number', 'string'], [c, f, s]);\n            },\n            mk_fpa_rounding_mode_sort: Mod._Z3_mk_fpa_rounding_mode_sort,\n            mk_fpa_round_nearest_ties_to_even: Mod._Z3_mk_fpa_round_nearest_ties_to_even,\n            mk_fpa_rne: Mod._Z3_mk_fpa_rne,\n            mk_fpa_round_nearest_ties_to_away: Mod._Z3_mk_fpa_round_nearest_ties_to_away,\n            mk_fpa_rna: Mod._Z3_mk_fpa_rna,\n            mk_fpa_round_toward_positive: Mod._Z3_mk_fpa_round_toward_positive,\n            mk_fpa_rtp: Mod._Z3_mk_fpa_rtp,\n            mk_fpa_round_toward_negative: Mod._Z3_mk_fpa_round_toward_negative,\n            mk_fpa_rtn: Mod._Z3_mk_fpa_rtn,\n            mk_fpa_round_toward_zero: Mod._Z3_mk_fpa_round_toward_zero,\n            mk_fpa_rtz: Mod._Z3_mk_fpa_rtz,\n            mk_fpa_sort: Mod._Z3_mk_fpa_sort,\n            mk_fpa_sort_half: Mod._Z3_mk_fpa_sort_half,\n            mk_fpa_sort_16: Mod._Z3_mk_fpa_sort_16,\n            mk_fpa_sort_single: Mod._Z3_mk_fpa_sort_single,\n            mk_fpa_sort_32: Mod._Z3_mk_fpa_sort_32,\n            mk_fpa_sort_double: Mod._Z3_mk_fpa_sort_double,\n            mk_fpa_sort_64: Mod._Z3_mk_fpa_sort_64,\n            mk_fpa_sort_quadruple: Mod._Z3_mk_fpa_sort_quadruple,\n            mk_fpa_sort_128: Mod._Z3_mk_fpa_sort_128,\n            mk_fpa_nan: Mod._Z3_mk_fpa_nan,\n            mk_fpa_inf: Mod._Z3_mk_fpa_inf,\n            mk_fpa_zero: Mod._Z3_mk_fpa_zero,\n            mk_fpa_fp: Mod._Z3_mk_fpa_fp,\n            mk_fpa_numeral_float: Mod._Z3_mk_fpa_numeral_float,\n            mk_fpa_numeral_double: Mod._Z3_mk_fpa_numeral_double,\n            mk_fpa_numeral_int: Mod._Z3_mk_fpa_numeral_int,\n            mk_fpa_numeral_int_uint: Mod._Z3_mk_fpa_numeral_int_uint,\n            mk_fpa_numeral_int64_uint64: Mod._Z3_mk_fpa_numeral_int64_uint64,\n            mk_fpa_abs: Mod._Z3_mk_fpa_abs,\n            mk_fpa_neg: Mod._Z3_mk_fpa_neg,\n            mk_fpa_add: Mod._Z3_mk_fpa_add,\n            mk_fpa_sub: Mod._Z3_mk_fpa_sub,\n            mk_fpa_mul: Mod._Z3_mk_fpa_mul,\n            mk_fpa_div: Mod._Z3_mk_fpa_div,\n            mk_fpa_fma: Mod._Z3_mk_fpa_fma,\n            mk_fpa_sqrt: Mod._Z3_mk_fpa_sqrt,\n            mk_fpa_rem: Mod._Z3_mk_fpa_rem,\n            mk_fpa_round_to_integral: Mod._Z3_mk_fpa_round_to_integral,\n            mk_fpa_min: Mod._Z3_mk_fpa_min,\n            mk_fpa_max: Mod._Z3_mk_fpa_max,\n            mk_fpa_leq: Mod._Z3_mk_fpa_leq,\n            mk_fpa_lt: Mod._Z3_mk_fpa_lt,\n            mk_fpa_geq: Mod._Z3_mk_fpa_geq,\n            mk_fpa_gt: Mod._Z3_mk_fpa_gt,\n            mk_fpa_eq: Mod._Z3_mk_fpa_eq,\n            mk_fpa_is_normal: Mod._Z3_mk_fpa_is_normal,\n            mk_fpa_is_subnormal: Mod._Z3_mk_fpa_is_subnormal,\n            mk_fpa_is_zero: Mod._Z3_mk_fpa_is_zero,\n            mk_fpa_is_infinite: Mod._Z3_mk_fpa_is_infinite,\n            mk_fpa_is_nan: Mod._Z3_mk_fpa_is_nan,\n            mk_fpa_is_negative: Mod._Z3_mk_fpa_is_negative,\n            mk_fpa_is_positive: Mod._Z3_mk_fpa_is_positive,\n            mk_fpa_to_fp_bv: Mod._Z3_mk_fpa_to_fp_bv,\n            mk_fpa_to_fp_float: Mod._Z3_mk_fpa_to_fp_float,\n            mk_fpa_to_fp_real: Mod._Z3_mk_fpa_to_fp_real,\n            mk_fpa_to_fp_signed: Mod._Z3_mk_fpa_to_fp_signed,\n            mk_fpa_to_fp_unsigned: Mod._Z3_mk_fpa_to_fp_unsigned,\n            mk_fpa_to_ubv: Mod._Z3_mk_fpa_to_ubv,\n            mk_fpa_to_sbv: Mod._Z3_mk_fpa_to_sbv,\n            mk_fpa_to_real: Mod._Z3_mk_fpa_to_real,\n            fpa_get_ebits: function (c, s) {\n                let ret = Mod.ccall('Z3_fpa_get_ebits', 'number', ['number', 'number'], [c, s]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            fpa_get_sbits: function (c, s) {\n                let ret = Mod.ccall('Z3_fpa_get_sbits', 'number', ['number', 'number'], [c, s]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            fpa_is_numeral_nan: function (c, t) {\n                return Mod.ccall('Z3_fpa_is_numeral_nan', 'boolean', ['number', 'number'], [c, t]);\n            },\n            fpa_is_numeral_inf: function (c, t) {\n                return Mod.ccall('Z3_fpa_is_numeral_inf', 'boolean', ['number', 'number'], [c, t]);\n            },\n            fpa_is_numeral_zero: function (c, t) {\n                return Mod.ccall('Z3_fpa_is_numeral_zero', 'boolean', ['number', 'number'], [c, t]);\n            },\n            fpa_is_numeral_normal: function (c, t) {\n                return Mod.ccall('Z3_fpa_is_numeral_normal', 'boolean', ['number', 'number'], [c, t]);\n            },\n            fpa_is_numeral_subnormal: function (c, t) {\n                return Mod.ccall('Z3_fpa_is_numeral_subnormal', 'boolean', ['number', 'number'], [c, t]);\n            },\n            fpa_is_numeral_positive: function (c, t) {\n                return Mod.ccall('Z3_fpa_is_numeral_positive', 'boolean', ['number', 'number'], [c, t]);\n            },\n            fpa_is_numeral_negative: function (c, t) {\n                return Mod.ccall('Z3_fpa_is_numeral_negative', 'boolean', ['number', 'number'], [c, t]);\n            },\n            fpa_get_numeral_sign_bv: Mod._Z3_fpa_get_numeral_sign_bv,\n            fpa_get_numeral_significand_bv: Mod._Z3_fpa_get_numeral_significand_bv,\n            fpa_get_numeral_sign: function (c, t) {\n                let ret = Mod.ccall('Z3_fpa_get_numeral_sign', 'boolean', ['number', 'number', 'number'], [c, t, outAddress]);\n                if (!ret) {\n                    return null;\n                }\n                return getOutInt(0);\n            },\n            fpa_get_numeral_significand_string: function (c, t) {\n                return Mod.ccall('Z3_fpa_get_numeral_significand_string', 'string', ['number', 'number'], [c, t]);\n            },\n            fpa_get_numeral_significand_uint64: function (c, t) {\n                let ret = Mod.ccall('Z3_fpa_get_numeral_significand_uint64', 'boolean', ['number', 'number', 'number'], [c, t, outAddress]);\n                if (!ret) {\n                    return null;\n                }\n                return getOutUint64(0);\n            },\n            fpa_get_numeral_exponent_string: function (c, t, biased) {\n                return Mod.ccall('Z3_fpa_get_numeral_exponent_string', 'string', ['number', 'number', 'boolean'], [c, t, biased]);\n            },\n            fpa_get_numeral_exponent_int64: function (c, t, biased) {\n                let ret = Mod.ccall('Z3_fpa_get_numeral_exponent_int64', 'boolean', ['number', 'number', 'number', 'boolean'], [c, t, outAddress, biased]);\n                if (!ret) {\n                    return null;\n                }\n                return getOutInt64(0);\n            },\n            fpa_get_numeral_exponent_bv: Mod._Z3_fpa_get_numeral_exponent_bv,\n            mk_fpa_to_ieee_bv: Mod._Z3_mk_fpa_to_ieee_bv,\n            mk_fpa_to_fp_int_real: Mod._Z3_mk_fpa_to_fp_int_real,\n            mk_optimize: Mod._Z3_mk_optimize,\n            optimize_inc_ref: Mod._Z3_optimize_inc_ref,\n            optimize_dec_ref: Mod._Z3_optimize_dec_ref,\n            optimize_assert: Mod._Z3_optimize_assert,\n            optimize_assert_and_track: Mod._Z3_optimize_assert_and_track,\n            optimize_assert_soft: function (c, o, a, weight, id) {\n                let ret = Mod.ccall('Z3_optimize_assert_soft', 'number', ['number', 'number', 'number', 'string', 'number'], [c, o, a, weight, id]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            optimize_maximize: function (c, o, t) {\n                let ret = Mod.ccall('Z3_optimize_maximize', 'number', ['number', 'number', 'number'], [c, o, t]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            optimize_minimize: function (c, o, t) {\n                let ret = Mod.ccall('Z3_optimize_minimize', 'number', ['number', 'number', 'number'], [c, o, t]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            optimize_push: Mod._Z3_optimize_push,\n            optimize_pop: Mod._Z3_optimize_pop,\n            optimize_check: async function (c, o, assumptions) {\n                return await Mod.async_call(() => Mod.ccall('async_Z3_optimize_check', 'number', ['number', 'number', 'number', 'array'], [\n                    c,\n                    o,\n                    assumptions.length,\n                    intArrayToByteArr(assumptions),\n                ]));\n            },\n            optimize_get_reason_unknown: function (c, d) {\n                return Mod.ccall('Z3_optimize_get_reason_unknown', 'string', ['number', 'number'], [c, d]);\n            },\n            optimize_get_model: Mod._Z3_optimize_get_model,\n            optimize_get_unsat_core: Mod._Z3_optimize_get_unsat_core,\n            optimize_set_params: Mod._Z3_optimize_set_params,\n            optimize_get_param_descrs: Mod._Z3_optimize_get_param_descrs,\n            optimize_get_lower: Mod._Z3_optimize_get_lower,\n            optimize_get_upper: Mod._Z3_optimize_get_upper,\n            optimize_get_lower_as_vector: Mod._Z3_optimize_get_lower_as_vector,\n            optimize_get_upper_as_vector: Mod._Z3_optimize_get_upper_as_vector,\n            optimize_to_string: function (c, o) {\n                return Mod.ccall('Z3_optimize_to_string', 'string', ['number', 'number'], [c, o]);\n            },\n            optimize_from_string: function (c, o, s) {\n                return Mod.ccall('Z3_optimize_from_string', 'void', ['number', 'number', 'string'], [c, o, s]);\n            },\n            optimize_from_file: function (c, o, s) {\n                return Mod.ccall('Z3_optimize_from_file', 'void', ['number', 'number', 'string'], [c, o, s]);\n            },\n            optimize_get_help: function (c, t) {\n                return Mod.ccall('Z3_optimize_get_help', 'string', ['number', 'number'], [c, t]);\n            },\n            optimize_get_statistics: Mod._Z3_optimize_get_statistics,\n            optimize_get_assertions: Mod._Z3_optimize_get_assertions,\n            optimize_get_objectives: Mod._Z3_optimize_get_objectives,\n            polynomial_subresultants: function (c, p, q, x) {\n                return Mod.async_call(Mod._async_Z3_polynomial_subresultants, c, p, q, x);\n            },\n            rcf_del: Mod._Z3_rcf_del,\n            rcf_mk_rational: function (c, val) {\n                return Mod.ccall('Z3_rcf_mk_rational', 'number', ['number', 'string'], [c, val]);\n            },\n            rcf_mk_small_int: Mod._Z3_rcf_mk_small_int,\n            rcf_mk_pi: Mod._Z3_rcf_mk_pi,\n            rcf_mk_e: Mod._Z3_rcf_mk_e,\n            rcf_mk_infinitesimal: Mod._Z3_rcf_mk_infinitesimal,\n            rcf_mk_roots: function (c, a) {\n                let outArray_roots = Mod._malloc(4 * a.length);\n                try {\n                    let ret = Mod.ccall('Z3_rcf_mk_roots', 'number', ['number', 'number', 'array', 'number'], [\n                        c,\n                        a.length,\n                        intArrayToByteArr(a),\n                        outArray_roots,\n                    ]);\n                    ret = new Uint32Array([ret])[0];\n                    return {\n                        rv: ret,\n                        roots: readUintArray(outArray_roots, a.length),\n                    };\n                }\n                finally {\n                    Mod._free(outArray_roots);\n                }\n            },\n            rcf_add: Mod._Z3_rcf_add,\n            rcf_sub: Mod._Z3_rcf_sub,\n            rcf_mul: Mod._Z3_rcf_mul,\n            rcf_div: Mod._Z3_rcf_div,\n            rcf_neg: Mod._Z3_rcf_neg,\n            rcf_inv: Mod._Z3_rcf_inv,\n            rcf_power: Mod._Z3_rcf_power,\n            rcf_lt: function (c, a, b) {\n                return Mod.ccall('Z3_rcf_lt', 'boolean', ['number', 'number', 'number'], [c, a, b]);\n            },\n            rcf_gt: function (c, a, b) {\n                return Mod.ccall('Z3_rcf_gt', 'boolean', ['number', 'number', 'number'], [c, a, b]);\n            },\n            rcf_le: function (c, a, b) {\n                return Mod.ccall('Z3_rcf_le', 'boolean', ['number', 'number', 'number'], [c, a, b]);\n            },\n            rcf_ge: function (c, a, b) {\n                return Mod.ccall('Z3_rcf_ge', 'boolean', ['number', 'number', 'number'], [c, a, b]);\n            },\n            rcf_eq: function (c, a, b) {\n                return Mod.ccall('Z3_rcf_eq', 'boolean', ['number', 'number', 'number'], [c, a, b]);\n            },\n            rcf_neq: function (c, a, b) {\n                return Mod.ccall('Z3_rcf_neq', 'boolean', ['number', 'number', 'number'], [c, a, b]);\n            },\n            rcf_num_to_string: function (c, a, compact, html) {\n                return Mod.ccall('Z3_rcf_num_to_string', 'string', ['number', 'number', 'boolean', 'boolean'], [c, a, compact, html]);\n            },\n            rcf_num_to_decimal_string: function (c, a, prec) {\n                return Mod.ccall('Z3_rcf_num_to_decimal_string', 'string', ['number', 'number', 'number'], [c, a, prec]);\n            },\n            rcf_get_numerator_denominator: function (c, a) {\n                let ret = Mod.ccall('Z3_rcf_get_numerator_denominator', 'void', ['number', 'number', 'number', 'number'], [c, a, outAddress, outAddress + 4]);\n                return {\n                    n: getOutUint(0),\n                    d: getOutUint(1),\n                };\n            },\n            rcf_is_rational: function (c, a) {\n                return Mod.ccall('Z3_rcf_is_rational', 'boolean', ['number', 'number'], [c, a]);\n            },\n            rcf_is_algebraic: function (c, a) {\n                return Mod.ccall('Z3_rcf_is_algebraic', 'boolean', ['number', 'number'], [c, a]);\n            },\n            rcf_is_infinitesimal: function (c, a) {\n                return Mod.ccall('Z3_rcf_is_infinitesimal', 'boolean', ['number', 'number'], [c, a]);\n            },\n            rcf_is_transcendental: function (c, a) {\n                return Mod.ccall('Z3_rcf_is_transcendental', 'boolean', ['number', 'number'], [c, a]);\n            },\n            rcf_extension_index: function (c, a) {\n                let ret = Mod.ccall('Z3_rcf_extension_index', 'number', ['number', 'number'], [c, a]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            rcf_transcendental_name: Mod._Z3_rcf_transcendental_name,\n            rcf_infinitesimal_name: Mod._Z3_rcf_infinitesimal_name,\n            rcf_num_coefficients: function (c, a) {\n                let ret = Mod.ccall('Z3_rcf_num_coefficients', 'number', ['number', 'number'], [c, a]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            rcf_coefficient: Mod._Z3_rcf_coefficient,\n            rcf_num_sign_conditions: function (c, a) {\n                let ret = Mod.ccall('Z3_rcf_num_sign_conditions', 'number', ['number', 'number'], [c, a]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            rcf_sign_condition_sign: Mod._Z3_rcf_sign_condition_sign,\n            rcf_num_sign_condition_coefficients: function (c, a, i) {\n                let ret = Mod.ccall('Z3_rcf_num_sign_condition_coefficients', 'number', ['number', 'number', 'number'], [c, a, i]);\n                ret = new Uint32Array([ret])[0];\n                return ret;\n            },\n            rcf_sign_condition_coefficient: Mod._Z3_rcf_sign_condition_coefficient,\n            fixedpoint_query_from_lvl: function (c, d, query, lvl) {\n                return Mod.async_call(Mod._async_Z3_fixedpoint_query_from_lvl, c, d, query, lvl);\n            },\n            fixedpoint_get_ground_sat_answer: Mod._Z3_fixedpoint_get_ground_sat_answer,\n            fixedpoint_get_rules_along_trace: Mod._Z3_fixedpoint_get_rules_along_trace,\n            fixedpoint_get_rule_names_along_trace: Mod._Z3_fixedpoint_get_rule_names_along_trace,\n            fixedpoint_add_invariant: Mod._Z3_fixedpoint_add_invariant,\n            fixedpoint_get_reachable: Mod._Z3_fixedpoint_get_reachable,\n            qe_model_project: function (c, m, bound, body) {\n                return Mod.ccall('Z3_qe_model_project', 'number', ['number', 'number', 'number', 'array', 'number'], [\n                    c,\n                    m,\n                    bound.length,\n                    intArrayToByteArr(bound),\n                    body,\n                ]);\n            },\n            qe_model_project_skolem: function (c, m, bound, body, map) {\n                return Mod.ccall('Z3_qe_model_project_skolem', 'number', ['number', 'number', 'number', 'array', 'number', 'number'], [\n                    c,\n                    m,\n                    bound.length,\n                    intArrayToByteArr(bound),\n                    body,\n                    map,\n                ]);\n            },\n            model_extrapolate: Mod._Z3_model_extrapolate,\n            qe_lite: Mod._Z3_qe_lite,\n        },\n    };\n}\nexports.init = init;\n\n\n//# sourceURL=webpack://EntryPoint/./node_modules/z3-solver/build/low-level/wrapper.__GENERATED__.js?");

/***/ }),

/***/ "./node_modules/tslib/tslib.es6.mjs":
/*!******************************************!*\
  !*** ./node_modules/tslib/tslib.es6.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __addDisposableResource: () => (/* binding */ __addDisposableResource),\n/* harmony export */   __assign: () => (/* binding */ __assign),\n/* harmony export */   __asyncDelegator: () => (/* binding */ __asyncDelegator),\n/* harmony export */   __asyncGenerator: () => (/* binding */ __asyncGenerator),\n/* harmony export */   __asyncValues: () => (/* binding */ __asyncValues),\n/* harmony export */   __await: () => (/* binding */ __await),\n/* harmony export */   __awaiter: () => (/* binding */ __awaiter),\n/* harmony export */   __classPrivateFieldGet: () => (/* binding */ __classPrivateFieldGet),\n/* harmony export */   __classPrivateFieldIn: () => (/* binding */ __classPrivateFieldIn),\n/* harmony export */   __classPrivateFieldSet: () => (/* binding */ __classPrivateFieldSet),\n/* harmony export */   __createBinding: () => (/* binding */ __createBinding),\n/* harmony export */   __decorate: () => (/* binding */ __decorate),\n/* harmony export */   __disposeResources: () => (/* binding */ __disposeResources),\n/* harmony export */   __esDecorate: () => (/* binding */ __esDecorate),\n/* harmony export */   __exportStar: () => (/* binding */ __exportStar),\n/* harmony export */   __extends: () => (/* binding */ __extends),\n/* harmony export */   __generator: () => (/* binding */ __generator),\n/* harmony export */   __importDefault: () => (/* binding */ __importDefault),\n/* harmony export */   __importStar: () => (/* binding */ __importStar),\n/* harmony export */   __makeTemplateObject: () => (/* binding */ __makeTemplateObject),\n/* harmony export */   __metadata: () => (/* binding */ __metadata),\n/* harmony export */   __param: () => (/* binding */ __param),\n/* harmony export */   __propKey: () => (/* binding */ __propKey),\n/* harmony export */   __read: () => (/* binding */ __read),\n/* harmony export */   __rest: () => (/* binding */ __rest),\n/* harmony export */   __runInitializers: () => (/* binding */ __runInitializers),\n/* harmony export */   __setFunctionName: () => (/* binding */ __setFunctionName),\n/* harmony export */   __spread: () => (/* binding */ __spread),\n/* harmony export */   __spreadArray: () => (/* binding */ __spreadArray),\n/* harmony export */   __spreadArrays: () => (/* binding */ __spreadArrays),\n/* harmony export */   __values: () => (/* binding */ __values),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nfunction __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nfunction __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nfunction __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nfunction __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nfunction __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nfunction __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nfunction __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nfunction __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nfunction __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nfunction __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n  return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nvar __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nfunction __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nfunction __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nfunction __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nfunction __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nfunction __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nfunction __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nfunction __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nfunction __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nfunction __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nfunction __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nfunction __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nfunction __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nfunction __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nfunction __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nfunction __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose;\n    if (async) {\n        if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n        dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n        if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n        dispose = value[Symbol.dispose];\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nfunction __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  function next() {\n    while (env.stack.length) {\n      var rec = env.stack.pop();\n      try {\n        var result = rec.dispose && rec.dispose.call(rec.value);\n        if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n      }\n      catch (e) {\n          fail(e);\n      }\n    }\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n});\n\n\n//# sourceURL=webpack://EntryPoint/./node_modules/tslib/tslib.es6.mjs?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./index.ts");
/******/ 	EntryPoint = __webpack_exports__;
/******/ 	
/******/ })()
;